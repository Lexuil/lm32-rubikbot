
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000b48  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000c4  00000b48  00000b48  00000b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000c0c  00000c0c  00000c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000c24  00000c24  00000c78  2**2
                  ALLOC
  4 .debug_abbrev 00000244  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090e  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000765  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001c5  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000008b  00000000  00000000  00002275  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002609  2**0
                  CONTENTS, READONLY
 13 .debug_loc    000001a2  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000027bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 d9 	calli 430 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0c 30 	ori gp,gp,0xc30
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0c 24 	ori r1,r1,0xc24
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0c b0 	ori r3,r3,0xcb0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"

int period = 0;
int duty = 0;

int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_period(7,200);
 210:	34 01 00 07 	mvi r1,7
 214:	34 02 00 c8 	mvi r2,200
 218:	f8 00 01 89 	calli 83c <pwm_period>
	pwm_duty(7,10);
 21c:	34 01 00 07 	mvi r1,7
 220:	34 02 00 0a 	mvi r2,10
 224:	f8 00 01 56 	calli 77c <pwm_duty>
	pwm_en(7,1);
 228:	34 01 00 07 	mvi r1,7
 22c:	34 02 00 01 	mvi r2,1
 230:	f8 00 01 23 	calli 6bc <pwm_en>
	pwm_period(6,200);
 234:	34 01 00 06 	mvi r1,6
 238:	34 02 00 c8 	mvi r2,200
 23c:	f8 00 01 80 	calli 83c <pwm_period>
	pwm_duty(6,10);
 240:	34 01 00 06 	mvi r1,6
 244:	34 02 00 0a 	mvi r2,10
 248:	f8 00 01 4d 	calli 77c <pwm_duty>
	pwm_en(6,1);
 24c:	34 01 00 06 	mvi r1,6
 250:	34 02 00 01 	mvi r2,1
 254:	f8 00 01 1a 	calli 6bc <pwm_en>
	pwm_period(5,200);
 258:	34 01 00 05 	mvi r1,5
 25c:	34 02 00 c8 	mvi r2,200
 260:	f8 00 01 77 	calli 83c <pwm_period>
	pwm_duty(5,10);
 264:	34 01 00 05 	mvi r1,5
 268:	34 02 00 0a 	mvi r2,10
 26c:	f8 00 01 44 	calli 77c <pwm_duty>
	pwm_en(5,1);
 270:	34 01 00 05 	mvi r1,5
 274:	34 02 00 01 	mvi r2,1
 278:	f8 00 01 11 	calli 6bc <pwm_en>
	pwm_period(4,200);
 27c:	34 01 00 04 	mvi r1,4
 280:	34 02 00 c8 	mvi r2,200
 284:	f8 00 01 6e 	calli 83c <pwm_period>
	pwm_duty(4,10);
 288:	34 01 00 04 	mvi r1,4
 28c:	34 02 00 0a 	mvi r2,10
 290:	f8 00 01 3b 	calli 77c <pwm_duty>
	pwm_en(4,1);
 294:	34 01 00 04 	mvi r1,4
 298:	34 02 00 01 	mvi r2,1
 29c:	f8 00 01 08 	calli 6bc <pwm_en>
	pwm_period(3,200);
 2a0:	34 01 00 03 	mvi r1,3
 2a4:	34 02 00 c8 	mvi r2,200
 2a8:	f8 00 01 65 	calli 83c <pwm_period>
	pwm_duty(3,10);
 2ac:	34 01 00 03 	mvi r1,3
 2b0:	34 02 00 0a 	mvi r2,10
 2b4:	f8 00 01 32 	calli 77c <pwm_duty>
	pwm_en(3,1);
 2b8:	34 01 00 03 	mvi r1,3
 2bc:	34 02 00 01 	mvi r2,1
 2c0:	f8 00 00 ff 	calli 6bc <pwm_en>
	pwm_period(2,200);
 2c4:	34 01 00 02 	mvi r1,2
 2c8:	34 02 00 c8 	mvi r2,200
 2cc:	f8 00 01 5c 	calli 83c <pwm_period>
	pwm_duty(2,10);
 2d0:	34 01 00 02 	mvi r1,2
 2d4:	34 02 00 0a 	mvi r2,10
 2d8:	f8 00 01 29 	calli 77c <pwm_duty>
	pwm_en(2,1);
 2dc:	34 01 00 02 	mvi r1,2
 2e0:	34 02 00 01 	mvi r2,1
 2e4:	f8 00 00 f6 	calli 6bc <pwm_en>
	pwm_period(1,200);
 2e8:	34 01 00 01 	mvi r1,1
 2ec:	34 02 00 c8 	mvi r2,200
 2f0:	f8 00 01 53 	calli 83c <pwm_period>
	pwm_duty(1,10);
 2f4:	34 01 00 01 	mvi r1,1
 2f8:	34 02 00 0a 	mvi r2,10
 2fc:	f8 00 01 20 	calli 77c <pwm_duty>
	pwm_en(1,1);
 300:	34 01 00 01 	mvi r1,1
 304:	34 02 00 01 	mvi r2,1
 308:	f8 00 00 ed 	calli 6bc <pwm_en>
	pwm_period(0,200);
 30c:	34 01 00 00 	mvi r1,0
 310:	34 02 00 c8 	mvi r2,200
 314:	f8 00 01 4a 	calli 83c <pwm_period>
	pwm_duty(0,10);
 318:	34 01 00 00 	mvi r1,0
 31c:	34 02 00 0a 	mvi r2,10
 320:	f8 00 01 17 	calli 77c <pwm_duty>
	pwm_en(0,1);
 324:	34 02 00 01 	mvi r2,1
 328:	34 01 00 00 	mvi r1,0
 32c:	f8 00 00 e4 	calli 6bc <pwm_en>
	duty = pwm_getduty(0);
 330:	34 01 00 00 	mvi r1,0
 334:	f8 00 01 d4 	calli a84 <pwm_getduty>
 338:	78 02 00 00 	mvhi r2,0x0
 33c:	38 42 0c 28 	ori r2,r2,0xc28
 340:	58 41 00 00 	sw (r2+0),r1
	period = pwm_getperiod(0);
 344:	34 01 00 00 	mvi r1,0
 348:	f8 00 01 9e 	calli 9c0 <pwm_getperiod>
 34c:	78 02 00 00 	mvhi r2,0x0
 350:	38 42 0c 24 	ori r2,r2,0xc24
 354:	58 41 00 00 	sw (r2+0),r1
	pwm_period(3,100);
 358:	34 02 00 64 	mvi r2,100
 35c:	34 01 00 03 	mvi r1,3
 360:	f8 00 01 37 	calli 83c <pwm_period>
	pwm_duty(3,20);
 364:	34 01 00 03 	mvi r1,3
 368:	34 02 00 14 	mvi r2,20
 36c:	f8 00 01 04 	calli 77c <pwm_duty>
	pwm_en(3,1);
 370:	34 01 00 03 	mvi r1,3
 374:	34 02 00 01 	mvi r2,1
 378:	f8 00 00 d1 	calli 6bc <pwm_en>
	msleep(1000000);
 37c:	78 02 00 00 	mvhi r2,0x0
 380:	38 42 0b 48 	ori r2,r2,0xb48
 384:	28 41 00 00 	lw r1,(r2+0)
 388:	f8 00 00 5a 	calli 4f0 <msleep>
	while(1){
		pwm_duty(0,13);
 38c:	34 02 00 0d 	mvi r2,13
 390:	34 01 00 00 	mvi r1,0
 394:	f8 00 00 fa 	calli 77c <pwm_duty>
		msleep(1000000);
 398:	78 02 00 00 	mvhi r2,0x0
 39c:	38 42 0b 48 	ori r2,r2,0xb48
 3a0:	28 41 00 00 	lw r1,(r2+0)
 3a4:	f8 00 00 53 	calli 4f0 <msleep>
		pwm_duty(0,15);
 3a8:	34 02 00 0f 	mvi r2,15
 3ac:	34 01 00 00 	mvi r1,0
 3b0:	f8 00 00 f3 	calli 77c <pwm_duty>
		msleep(1000000);
 3b4:	78 02 00 00 	mvhi r2,0x0
 3b8:	38 42 0b 48 	ori r2,r2,0xb48
 3bc:	28 41 00 00 	lw r1,(r2+0)
 3c0:	f8 00 00 4c 	calli 4f0 <msleep>
		pwm_duty(0,20);
 3c4:	34 02 00 14 	mvi r2,20
 3c8:	34 01 00 00 	mvi r1,0
 3cc:	f8 00 00 ec 	calli 77c <pwm_duty>
		msleep(1000000);
 3d0:	78 02 00 00 	mvhi r2,0x0
 3d4:	38 42 0b 48 	ori r2,r2,0xb48
 3d8:	28 41 00 00 	lw r1,(r2+0)
 3dc:	f8 00 00 45 	calli 4f0 <msleep>
		pwm_duty(0,10);
 3e0:	34 01 00 00 	mvi r1,0
 3e4:	34 02 00 0a 	mvi r2,10
 3e8:	f8 00 00 e5 	calli 77c <pwm_duty>
		msleep(1000000);
 3ec:	78 02 00 00 	mvhi r2,0x0
 3f0:	38 42 0b 48 	ori r2,r2,0xb48
 3f4:	28 41 00 00 	lw r1,(r2+0)
 3f8:	f8 00 00 3e 	calli 4f0 <msleep>
 3fc:	e3 ff ff e4 	bi 38c <main+0x184>

00000400 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 400:	c3 a0 00 00 	ret

00000404 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 404:	78 01 00 00 	mvhi r1,0x0
 408:	38 21 0c ac 	ori r1,r1,0xcac
 40c:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 410:	78 02 00 00 	mvhi r2,0x0
 414:	38 42 0c 10 	ori r2,r2,0xc10
 418:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 41c:	34 63 00 01 	addi r3,r3,1
 420:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 424:	34 01 00 0e 	mvi r1,14
 428:	58 41 00 00 	sw (r2+0),r1
}
 42c:	c3 a0 00 00 	ret

00000430 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 430:	37 9c ff f0 	addi sp,sp,-16
 434:	5b 8b 00 10 	sw (sp+16),r11
 438:	5b 8c 00 0c 	sw (sp+12),r12
 43c:	5b 8d 00 08 	sw (sp+8),r13
 440:	5b 9d 00 04 	sw (sp+4),ra
 444:	78 0b 00 00 	mvhi r11,0x0
 448:	39 6b 0c 2c 	ori r11,r11,0xc2c
 44c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 450:	35 6d 00 80 	addi r13,r11,128
 454:	e0 00 00 04 	bi 464 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 458:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 45c:	45 6d 00 08 	be r11,r13,47c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 460:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 464:	21 81 00 01 	andi r1,r12,0x1
 468:	44 20 ff fc 	be r1,r0,458 <irq_handler+0x28>
 46c:	29 61 00 00 	lw r1,(r11+0)
 470:	35 6b 00 04 	addi r11,r11,4
 474:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 478:	5d 6d ff fa 	bne r11,r13,460 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 47c:	2b 9d 00 04 	lw ra,(sp+4)
 480:	2b 8b 00 10 	lw r11,(sp+16)
 484:	2b 8c 00 0c 	lw r12,(sp+12)
 488:	2b 8d 00 08 	lw r13,(sp+8)
 48c:	37 9c 00 10 	addi sp,sp,16
 490:	c3 a0 00 00 	ret

00000494 <isr_init>:

void isr_init()
{
 494:	78 01 00 00 	mvhi r1,0x0
 498:	78 02 00 00 	mvhi r2,0x0
 49c:	38 21 0c 2c 	ori r1,r1,0xc2c
 4a0:	38 42 04 00 	ori r2,r2,0x400
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 4a4:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 4a8:	58 22 00 00 	sw (r1+0),r2
 4ac:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4b0:	5c 23 ff fe 	bne r1,r3,4a8 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4b4:	c3 a0 00 00 	ret

000004b8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4b8:	78 03 00 00 	mvhi r3,0x0
 4bc:	3c 21 00 02 	sli r1,r1,2
 4c0:	38 63 0c 2c 	ori r3,r3,0xc2c
 4c4:	b4 61 18 00 	add r3,r3,r1
 4c8:	58 62 00 00 	sw (r3+0),r2
}
 4cc:	c3 a0 00 00 	ret

000004d0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 4d0:	78 03 00 00 	mvhi r3,0x0
 4d4:	3c 21 00 02 	sli r1,r1,2
 4d8:	38 63 0c 2c 	ori r3,r3,0xc2c
 4dc:	78 02 00 00 	mvhi r2,0x0
 4e0:	b4 61 18 00 	add r3,r3,r1
 4e4:	38 42 04 00 	ori r2,r2,0x400
 4e8:	58 62 00 00 	sw (r3+0),r2
}
 4ec:	c3 a0 00 00 	ret

000004f0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 4f0:	78 02 00 00 	mvhi r2,0x0
 4f4:	38 42 0c 10 	ori r2,r2,0xc10
 4f8:	38 03 c3 50 	mvu r3,0xc350
 4fc:	28 42 00 00 	lw r2,(r2+0)
 500:	88 23 08 00 	mul r1,r1,r3
 504:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 508:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 50c:	34 01 00 08 	mvi r1,8
 510:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 514:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 518:	20 21 00 01 	andi r1,r1,0x1
 51c:	44 20 ff fe 	be r1,r0,514 <msleep+0x24>
}
 520:	c3 a0 00 00 	ret

00000524 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 524:	78 02 00 00 	mvhi r2,0x0
 528:	38 42 0c 10 	ori r2,r2,0xc10
 52c:	28 42 00 00 	lw r2,(r2+0)
 530:	08 21 00 32 	muli r1,r1,50
 534:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 538:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 53c:	34 01 00 08 	mvi r1,8
 540:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 544:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 548:	20 21 00 01 	andi r1,r1,0x1
 54c:	44 20 ff fe 	be r1,r0,544 <nsleep+0x20>
}
 550:	c3 a0 00 00 	ret

00000554 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 554:	78 01 00 00 	mvhi r1,0x0
 558:	38 21 0c 10 	ori r1,r1,0xc10
 55c:	28 23 00 00 	lw r3,(r1+0)
 560:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 564:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 568:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 56c:	38 21 0c ac 	ori r1,r1,0xcac

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 570:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 574:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 578:	78 02 00 00 	mvhi r2,0x0
 57c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 580:	34 04 00 0e 	mvi r4,14
 584:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 588:	38 21 0c 2c 	ori r1,r1,0xc2c
 58c:	38 42 04 04 	ori r2,r2,0x404
 590:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 594:	c3 a0 00 00 	ret

00000598 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 598:	c3 a0 00 00 	ret

0000059c <uart_getchar>:

char uart_getchar()
{   
 59c:	78 01 00 00 	mvhi r1,0x0
 5a0:	38 21 0c 0c 	ori r1,r1,0xc0c
 5a4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5a8:	28 41 00 00 	lw r1,(r2+0)
 5ac:	20 21 00 01 	andi r1,r1,0x1
 5b0:	44 20 ff fe 	be r1,r0,5a8 <uart_getchar+0xc>
	return uart0->rxtx;
 5b4:	28 41 00 04 	lw r1,(r2+4)
}
 5b8:	20 21 00 ff 	andi r1,r1,0xff
 5bc:	c3 a0 00 00 	ret

000005c0 <uart_putchar>:

void uart_putchar(char c)
{
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 0c 0c 	ori r2,r2,0xc0c
 5c8:	28 43 00 00 	lw r3,(r2+0)
 5cc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5d0:	28 62 00 00 	lw r2,(r3+0)
 5d4:	20 42 00 10 	andi r2,r2,0x10
 5d8:	5c 40 ff fe 	bne r2,r0,5d0 <uart_putchar+0x10>
	uart0->rxtx = c;
 5dc:	58 61 00 04 	sw (r3+4),r1
}
 5e0:	c3 a0 00 00 	ret

000005e4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5e4:	40 24 00 00 	lbu r4,(r1+0)
 5e8:	44 80 00 0b 	be r4,r0,614 <uart_putstr+0x30>
 5ec:	78 02 00 00 	mvhi r2,0x0
 5f0:	38 42 0c 0c 	ori r2,r2,0xc0c
 5f4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5f8:	28 62 00 00 	lw r2,(r3+0)
 5fc:	20 42 00 10 	andi r2,r2,0x10
 600:	5c 40 ff fe 	bne r2,r0,5f8 <uart_putstr+0x14>
	uart0->rxtx = c;
 604:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 608:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 60c:	40 24 00 00 	lbu r4,(r1+0)
 610:	5c 82 ff fa 	bne r4,r2,5f8 <uart_putstr+0x14>
 614:	c3 a0 00 00 	ret

00000618 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 618:	78 01 00 00 	mvhi r1,0x0
 61c:	38 21 0c 1c 	ori r1,r1,0xc1c
 620:	28 21 00 00 	lw r1,(r1+0)
	i2c0->prerh =0x50;
 624:	34 02 00 50 	mvi r2,80
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 628:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 62c:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 630:	34 02 ff 80 	mvi r2,-128
 634:	30 22 00 02 	sb (r1+2),r2


}
 638:	c3 a0 00 00 	ret

0000063c <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 63c:	78 04 00 00 	mvhi r4,0x0
 640:	38 84 0c 1c 	ori r4,r4,0xc1c
 644:	28 84 00 00 	lw r4,(r4+0)
 648:	3c 21 00 02 	sli r1,r1,2


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 64c:	20 42 00 ff 	andi r2,r2,0xff

   i2c0->TxRx=(addrDev<<1 +1);
 650:	20 21 00 fc 	andi r1,r1,0xfc
 654:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 658:	34 01 ff 90 	mvi r1,-112


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 65c:	20 63 00 ff 	andi r3,r3,0xff

   i2c0->TxRx=(addrDev<<1 +1);
   i2c0->crsr =0x90;
 660:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 664:	40 81 00 04 	lbu r1,(r4+4)
 668:	20 21 00 02 	andi r1,r1,0x2
 66c:	5c 20 ff fe 	bne r1,r0,664 <i2c_write+0x28>
   i2c0->TxRx=addrReg;
 670:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 674:	34 01 00 10 	mvi r1,16
 678:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 67c:	40 81 00 04 	lbu r1,(r4+4)
 680:	20 21 00 02 	andi r1,r1,0x2
 684:	5c 20 ff fe 	bne r1,r0,67c <i2c_write+0x40>
   
   i2c0->TxRx=dat;
 688:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 68c:	34 01 00 10 	mvi r1,16
 690:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 694:	40 81 00 04 	lbu r1,(r4+4)
 698:	20 21 00 02 	andi r1,r1,0x2
 69c:	5c 20 ff fe 	bne r1,r0,694 <i2c_write+0x58>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 6a0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 6a4:	34 01 00 50 	mvi r1,80
 6a8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6ac:	40 81 00 04 	lbu r1,(r4+4)
 6b0:	20 21 00 02 	andi r1,r1,0x2
 6b4:	5c 20 ff fe 	bne r1,r0,6ac <i2c_write+0x70>
//7

}
 6b8:	c3 a0 00 00 	ret

000006bc <pwm_en>:
/***************************************************************************
 * PWM Functions
 */

void pwm_en(uint32_t sel, uint32_t val){
	switch(sel){
 6bc:	34 03 00 07 	mvi r3,7
 6c0:	54 23 00 0b 	bgu r1,r3,6ec <pwm_en+0x30>
 6c4:	3c 21 00 02 	sli r1,r1,2
 6c8:	78 03 00 00 	mvhi r3,0x0
 6cc:	38 63 0b 4c 	ori r3,r3,0xb4c
 6d0:	b4 61 18 00 	add r3,r3,r1
 6d4:	28 61 00 00 	lw r1,(r3+0)
 6d8:	c0 20 00 00 	b r1
		case 6:
			pwm0->en6 = val;
			break;
			
		case 7:
			pwm0->en7 = val;
 6dc:	78 01 00 00 	mvhi r1,0x0
 6e0:	38 21 0c 20 	ori r1,r1,0xc20
 6e4:	28 21 00 00 	lw r1,(r1+0)
 6e8:	58 22 00 54 	sw (r1+84),r2
 6ec:	c3 a0 00 00 	ret
		case 5:
			pwm0->en5 = val;
			break;
			
		case 6:
			pwm0->en6 = val;
 6f0:	78 01 00 00 	mvhi r1,0x0
 6f4:	38 21 0c 20 	ori r1,r1,0xc20
 6f8:	28 21 00 00 	lw r1,(r1+0)
 6fc:	58 22 00 48 	sw (r1+72),r2
			break;
 700:	c3 a0 00 00 	ret
 */

void pwm_en(uint32_t sel, uint32_t val){
	switch(sel){
		case 0:
			pwm0->en0 = val;
 704:	78 01 00 00 	mvhi r1,0x0
 708:	38 21 0c 20 	ori r1,r1,0xc20
 70c:	28 21 00 00 	lw r1,(r1+0)
 710:	58 22 00 00 	sw (r1+0),r2
			break;
 714:	c3 a0 00 00 	ret

		case 1:
			pwm0->en1 = val;
 718:	78 01 00 00 	mvhi r1,0x0
 71c:	38 21 0c 20 	ori r1,r1,0xc20
 720:	28 21 00 00 	lw r1,(r1+0)
 724:	58 22 00 0c 	sw (r1+12),r2
			break;
 728:	c3 a0 00 00 	ret
			
		case 2:
			pwm0->en2 = val;
 72c:	78 01 00 00 	mvhi r1,0x0
 730:	38 21 0c 20 	ori r1,r1,0xc20
 734:	28 21 00 00 	lw r1,(r1+0)
 738:	58 22 00 18 	sw (r1+24),r2
			break;
 73c:	c3 a0 00 00 	ret
			
		case 3:
			pwm0->en3 = val;
 740:	78 01 00 00 	mvhi r1,0x0
 744:	38 21 0c 20 	ori r1,r1,0xc20
 748:	28 21 00 00 	lw r1,(r1+0)
 74c:	58 22 00 24 	sw (r1+36),r2
			break;
 750:	c3 a0 00 00 	ret
			
		case 4:
			pwm0->en4 = val;
 754:	78 01 00 00 	mvhi r1,0x0
 758:	38 21 0c 20 	ori r1,r1,0xc20
 75c:	28 21 00 00 	lw r1,(r1+0)
 760:	58 22 00 30 	sw (r1+48),r2
			break;
 764:	c3 a0 00 00 	ret
			
		case 5:
			pwm0->en5 = val;
 768:	78 01 00 00 	mvhi r1,0x0
 76c:	38 21 0c 20 	ori r1,r1,0xc20
 770:	28 21 00 00 	lw r1,(r1+0)
 774:	58 22 00 3c 	sw (r1+60),r2
			break;
 778:	c3 a0 00 00 	ret

0000077c <pwm_duty>:
			break;
	}
}

void pwm_duty(uint32_t sel, uint32_t val){
	switch(sel){
 77c:	34 03 00 07 	mvi r3,7
 780:	54 23 00 0b 	bgu r1,r3,7ac <pwm_duty+0x30>
 784:	3c 21 00 02 	sli r1,r1,2
 788:	78 03 00 00 	mvhi r3,0x0
 78c:	38 63 0b 6c 	ori r3,r3,0xb6c
 790:	b4 61 18 00 	add r3,r3,r1
 794:	28 61 00 00 	lw r1,(r3+0)
 798:	c0 20 00 00 	b r1
		case 6:
			pwm0->duty6 = val;
			break;
			
		case 7:
			pwm0->duty7 = val;
 79c:	78 01 00 00 	mvhi r1,0x0
 7a0:	38 21 0c 20 	ori r1,r1,0xc20
 7a4:	28 21 00 00 	lw r1,(r1+0)
 7a8:	58 22 00 5c 	sw (r1+92),r2
 7ac:	c3 a0 00 00 	ret
		case 5:
			pwm0->duty5 = val;
			break;
			
		case 6:
			pwm0->duty6 = val;
 7b0:	78 01 00 00 	mvhi r1,0x0
 7b4:	38 21 0c 20 	ori r1,r1,0xc20
 7b8:	28 21 00 00 	lw r1,(r1+0)
 7bc:	58 22 00 50 	sw (r1+80),r2
			break;
 7c0:	c3 a0 00 00 	ret
}

void pwm_duty(uint32_t sel, uint32_t val){
	switch(sel){
		case 0:
			pwm0->duty0 = val;
 7c4:	78 01 00 00 	mvhi r1,0x0
 7c8:	38 21 0c 20 	ori r1,r1,0xc20
 7cc:	28 21 00 00 	lw r1,(r1+0)
 7d0:	58 22 00 08 	sw (r1+8),r2
			break;
 7d4:	c3 a0 00 00 	ret

		case 1:
			pwm0->duty1 = val;
 7d8:	78 01 00 00 	mvhi r1,0x0
 7dc:	38 21 0c 20 	ori r1,r1,0xc20
 7e0:	28 21 00 00 	lw r1,(r1+0)
 7e4:	58 22 00 14 	sw (r1+20),r2
			break;
 7e8:	c3 a0 00 00 	ret
			
		case 2:
			pwm0->duty2 = val;
 7ec:	78 01 00 00 	mvhi r1,0x0
 7f0:	38 21 0c 20 	ori r1,r1,0xc20
 7f4:	28 21 00 00 	lw r1,(r1+0)
 7f8:	58 22 00 20 	sw (r1+32),r2
			break;
 7fc:	c3 a0 00 00 	ret
			
		case 3:
			pwm0->duty3 = val;
 800:	78 01 00 00 	mvhi r1,0x0
 804:	38 21 0c 20 	ori r1,r1,0xc20
 808:	28 21 00 00 	lw r1,(r1+0)
 80c:	58 22 00 2c 	sw (r1+44),r2
			break;
 810:	c3 a0 00 00 	ret
			
		case 4:
			pwm0->duty4 = val;
 814:	78 01 00 00 	mvhi r1,0x0
 818:	38 21 0c 20 	ori r1,r1,0xc20
 81c:	28 21 00 00 	lw r1,(r1+0)
 820:	58 22 00 38 	sw (r1+56),r2
			break;
 824:	c3 a0 00 00 	ret
			
		case 5:
			pwm0->duty5 = val;
 828:	78 01 00 00 	mvhi r1,0x0
 82c:	38 21 0c 20 	ori r1,r1,0xc20
 830:	28 21 00 00 	lw r1,(r1+0)
 834:	58 22 00 44 	sw (r1+68),r2
			break;
 838:	c3 a0 00 00 	ret

0000083c <pwm_period>:
			break;
	}
}

void pwm_period(uint32_t sel, uint32_t val){
	switch(sel){
 83c:	34 03 00 07 	mvi r3,7
 840:	54 23 00 0b 	bgu r1,r3,86c <pwm_period+0x30>
 844:	3c 21 00 02 	sli r1,r1,2
 848:	78 03 00 00 	mvhi r3,0x0
 84c:	38 63 0b 8c 	ori r3,r3,0xb8c
 850:	b4 61 18 00 	add r3,r3,r1
 854:	28 61 00 00 	lw r1,(r3+0)
 858:	c0 20 00 00 	b r1
		case 6:
			pwm0->period6 = val;
			break;
			
		case 7:
			pwm0->period7 = val;
 85c:	78 01 00 00 	mvhi r1,0x0
 860:	38 21 0c 20 	ori r1,r1,0xc20
 864:	28 21 00 00 	lw r1,(r1+0)
 868:	58 22 00 58 	sw (r1+88),r2
 86c:	c3 a0 00 00 	ret
		case 5:
			pwm0->period5 = val;
			break;
			
		case 6:
			pwm0->period6 = val;
 870:	78 01 00 00 	mvhi r1,0x0
 874:	38 21 0c 20 	ori r1,r1,0xc20
 878:	28 21 00 00 	lw r1,(r1+0)
 87c:	58 22 00 4c 	sw (r1+76),r2
			break;
 880:	c3 a0 00 00 	ret
}

void pwm_period(uint32_t sel, uint32_t val){
	switch(sel){
		case 0:
			pwm0->period0 = val;
 884:	78 01 00 00 	mvhi r1,0x0
 888:	38 21 0c 20 	ori r1,r1,0xc20
 88c:	28 21 00 00 	lw r1,(r1+0)
 890:	58 22 00 04 	sw (r1+4),r2
			break;
 894:	c3 a0 00 00 	ret

		case 1:
			pwm0->period1 = val;
 898:	78 01 00 00 	mvhi r1,0x0
 89c:	38 21 0c 20 	ori r1,r1,0xc20
 8a0:	28 21 00 00 	lw r1,(r1+0)
 8a4:	58 22 00 10 	sw (r1+16),r2
			break;
 8a8:	c3 a0 00 00 	ret
			
		case 2:
			pwm0->period2 = val;
 8ac:	78 01 00 00 	mvhi r1,0x0
 8b0:	38 21 0c 20 	ori r1,r1,0xc20
 8b4:	28 21 00 00 	lw r1,(r1+0)
 8b8:	58 22 00 1c 	sw (r1+28),r2
			break;
 8bc:	c3 a0 00 00 	ret
			
		case 3:
			pwm0->period3 = val;
 8c0:	78 01 00 00 	mvhi r1,0x0
 8c4:	38 21 0c 20 	ori r1,r1,0xc20
 8c8:	28 21 00 00 	lw r1,(r1+0)
 8cc:	58 22 00 28 	sw (r1+40),r2
			break;
 8d0:	c3 a0 00 00 	ret
			
		case 4:
			pwm0->period4 = val;
 8d4:	78 01 00 00 	mvhi r1,0x0
 8d8:	38 21 0c 20 	ori r1,r1,0xc20
 8dc:	28 21 00 00 	lw r1,(r1+0)
 8e0:	58 22 00 34 	sw (r1+52),r2
			break;
 8e4:	c3 a0 00 00 	ret
			
		case 5:
			pwm0->period5 = val;
 8e8:	78 01 00 00 	mvhi r1,0x0
 8ec:	38 21 0c 20 	ori r1,r1,0xc20
 8f0:	28 21 00 00 	lw r1,(r1+0)
 8f4:	58 22 00 40 	sw (r1+64),r2
			break;
 8f8:	c3 a0 00 00 	ret

000008fc <pwm_geten>:
			break;
	}
}

uint32_t pwm_geten(uint32_t sel){
	switch(sel){
 8fc:	34 02 00 07 	mvi r2,7
 900:	54 22 00 2f 	bgu r1,r2,9bc <pwm_geten+0xc0>
 904:	3c 21 00 02 	sli r1,r1,2
 908:	78 02 00 00 	mvhi r2,0x0
 90c:	38 42 0b ac 	ori r2,r2,0xbac
 910:	b4 41 10 00 	add r2,r2,r1
 914:	28 41 00 00 	lw r1,(r2+0)
 918:	c0 20 00 00 	b r1
		case 5:
			return pwm0->en5;
			break;
			
		case 6:
			return pwm0->en6;
 91c:	78 01 00 00 	mvhi r1,0x0
 920:	38 21 0c 20 	ori r1,r1,0xc20
 924:	28 21 00 00 	lw r1,(r1+0)
 928:	28 21 00 48 	lw r1,(r1+72)
 92c:	c3 a0 00 00 	ret
			break;
			
		case 7:
			return pwm0->en7;
 930:	78 01 00 00 	mvhi r1,0x0
 934:	38 21 0c 20 	ori r1,r1,0xc20
 938:	28 21 00 00 	lw r1,(r1+0)
 93c:	28 21 00 54 	lw r1,(r1+84)
 940:	c3 a0 00 00 	ret
}

uint32_t pwm_geten(uint32_t sel){
	switch(sel){
		case 0:
			return pwm0->en0;
 944:	78 01 00 00 	mvhi r1,0x0
 948:	38 21 0c 20 	ori r1,r1,0xc20
 94c:	28 21 00 00 	lw r1,(r1+0)
 950:	28 21 00 00 	lw r1,(r1+0)
 954:	c3 a0 00 00 	ret
			break;

		case 1:
			return pwm0->en1;
 958:	78 01 00 00 	mvhi r1,0x0
 95c:	38 21 0c 20 	ori r1,r1,0xc20
 960:	28 21 00 00 	lw r1,(r1+0)
 964:	28 21 00 0c 	lw r1,(r1+12)
 968:	c3 a0 00 00 	ret
			break;
			
		case 2:
			return pwm0->en2;
 96c:	78 01 00 00 	mvhi r1,0x0
 970:	38 21 0c 20 	ori r1,r1,0xc20
 974:	28 21 00 00 	lw r1,(r1+0)
 978:	28 21 00 18 	lw r1,(r1+24)
 97c:	c3 a0 00 00 	ret
			break;
			
		case 3:
			return pwm0->en3;
 980:	78 01 00 00 	mvhi r1,0x0
 984:	38 21 0c 20 	ori r1,r1,0xc20
 988:	28 21 00 00 	lw r1,(r1+0)
 98c:	28 21 00 24 	lw r1,(r1+36)
 990:	c3 a0 00 00 	ret
			break;
			
		case 4:
			return pwm0->en4;
 994:	78 01 00 00 	mvhi r1,0x0
 998:	38 21 0c 20 	ori r1,r1,0xc20
 99c:	28 21 00 00 	lw r1,(r1+0)
 9a0:	28 21 00 30 	lw r1,(r1+48)
 9a4:	c3 a0 00 00 	ret
			break;
			
		case 5:
			return pwm0->en5;
 9a8:	78 01 00 00 	mvhi r1,0x0
 9ac:	38 21 0c 20 	ori r1,r1,0xc20
 9b0:	28 21 00 00 	lw r1,(r1+0)
 9b4:	28 21 00 3c 	lw r1,(r1+60)
 9b8:	c3 a0 00 00 	ret
			
		case 7:
			return pwm0->en7;
			break;
	}
}
 9bc:	c3 a0 00 00 	ret

000009c0 <pwm_getperiod>:

uint32_t pwm_getperiod(uint32_t sel){
	switch(sel){
 9c0:	34 02 00 07 	mvi r2,7
 9c4:	54 22 00 2f 	bgu r1,r2,a80 <pwm_getperiod+0xc0>
 9c8:	3c 21 00 02 	sli r1,r1,2
 9cc:	78 02 00 00 	mvhi r2,0x0
 9d0:	38 42 0b cc 	ori r2,r2,0xbcc
 9d4:	b4 41 10 00 	add r2,r2,r1
 9d8:	28 41 00 00 	lw r1,(r2+0)
 9dc:	c0 20 00 00 	b r1
		case 5:
			return pwm0->period5;
			break;
			
		case 6:
			return pwm0->period6;
 9e0:	78 01 00 00 	mvhi r1,0x0
 9e4:	38 21 0c 20 	ori r1,r1,0xc20
 9e8:	28 21 00 00 	lw r1,(r1+0)
 9ec:	28 21 00 4c 	lw r1,(r1+76)
 9f0:	c3 a0 00 00 	ret
			break;
			
		case 7:
			return pwm0->period7;
 9f4:	78 01 00 00 	mvhi r1,0x0
 9f8:	38 21 0c 20 	ori r1,r1,0xc20
 9fc:	28 21 00 00 	lw r1,(r1+0)
 a00:	28 21 00 58 	lw r1,(r1+88)
 a04:	c3 a0 00 00 	ret
}

uint32_t pwm_getperiod(uint32_t sel){
	switch(sel){
		case 0:
			return pwm0->period0;
 a08:	78 01 00 00 	mvhi r1,0x0
 a0c:	38 21 0c 20 	ori r1,r1,0xc20
 a10:	28 21 00 00 	lw r1,(r1+0)
 a14:	28 21 00 04 	lw r1,(r1+4)
 a18:	c3 a0 00 00 	ret
			break;

		case 1:
			return pwm0->period1;
 a1c:	78 01 00 00 	mvhi r1,0x0
 a20:	38 21 0c 20 	ori r1,r1,0xc20
 a24:	28 21 00 00 	lw r1,(r1+0)
 a28:	28 21 00 10 	lw r1,(r1+16)
 a2c:	c3 a0 00 00 	ret
			break;
			
		case 2:
			return pwm0->period2;
 a30:	78 01 00 00 	mvhi r1,0x0
 a34:	38 21 0c 20 	ori r1,r1,0xc20
 a38:	28 21 00 00 	lw r1,(r1+0)
 a3c:	28 21 00 1c 	lw r1,(r1+28)
 a40:	c3 a0 00 00 	ret
			break;
			
		case 3:
			return pwm0->period3;
 a44:	78 01 00 00 	mvhi r1,0x0
 a48:	38 21 0c 20 	ori r1,r1,0xc20
 a4c:	28 21 00 00 	lw r1,(r1+0)
 a50:	28 21 00 28 	lw r1,(r1+40)
 a54:	c3 a0 00 00 	ret
			break;
			
		case 4:
			return pwm0->period4;
 a58:	78 01 00 00 	mvhi r1,0x0
 a5c:	38 21 0c 20 	ori r1,r1,0xc20
 a60:	28 21 00 00 	lw r1,(r1+0)
 a64:	28 21 00 34 	lw r1,(r1+52)
 a68:	c3 a0 00 00 	ret
			break;
			
		case 5:
			return pwm0->period5;
 a6c:	78 01 00 00 	mvhi r1,0x0
 a70:	38 21 0c 20 	ori r1,r1,0xc20
 a74:	28 21 00 00 	lw r1,(r1+0)
 a78:	28 21 00 40 	lw r1,(r1+64)
 a7c:	c3 a0 00 00 	ret
			
		case 7:
			return pwm0->period7;
			break;
	}
}
 a80:	c3 a0 00 00 	ret

00000a84 <pwm_getduty>:

uint32_t pwm_getduty(uint32_t sel){
	switch(sel){
 a84:	34 02 00 07 	mvi r2,7
 a88:	54 22 00 2f 	bgu r1,r2,b44 <pwm_getduty+0xc0>
 a8c:	3c 21 00 02 	sli r1,r1,2
 a90:	78 02 00 00 	mvhi r2,0x0
 a94:	38 42 0b ec 	ori r2,r2,0xbec
 a98:	b4 41 10 00 	add r2,r2,r1
 a9c:	28 41 00 00 	lw r1,(r2+0)
 aa0:	c0 20 00 00 	b r1
		case 5:
			return pwm0->duty5;
			break;
			
		case 6:
			return pwm0->duty6;
 aa4:	78 01 00 00 	mvhi r1,0x0
 aa8:	38 21 0c 20 	ori r1,r1,0xc20
 aac:	28 21 00 00 	lw r1,(r1+0)
 ab0:	28 21 00 50 	lw r1,(r1+80)
 ab4:	c3 a0 00 00 	ret
			break;
			
		case 7:
			return pwm0->duty7;
 ab8:	78 01 00 00 	mvhi r1,0x0
 abc:	38 21 0c 20 	ori r1,r1,0xc20
 ac0:	28 21 00 00 	lw r1,(r1+0)
 ac4:	28 21 00 5c 	lw r1,(r1+92)
 ac8:	c3 a0 00 00 	ret
}

uint32_t pwm_getduty(uint32_t sel){
	switch(sel){
		case 0:
			return pwm0->duty0;
 acc:	78 01 00 00 	mvhi r1,0x0
 ad0:	38 21 0c 20 	ori r1,r1,0xc20
 ad4:	28 21 00 00 	lw r1,(r1+0)
 ad8:	28 21 00 08 	lw r1,(r1+8)
 adc:	c3 a0 00 00 	ret
			break;

		case 1:
			return pwm0->duty1;
 ae0:	78 01 00 00 	mvhi r1,0x0
 ae4:	38 21 0c 20 	ori r1,r1,0xc20
 ae8:	28 21 00 00 	lw r1,(r1+0)
 aec:	28 21 00 14 	lw r1,(r1+20)
 af0:	c3 a0 00 00 	ret
			break;
			
		case 2:
			return pwm0->duty2;
 af4:	78 01 00 00 	mvhi r1,0x0
 af8:	38 21 0c 20 	ori r1,r1,0xc20
 afc:	28 21 00 00 	lw r1,(r1+0)
 b00:	28 21 00 20 	lw r1,(r1+32)
 b04:	c3 a0 00 00 	ret
			break;
			
		case 3:
			return pwm0->duty3 ;
 b08:	78 01 00 00 	mvhi r1,0x0
 b0c:	38 21 0c 20 	ori r1,r1,0xc20
 b10:	28 21 00 00 	lw r1,(r1+0)
 b14:	28 21 00 2c 	lw r1,(r1+44)
 b18:	c3 a0 00 00 	ret
			break;
			
		case 4:
			return pwm0->duty4;
 b1c:	78 01 00 00 	mvhi r1,0x0
 b20:	38 21 0c 20 	ori r1,r1,0xc20
 b24:	28 21 00 00 	lw r1,(r1+0)
 b28:	28 21 00 38 	lw r1,(r1+56)
 b2c:	c3 a0 00 00 	ret
			break;
			
		case 5:
			return pwm0->duty5;
 b30:	78 01 00 00 	mvhi r1,0x0
 b34:	38 21 0c 20 	ori r1,r1,0xc20
 b38:	28 21 00 00 	lw r1,(r1+0)
 b3c:	28 21 00 44 	lw r1,(r1+68)
 b40:	c3 a0 00 00 	ret
			
		case 7:
			return pwm0->duty7;
			break;
	}
 b44:	c3 a0 00 00 	ret
