
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a48  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000044  00000a48  00000a48  00000a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000a8c  00000a8c  00000ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000a98  00000a98  00000aec  2**2
                  ALLOC
  4 .debug_frame  00000254  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015b4  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000045c  00000000  00000000  00002987  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000080  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b5b  00000000  00000000  00002ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004a4  00000000  00000000  000039fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00003ea2  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 6f 	calli 288 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a a0 	ori gp,gp,0xaa0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a 98 	ori r1,r1,0xa98
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b 1c 	ori r3,r3,0xb1c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"
#include "servos.h"

int main(){
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 9d 00 04 	sw (sp+4),ra
   volatile uint32_t en7;
   volatile uint32_t period7;
   volatile uint32_t duty7;
} pwm_t;

class  pwm{
 210:	78 04 50 00 	mvhi r4,0x5000

	arm arm1;

	arm1.set_serv(0,2);
 214:	34 03 00 02 	mvi r3,2
 218:	34 02 00 00 	mvi r2,0
 21c:	37 81 00 08 	addi r1,sp,8
 220:	5b 84 00 08 	sw (sp+8),r4
 224:	f8 00 01 e7 	calli 9c0 <_ZN3arm8set_servEii>

	arm1.home();
 228:	37 81 00 08 	addi r1,sp,8
 22c:	f8 00 01 8e 	calli 864 <_ZN3arm4homeEv>

	arm1.derecha();
 230:	37 81 00 08 	addi r1,sp,8
 234:	f8 00 01 a5 	calli 8c8 <_ZN3arm7derechaEv>
	arm1.izquierda();
 238:	37 81 00 08 	addi r1,sp,8
 23c:	f8 00 01 c2 	calli 944 <_ZN3arm9izquierdaEv>
	
}
 240:	34 01 00 00 	mvi r1,0
 244:	2b 9d 00 04 	lw ra,(sp+4)
 248:	37 9c 00 10 	addi sp,sp,16
 24c:	c3 a0 00 00 	ret

00000250 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 250:	78 01 00 00 	mvhi r1,0x0
 254:	38 21 0a 48 	ori r1,r1,0xa48
 258:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 25c:	78 04 00 00 	mvhi r4,0x0
 260:	38 84 0a 4c 	ori r4,r4,0xa4c
 264:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 268:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 26c:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 270:	34 21 00 01 	addi r1,r1,1
 274:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 278:	34 01 00 0e 	mvi r1,14
 27c:	58 61 00 00 	sw (r3+0),r1
}
 280:	c3 a0 00 00 	ret

00000284 <isr_null>:
 284:	c3 a0 00 00 	ret

00000288 <irq_handler>:
{
 288:	37 9c ff f0 	addi sp,sp,-16
 28c:	5b 8b 00 10 	sw (sp+16),r11
 290:	5b 8c 00 0c 	sw (sp+12),r12
 294:	5b 8d 00 08 	sw (sp+8),r13
 298:	5b 9d 00 04 	sw (sp+4),ra
 29c:	78 02 00 00 	mvhi r2,0x0
 2a0:	38 42 0a 50 	ori r2,r2,0xa50
 2a4:	28 4b 00 00 	lw r11,(r2+0)
 2a8:	b8 20 60 00 	mv r12,r1
 2ac:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 2b0:	21 81 00 01 	andi r1,r12,0x1
 2b4:	44 20 00 03 	be r1,r0,2c0 <irq_handler+0x38>
 2b8:	29 61 00 00 	lw r1,(r11+0)
 2bc:	d8 20 00 00 	call r1
 2c0:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 2c4:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 2c8:	5d ab ff fa 	bne r13,r11,2b0 <irq_handler+0x28>
}
 2cc:	2b 9d 00 04 	lw ra,(sp+4)
 2d0:	2b 8b 00 10 	lw r11,(sp+16)
 2d4:	2b 8c 00 0c 	lw r12,(sp+12)
 2d8:	2b 8d 00 08 	lw r13,(sp+8)
 2dc:	37 9c 00 10 	addi sp,sp,16
 2e0:	c3 a0 00 00 	ret

000002e4 <isr_init>:
{
 2e4:	78 02 00 00 	mvhi r2,0x0
 2e8:	38 42 0a 54 	ori r2,r2,0xa54
 2ec:	28 41 00 00 	lw r1,(r2+0)
 2f0:	78 02 00 00 	mvhi r2,0x0
 2f4:	38 42 0a 58 	ori r2,r2,0xa58
 2f8:	28 43 00 00 	lw r3,(r2+0)
 2fc:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 300:	58 23 00 00 	sw (r1+0),r3
 304:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 308:	5c 22 ff fe 	bne r1,r2,300 <isr_init+0x1c>
}
 30c:	c3 a0 00 00 	ret

00000310 <isr_register>:
	isr_table[irq] = isr;
 310:	78 04 00 00 	mvhi r4,0x0
 314:	38 84 0a 5c 	ori r4,r4,0xa5c
 318:	3c 23 00 02 	sli r3,r1,2
 31c:	28 81 00 00 	lw r1,(r4+0)
 320:	b4 23 08 00 	add r1,r1,r3
 324:	58 22 00 00 	sw (r1+0),r2
}
 328:	c3 a0 00 00 	ret

0000032c <isr_unregister>:
	isr_table[irq] = &isr_null;
 32c:	78 03 00 00 	mvhi r3,0x0
 330:	38 63 0a 60 	ori r3,r3,0xa60
 334:	3c 22 00 02 	sli r2,r1,2
 338:	28 61 00 00 	lw r1,(r3+0)
 33c:	78 03 00 00 	mvhi r3,0x0
 340:	38 63 0a 64 	ori r3,r3,0xa64
 344:	b4 22 08 00 	add r1,r1,r2
 348:	28 62 00 00 	lw r2,(r3+0)
 34c:	58 22 00 00 	sw (r1+0),r2
}
 350:	c3 a0 00 00 	ret

00000354 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 354:	78 03 00 00 	mvhi r3,0x0
 358:	38 02 c3 50 	mvu r2,0xc350
 35c:	38 63 0a 68 	ori r3,r3,0xa68
 360:	88 22 08 00 	mul r1,r1,r2
 364:	28 62 00 00 	lw r2,(r3+0)
 368:	28 42 00 00 	lw r2,(r2+0)
 36c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 370:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 374:	34 01 00 08 	mvi r1,8
 378:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 37c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 380:	20 21 00 01 	andi r1,r1,0x1
 384:	44 20 ff fe 	be r1,r0,37c <msleep+0x28>
}
 388:	c3 a0 00 00 	ret

0000038c <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 38c:	78 03 00 00 	mvhi r3,0x0
 390:	38 63 0a 6c 	ori r3,r3,0xa6c
 394:	28 62 00 00 	lw r2,(r3+0)
 398:	08 21 00 32 	muli r1,r1,50
 39c:	28 42 00 00 	lw r2,(r2+0)
 3a0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3a4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3a8:	34 01 00 08 	mvi r1,8
 3ac:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 3b0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3b4:	20 21 00 01 	andi r1,r1,0x1
 3b8:	44 20 ff fe 	be r1,r0,3b0 <nsleep+0x24>
}
 3bc:	c3 a0 00 00 	ret

000003c0 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3c0:	78 02 00 00 	mvhi r2,0x0
 3c4:	38 42 0a 70 	ori r2,r2,0xa70
 3c8:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 3cc:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 3d0:	34 02 13 88 	mvi r2,5000
 3d4:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 3d8:	38 63 0a 74 	ori r3,r3,0xa74
	timer0->compare0 = (FCPU/10000);
 3dc:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 3e0:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 3e4:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 3e8:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 3ec:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3f0:	34 02 00 0e 	mvi r2,14
 3f4:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 3f8:	78 02 00 00 	mvhi r2,0x0
 3fc:	38 42 0a 78 	ori r2,r2,0xa78
 400:	38 63 0a 7c 	ori r3,r3,0xa7c
 404:	28 41 00 00 	lw r1,(r2+0)
 408:	28 62 00 00 	lw r2,(r3+0)
 40c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 410:	c3 a0 00 00 	ret

00000414 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 414:	c3 a0 00 00 	ret

00000418 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 418:	78 02 00 00 	mvhi r2,0x0
 41c:	38 42 0a 80 	ori r2,r2,0xa80
 420:	28 41 00 00 	lw r1,(r2+0)
 424:	28 22 00 00 	lw r2,(r1+0)
 428:	28 41 00 00 	lw r1,(r2+0)
 42c:	20 21 00 01 	andi r1,r1,0x1
 430:	44 20 ff fe 	be r1,r0,428 <uart_getchar+0x10>
	return uart0->rxtx;
 434:	28 41 00 04 	lw r1,(r2+4)
}
 438:	20 21 00 ff 	andi r1,r1,0xff
 43c:	c3 a0 00 00 	ret

00000440 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 440:	78 03 00 00 	mvhi r3,0x0
 444:	38 63 0a 84 	ori r3,r3,0xa84
 448:	28 62 00 00 	lw r2,(r3+0)
{
 44c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 450:	28 43 00 00 	lw r3,(r2+0)
 454:	28 62 00 00 	lw r2,(r3+0)
 458:	20 42 00 10 	andi r2,r2,0x10
 45c:	5c 40 ff fe 	bne r2,r0,454 <uart_putchar+0x14>
	uart0->rxtx = c;
 460:	58 61 00 04 	sw (r3+4),r1
}
 464:	c3 a0 00 00 	ret

00000468 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 468:	40 24 00 00 	lbu r4,(r1+0)
 46c:	44 80 00 0c 	be r4,r0,49c <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 470:	78 03 00 00 	mvhi r3,0x0
 474:	38 63 0a 88 	ori r3,r3,0xa88
 478:	28 62 00 00 	lw r2,(r3+0)
 47c:	28 43 00 00 	lw r3,(r2+0)
 480:	28 62 00 00 	lw r2,(r3+0)
 484:	20 42 00 10 	andi r2,r2,0x10
 488:	5c 40 ff fe 	bne r2,r0,480 <uart_putstr+0x18>
	uart0->rxtx = c;
 48c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 490:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 494:	40 24 00 00 	lbu r4,(r1+0)
 498:	5c 80 ff fa 	bne r4,r0,480 <uart_putstr+0x18>
	}
 49c:	c3 a0 00 00 	ret

000004a0 <_ZN3pwm5pauseEv>:
#include "pwm.h"

void pwm::pause(){
 4a0:	37 9c ff fc 	addi sp,sp,-4
 4a4:	5b 9d 00 04 	sw (sp+4),ra

	msleep(1000);
 4a8:	34 01 03 e8 	mvi r1,1000
 4ac:	fb ff ff aa 	calli 354 <msleep>

};
 4b0:	2b 9d 00 04 	lw ra,(sp+4)
 4b4:	37 9c 00 04 	addi sp,sp,4
 4b8:	c3 a0 00 00 	ret

000004bc <_ZN3pwm6pwm_enEij>:
void pwm::pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
 4bc:	5c 40 00 08 	bne r2,r0,4dc <_ZN3pwm6pwm_enEij+0x20>
 4c0:	28 24 00 00 	lw r4,(r1+0)
 4c4:	58 83 00 00 	sw (r4+0),r3
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
 4c8:	34 04 00 05 	mvi r4,5
 4cc:	5c 44 00 0d 	bne r2,r4,500 <_ZN3pwm6pwm_enEij+0x44>
 4d0:	28 21 00 00 	lw r1,(r1+0)
 4d4:	58 23 00 3c 	sw (r1+60),r3
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

};
 4d8:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
 4dc:	34 04 00 01 	mvi r4,1
 4e0:	5c 44 00 04 	bne r2,r4,4f0 <_ZN3pwm6pwm_enEij+0x34>
 4e4:	28 24 00 00 	lw r4,(r1+0)
 4e8:	58 83 00 0c 	sw (r4+12),r3
 4ec:	e3 ff ff f7 	bi 4c8 <_ZN3pwm6pwm_enEij+0xc>
	if(sel == 2) pwm0->en2 = val;
 4f0:	34 04 00 02 	mvi r4,2
 4f4:	5c 44 00 08 	bne r2,r4,514 <_ZN3pwm6pwm_enEij+0x58>
 4f8:	28 24 00 00 	lw r4,(r1+0)
 4fc:	58 83 00 18 	sw (r4+24),r3
	if(sel == 6) pwm0->en6 = val;
 500:	34 04 00 06 	mvi r4,6
 504:	5c 44 00 08 	bne r2,r4,524 <_ZN3pwm6pwm_enEij+0x68>
 508:	28 21 00 00 	lw r1,(r1+0)
 50c:	58 23 00 48 	sw (r1+72),r3
};
 510:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
 514:	34 04 00 03 	mvi r4,3
 518:	5c 44 00 08 	bne r2,r4,538 <_ZN3pwm6pwm_enEij+0x7c>
 51c:	28 24 00 00 	lw r4,(r1+0)
 520:	58 83 00 24 	sw (r4+36),r3
	if(sel == 7) pwm0->en7 = val;
 524:	34 04 00 07 	mvi r4,7
 528:	5c 44 ff ec 	bne r2,r4,4d8 <_ZN3pwm6pwm_enEij+0x1c>
 52c:	28 21 00 00 	lw r1,(r1+0)
 530:	58 23 00 54 	sw (r1+84),r3
};
 534:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
 538:	34 04 00 04 	mvi r4,4
 53c:	5c 44 ff e3 	bne r2,r4,4c8 <_ZN3pwm6pwm_enEij+0xc>
 540:	28 21 00 00 	lw r1,(r1+0)
 544:	58 23 00 30 	sw (r1+48),r3
};
 548:	c3 a0 00 00 	ret

0000054c <_ZN3pwm8pwm_dutyEij>:

void pwm::pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
 54c:	5c 40 00 08 	bne r2,r0,56c <_ZN3pwm8pwm_dutyEij+0x20>
 550:	28 24 00 00 	lw r4,(r1+0)
 554:	58 83 00 08 	sw (r4+8),r3
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
 558:	34 04 00 05 	mvi r4,5
 55c:	5c 44 00 0d 	bne r2,r4,590 <_ZN3pwm8pwm_dutyEij+0x44>
 560:	28 21 00 00 	lw r1,(r1+0)
 564:	58 23 00 44 	sw (r1+68),r3
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

};
 568:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
 56c:	34 04 00 01 	mvi r4,1
 570:	5c 44 00 04 	bne r2,r4,580 <_ZN3pwm8pwm_dutyEij+0x34>
 574:	28 24 00 00 	lw r4,(r1+0)
 578:	58 83 00 14 	sw (r4+20),r3
 57c:	e3 ff ff f7 	bi 558 <_ZN3pwm8pwm_dutyEij+0xc>
	if(sel == 2) pwm0->duty2 = val;
 580:	34 04 00 02 	mvi r4,2
 584:	5c 44 00 08 	bne r2,r4,5a4 <_ZN3pwm8pwm_dutyEij+0x58>
 588:	28 24 00 00 	lw r4,(r1+0)
 58c:	58 83 00 20 	sw (r4+32),r3
	if(sel == 6) pwm0->duty6 = val;
 590:	34 04 00 06 	mvi r4,6
 594:	5c 44 00 08 	bne r2,r4,5b4 <_ZN3pwm8pwm_dutyEij+0x68>
 598:	28 21 00 00 	lw r1,(r1+0)
 59c:	58 23 00 50 	sw (r1+80),r3
};
 5a0:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
 5a4:	34 04 00 03 	mvi r4,3
 5a8:	5c 44 00 08 	bne r2,r4,5c8 <_ZN3pwm8pwm_dutyEij+0x7c>
 5ac:	28 24 00 00 	lw r4,(r1+0)
 5b0:	58 83 00 2c 	sw (r4+44),r3
	if(sel == 7) pwm0->duty7 = val;
 5b4:	34 04 00 07 	mvi r4,7
 5b8:	5c 44 ff ec 	bne r2,r4,568 <_ZN3pwm8pwm_dutyEij+0x1c>
 5bc:	28 21 00 00 	lw r1,(r1+0)
 5c0:	58 23 00 5c 	sw (r1+92),r3
};
 5c4:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
 5c8:	34 04 00 04 	mvi r4,4
 5cc:	5c 44 ff e3 	bne r2,r4,558 <_ZN3pwm8pwm_dutyEij+0xc>
 5d0:	28 21 00 00 	lw r1,(r1+0)
 5d4:	58 23 00 38 	sw (r1+56),r3
};
 5d8:	c3 a0 00 00 	ret

000005dc <_ZN3pwm10pwm_periodEij>:

void pwm::pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
 5dc:	5c 40 00 08 	bne r2,r0,5fc <_ZN3pwm10pwm_periodEij+0x20>
 5e0:	28 24 00 00 	lw r4,(r1+0)
 5e4:	58 83 00 04 	sw (r4+4),r3
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
 5e8:	34 04 00 05 	mvi r4,5
 5ec:	5c 44 00 0d 	bne r2,r4,620 <_ZN3pwm10pwm_periodEij+0x44>
 5f0:	28 21 00 00 	lw r1,(r1+0)
 5f4:	58 23 00 40 	sw (r1+64),r3
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

};
 5f8:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
 5fc:	34 04 00 01 	mvi r4,1
 600:	5c 44 00 04 	bne r2,r4,610 <_ZN3pwm10pwm_periodEij+0x34>
 604:	28 24 00 00 	lw r4,(r1+0)
 608:	58 83 00 10 	sw (r4+16),r3
 60c:	e3 ff ff f7 	bi 5e8 <_ZN3pwm10pwm_periodEij+0xc>
	if(sel == 2) pwm0->period2 = val;
 610:	34 04 00 02 	mvi r4,2
 614:	5c 44 00 08 	bne r2,r4,634 <_ZN3pwm10pwm_periodEij+0x58>
 618:	28 24 00 00 	lw r4,(r1+0)
 61c:	58 83 00 1c 	sw (r4+28),r3
	if(sel == 6) pwm0->period6 = val;
 620:	34 04 00 06 	mvi r4,6
 624:	5c 44 00 08 	bne r2,r4,644 <_ZN3pwm10pwm_periodEij+0x68>
 628:	28 21 00 00 	lw r1,(r1+0)
 62c:	58 23 00 4c 	sw (r1+76),r3
};
 630:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
 634:	34 04 00 03 	mvi r4,3
 638:	5c 44 00 08 	bne r2,r4,658 <_ZN3pwm10pwm_periodEij+0x7c>
 63c:	28 24 00 00 	lw r4,(r1+0)
 640:	58 83 00 28 	sw (r4+40),r3
	if(sel == 7) pwm0->period7 = val;
 644:	34 04 00 07 	mvi r4,7
 648:	5c 44 ff ec 	bne r2,r4,5f8 <_ZN3pwm10pwm_periodEij+0x1c>
 64c:	28 21 00 00 	lw r1,(r1+0)
 650:	58 23 00 58 	sw (r1+88),r3
};
 654:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
 658:	34 04 00 04 	mvi r4,4
 65c:	5c 44 ff e3 	bne r2,r4,5e8 <_ZN3pwm10pwm_periodEij+0xc>
 660:	28 21 00 00 	lw r1,(r1+0)
 664:	58 23 00 34 	sw (r1+52),r3
};
 668:	c3 a0 00 00 	ret

0000066c <_ZN3pwm9pwm_getenEj>:

uint32_t pwm::pwm_geten(uint32_t sel){
 66c:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->en0;
 670:	44 40 00 11 	be r2,r0,6b4 <_ZN3pwm9pwm_getenEj+0x48>
	if(sel == 1) return pwm0->en1;
 674:	34 01 00 01 	mvi r1,1
 678:	44 41 00 12 	be r2,r1,6c0 <_ZN3pwm9pwm_getenEj+0x54>
	if(sel == 2) return pwm0->en2;
 67c:	34 01 00 02 	mvi r1,2
 680:	44 41 00 16 	be r2,r1,6d8 <_ZN3pwm9pwm_getenEj+0x6c>
	if(sel == 3) return pwm0->en3;
 684:	34 01 00 03 	mvi r1,3
 688:	44 41 00 11 	be r2,r1,6cc <_ZN3pwm9pwm_getenEj+0x60>
	if(sel == 4) return pwm0->en4;
 68c:	34 01 00 04 	mvi r1,4
 690:	44 41 00 15 	be r2,r1,6e4 <_ZN3pwm9pwm_getenEj+0x78>
	if(sel == 5) return pwm0->en5;
 694:	34 01 00 05 	mvi r1,5
 698:	44 41 00 19 	be r2,r1,6fc <_ZN3pwm9pwm_getenEj+0x90>
	if(sel == 6) return pwm0->en6;
 69c:	34 01 00 06 	mvi r1,6
 6a0:	44 41 00 1a 	be r2,r1,708 <_ZN3pwm9pwm_getenEj+0x9c>
	if(sel == 7) return pwm0->en7;
 6a4:	34 04 00 07 	mvi r4,7
	return 0;
 6a8:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->en7;
 6ac:	44 44 00 11 	be r2,r4,6f0 <_ZN3pwm9pwm_getenEj+0x84>

};
 6b0:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->en0;
 6b4:	28 21 00 00 	lw r1,(r1+0)
 6b8:	28 21 00 00 	lw r1,(r1+0)
};
 6bc:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
 6c0:	28 61 00 00 	lw r1,(r3+0)
 6c4:	28 21 00 0c 	lw r1,(r1+12)
};
 6c8:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
 6cc:	28 61 00 00 	lw r1,(r3+0)
 6d0:	28 21 00 24 	lw r1,(r1+36)
};
 6d4:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
 6d8:	28 61 00 00 	lw r1,(r3+0)
 6dc:	28 21 00 18 	lw r1,(r1+24)
};
 6e0:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
 6e4:	28 61 00 00 	lw r1,(r3+0)
 6e8:	28 21 00 30 	lw r1,(r1+48)
};
 6ec:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->en7;
 6f0:	28 61 00 00 	lw r1,(r3+0)
 6f4:	28 21 00 54 	lw r1,(r1+84)
};
 6f8:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
 6fc:	28 61 00 00 	lw r1,(r3+0)
 700:	28 21 00 3c 	lw r1,(r1+60)
};
 704:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
 708:	28 61 00 00 	lw r1,(r3+0)
 70c:	28 21 00 48 	lw r1,(r1+72)
};
 710:	c3 a0 00 00 	ret

00000714 <_ZN3pwm11pwm_getdutyEj>:

uint32_t pwm::pwm_getduty(uint32_t sel){
 714:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->duty0;
 718:	44 40 00 11 	be r2,r0,75c <_ZN3pwm11pwm_getdutyEj+0x48>
	if(sel == 1) return pwm0->duty1;
 71c:	34 01 00 01 	mvi r1,1
 720:	44 41 00 12 	be r2,r1,768 <_ZN3pwm11pwm_getdutyEj+0x54>
	if(sel == 2) return pwm0->duty2;
 724:	34 01 00 02 	mvi r1,2
 728:	44 41 00 16 	be r2,r1,780 <_ZN3pwm11pwm_getdutyEj+0x6c>
	if(sel == 3) return pwm0->duty3;
 72c:	34 01 00 03 	mvi r1,3
 730:	44 41 00 11 	be r2,r1,774 <_ZN3pwm11pwm_getdutyEj+0x60>
	if(sel == 4) return pwm0->duty4;
 734:	34 01 00 04 	mvi r1,4
 738:	44 41 00 15 	be r2,r1,78c <_ZN3pwm11pwm_getdutyEj+0x78>
	if(sel == 5) return pwm0->duty5;
 73c:	34 01 00 05 	mvi r1,5
 740:	44 41 00 19 	be r2,r1,7a4 <_ZN3pwm11pwm_getdutyEj+0x90>
	if(sel == 6) return pwm0->duty6;
 744:	34 01 00 06 	mvi r1,6
 748:	44 41 00 1a 	be r2,r1,7b0 <_ZN3pwm11pwm_getdutyEj+0x9c>
	if(sel == 7) return pwm0->duty7;
 74c:	34 04 00 07 	mvi r4,7
	return 0;
 750:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->duty7;
 754:	44 44 00 11 	be r2,r4,798 <_ZN3pwm11pwm_getdutyEj+0x84>
	
};
 758:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->duty0;
 75c:	28 21 00 00 	lw r1,(r1+0)
 760:	28 21 00 08 	lw r1,(r1+8)
};
 764:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
 768:	28 61 00 00 	lw r1,(r3+0)
 76c:	28 21 00 14 	lw r1,(r1+20)
};
 770:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
 774:	28 61 00 00 	lw r1,(r3+0)
 778:	28 21 00 2c 	lw r1,(r1+44)
};
 77c:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
 780:	28 61 00 00 	lw r1,(r3+0)
 784:	28 21 00 20 	lw r1,(r1+32)
};
 788:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
 78c:	28 61 00 00 	lw r1,(r3+0)
 790:	28 21 00 38 	lw r1,(r1+56)
};
 794:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->duty7;
 798:	28 61 00 00 	lw r1,(r3+0)
 79c:	28 21 00 5c 	lw r1,(r1+92)
};
 7a0:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
 7a4:	28 61 00 00 	lw r1,(r3+0)
 7a8:	28 21 00 44 	lw r1,(r1+68)
};
 7ac:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
 7b0:	28 61 00 00 	lw r1,(r3+0)
 7b4:	28 21 00 50 	lw r1,(r1+80)
};
 7b8:	c3 a0 00 00 	ret

000007bc <_ZN3pwm13pwm_getperiodEj>:

uint32_t pwm::pwm_getperiod(uint32_t sel){
 7bc:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->period0;
 7c0:	44 40 00 11 	be r2,r0,804 <_ZN3pwm13pwm_getperiodEj+0x48>
	if(sel == 1) return pwm0->period1;
 7c4:	34 01 00 01 	mvi r1,1
 7c8:	44 41 00 12 	be r2,r1,810 <_ZN3pwm13pwm_getperiodEj+0x54>
	if(sel == 2) return pwm0->period2;
 7cc:	34 01 00 02 	mvi r1,2
 7d0:	44 41 00 16 	be r2,r1,828 <_ZN3pwm13pwm_getperiodEj+0x6c>
	if(sel == 3) return pwm0->period3;
 7d4:	34 01 00 03 	mvi r1,3
 7d8:	44 41 00 11 	be r2,r1,81c <_ZN3pwm13pwm_getperiodEj+0x60>
	if(sel == 4) return pwm0->period4;
 7dc:	34 01 00 04 	mvi r1,4
 7e0:	44 41 00 15 	be r2,r1,834 <_ZN3pwm13pwm_getperiodEj+0x78>
	if(sel == 5) return pwm0->period5;
 7e4:	34 01 00 05 	mvi r1,5
 7e8:	44 41 00 19 	be r2,r1,84c <_ZN3pwm13pwm_getperiodEj+0x90>
	if(sel == 6) return pwm0->period6;
 7ec:	34 01 00 06 	mvi r1,6
 7f0:	44 41 00 1a 	be r2,r1,858 <_ZN3pwm13pwm_getperiodEj+0x9c>
	if(sel == 7) return pwm0->period7;
 7f4:	34 04 00 07 	mvi r4,7
	return 0;
 7f8:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->period7;
 7fc:	44 44 00 11 	be r2,r4,840 <_ZN3pwm13pwm_getperiodEj+0x84>
	
 800:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->period0;
 804:	28 21 00 00 	lw r1,(r1+0)
 808:	28 21 00 04 	lw r1,(r1+4)
 80c:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
 810:	28 61 00 00 	lw r1,(r3+0)
 814:	28 21 00 10 	lw r1,(r1+16)
 818:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
 81c:	28 61 00 00 	lw r1,(r3+0)
 820:	28 21 00 28 	lw r1,(r1+40)
 824:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
 828:	28 61 00 00 	lw r1,(r3+0)
 82c:	28 21 00 1c 	lw r1,(r1+28)
 830:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
 834:	28 61 00 00 	lw r1,(r3+0)
 838:	28 21 00 34 	lw r1,(r1+52)
 83c:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->period7;
 840:	28 61 00 00 	lw r1,(r3+0)
 844:	28 21 00 58 	lw r1,(r1+88)
 848:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
 84c:	28 61 00 00 	lw r1,(r3+0)
 850:	28 21 00 40 	lw r1,(r1+64)
 854:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
 858:	28 61 00 00 	lw r1,(r3+0)
 85c:	28 21 00 4c 	lw r1,(r1+76)
 860:	c3 a0 00 00 	ret

00000864 <_ZN3arm4homeEv>:
#include "servos.h"

void arm::home(){
 864:	37 9c ff f8 	addi sp,sp,-8
 868:	5b 8b 00 08 	sw (sp+8),r11
 86c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,IZ);
 870:	28 22 00 08 	lw r2,(r1+8)
 874:	34 03 00 05 	mvi r3,5
void arm::home(){
 878:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,IZ);
 87c:	fb ff ff 34 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 880:	b9 60 08 00 	mv r1,r11
 884:	fb ff ff 07 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,MID);
 888:	29 62 00 04 	lw r2,(r11+4)
 88c:	34 03 00 0f 	mvi r3,15
 890:	b9 60 08 00 	mv r1,r11
 894:	fb ff ff 2e 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 898:	b9 60 08 00 	mv r1,r11
 89c:	fb ff ff 01 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,DER);
 8a0:	29 62 00 08 	lw r2,(r11+8)
 8a4:	34 03 00 19 	mvi r3,25
 8a8:	b9 60 08 00 	mv r1,r11
 8ac:	fb ff ff 28 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 8b0:	b9 60 08 00 	mv r1,r11
 8b4:	fb ff fe fb 	calli 4a0 <_ZN3pwm5pauseEv>
};
 8b8:	2b 9d 00 04 	lw ra,(sp+4)
 8bc:	2b 8b 00 08 	lw r11,(sp+8)
 8c0:	37 9c 00 08 	addi sp,sp,8
 8c4:	c3 a0 00 00 	ret

000008c8 <_ZN3arm7derechaEv>:

void arm::derecha(){
 8c8:	37 9c ff f8 	addi sp,sp,-8
 8cc:	5b 8b 00 08 	sw (sp+8),r11
 8d0:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,DER);
 8d4:	28 22 00 04 	lw r2,(r1+4)
 8d8:	34 03 00 19 	mvi r3,25
void arm::derecha(){
 8dc:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,DER);
 8e0:	fb ff ff 1b 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 8e4:	b9 60 08 00 	mv r1,r11
 8e8:	fb ff fe ee 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,IZ);
 8ec:	29 62 00 08 	lw r2,(r11+8)
 8f0:	34 03 00 05 	mvi r3,5
 8f4:	b9 60 08 00 	mv r1,r11
 8f8:	fb ff ff 15 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 8fc:	b9 60 08 00 	mv r1,r11
 900:	fb ff fe e8 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,MID);
 904:	29 62 00 04 	lw r2,(r11+4)
 908:	34 03 00 0f 	mvi r3,15
 90c:	b9 60 08 00 	mv r1,r11
 910:	fb ff ff 0f 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 914:	b9 60 08 00 	mv r1,r11
 918:	fb ff fe e2 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,DER);
 91c:	29 62 00 08 	lw r2,(r11+8)
 920:	34 03 00 19 	mvi r3,25
 924:	b9 60 08 00 	mv r1,r11
 928:	fb ff ff 09 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 92c:	b9 60 08 00 	mv r1,r11
 930:	fb ff fe dc 	calli 4a0 <_ZN3pwm5pauseEv>
};
 934:	2b 9d 00 04 	lw ra,(sp+4)
 938:	2b 8b 00 08 	lw r11,(sp+8)
 93c:	37 9c 00 08 	addi sp,sp,8
 940:	c3 a0 00 00 	ret

00000944 <_ZN3arm9izquierdaEv>:

void arm::izquierda(){
 944:	37 9c ff f8 	addi sp,sp,-8
 948:	5b 8b 00 08 	sw (sp+8),r11
 94c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,IZ);
 950:	28 22 00 04 	lw r2,(r1+4)
 954:	34 03 00 05 	mvi r3,5
void arm::izquierda(){
 958:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,IZ);
 95c:	fb ff fe fc 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 960:	b9 60 08 00 	mv r1,r11
 964:	fb ff fe cf 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,IZ);
 968:	29 62 00 08 	lw r2,(r11+8)
 96c:	34 03 00 05 	mvi r3,5
 970:	b9 60 08 00 	mv r1,r11
 974:	fb ff fe f6 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 978:	b9 60 08 00 	mv r1,r11
 97c:	fb ff fe c9 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,MID);
 980:	29 62 00 04 	lw r2,(r11+4)
 984:	34 03 00 0f 	mvi r3,15
 988:	b9 60 08 00 	mv r1,r11
 98c:	fb ff fe f0 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 990:	b9 60 08 00 	mv r1,r11
 994:	fb ff fe c3 	calli 4a0 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,DER);
 998:	29 62 00 08 	lw r2,(r11+8)
 99c:	34 03 00 19 	mvi r3,25
 9a0:	b9 60 08 00 	mv r1,r11
 9a4:	fb ff fe ea 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pause();
 9a8:	b9 60 08 00 	mv r1,r11
 9ac:	fb ff fe bd 	calli 4a0 <_ZN3pwm5pauseEv>
};
 9b0:	2b 9d 00 04 	lw ra,(sp+4)
 9b4:	2b 8b 00 08 	lw r11,(sp+8)
 9b8:	37 9c 00 08 	addi sp,sp,8
 9bc:	c3 a0 00 00 	ret

000009c0 <_ZN3arm8set_servEii>:

void arm::set_serv(int x,int y){
 9c0:	37 9c ff f8 	addi sp,sp,-8
 9c4:	5b 8b 00 08 	sw (sp+8),r11
 9c8:	5b 9d 00 04 	sw (sp+4),ra
	serv1 = x;
 9cc:	58 22 00 04 	sw (r1+4),r2
	serv2 = y;
 9d0:	58 23 00 08 	sw (r1+8),r3
	pwm_period(serv1,200);
 9d4:	34 03 00 c8 	mvi r3,200
void arm::set_serv(int x,int y){
 9d8:	b8 20 58 00 	mv r11,r1
	pwm_period(serv1,200);
 9dc:	fb ff ff 00 	calli 5dc <_ZN3pwm10pwm_periodEij>
	pwm_period(serv2,200);
 9e0:	29 62 00 08 	lw r2,(r11+8)
 9e4:	b9 60 08 00 	mv r1,r11
 9e8:	34 03 00 c8 	mvi r3,200
 9ec:	fb ff fe fc 	calli 5dc <_ZN3pwm10pwm_periodEij>
	pwm_duty(serv1,MID);
 9f0:	29 62 00 04 	lw r2,(r11+4)
 9f4:	b9 60 08 00 	mv r1,r11
 9f8:	34 03 00 0f 	mvi r3,15
 9fc:	fb ff fe d4 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pwm_duty(serv2,IZ);
 a00:	29 62 00 08 	lw r2,(r11+8)
 a04:	b9 60 08 00 	mv r1,r11
 a08:	34 03 00 05 	mvi r3,5
 a0c:	fb ff fe d0 	calli 54c <_ZN3pwm8pwm_dutyEij>
	pwm_en(serv1,1);
 a10:	29 62 00 04 	lw r2,(r11+4)
 a14:	b9 60 08 00 	mv r1,r11
 a18:	34 03 00 01 	mvi r3,1
 a1c:	fb ff fe a8 	calli 4bc <_ZN3pwm6pwm_enEij>
	pwm_en(serv2,1);
 a20:	29 62 00 08 	lw r2,(r11+8)
 a24:	34 03 00 01 	mvi r3,1
 a28:	b9 60 08 00 	mv r1,r11
 a2c:	fb ff fe a4 	calli 4bc <_ZN3pwm6pwm_enEij>
	pause();
 a30:	b9 60 08 00 	mv r1,r11
 a34:	fb ff fe 9b 	calli 4a0 <_ZN3pwm5pauseEv>
 a38:	2b 9d 00 04 	lw ra,(sp+4)
 a3c:	2b 8b 00 08 	lw r11,(sp+8)
 a40:	37 9c 00 08 	addi sp,sp,8
 a44:	c3 a0 00 00 	ret
