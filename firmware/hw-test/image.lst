
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000005c  00000b1c  00000b1c  00000b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000b78  00000b78  00000bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000b88  00000b88  00000bdc  2**2
                  ALLOC
  4 .debug_frame  0000018c  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098b  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000312  00000000  00000000  000016f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000092f  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cb  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00002667  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000053c  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 9a 	calli 334 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b 90 	ori gp,gp,0xb90
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0b 88 	ori r1,r1,0xb88
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0c 0c 	ori r3,r3,0xc0c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"

int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra

	pwm_period(2,200);
 210:	34 02 00 c8 	mvi r2,200
 214:	34 01 00 02 	mvi r1,2
 218:	f8 00 01 45 	calli 72c <pwm_period>
	pwm_duty(2,5);
 21c:	34 02 00 05 	mvi r2,5
 220:	34 01 00 02 	mvi r1,2
 224:	f8 00 01 06 	calli 63c <pwm_duty>
	pwm_en(2,1);
 228:	34 02 00 01 	mvi r2,1
 22c:	34 01 00 02 	mvi r1,2
 230:	f8 00 00 c7 	calli 54c <pwm_en>

	pwm_period(0,200);
 234:	34 02 00 c8 	mvi r2,200
 238:	34 01 00 00 	mvi r1,0
 23c:	f8 00 01 3c 	calli 72c <pwm_period>
	pwm_duty(0,5);
 240:	34 02 00 05 	mvi r2,5
 244:	34 01 00 00 	mvi r1,0
 248:	f8 00 00 fd 	calli 63c <pwm_duty>
	pwm_en(0,1);
 24c:	34 02 00 01 	mvi r2,1
 250:	34 01 00 00 	mvi r1,0
 254:	f8 00 00 be 	calli 54c <pwm_en>

	while(1){
		pwm_duty(0,5);
 258:	34 02 00 05 	mvi r2,5
 25c:	34 01 00 00 	mvi r1,0
 260:	f8 00 00 f7 	calli 63c <pwm_duty>
		pwm_duty(2,10);
 264:	34 02 00 0a 	mvi r2,10
 268:	34 01 00 02 	mvi r1,2
 26c:	f8 00 00 f4 	calli 63c <pwm_duty>
		msleep(1000);
 270:	34 01 03 e8 	mvi r1,1000
 274:	f8 00 00 63 	calli 400 <msleep>
		pwm_duty(0,9);
 278:	34 02 00 09 	mvi r2,9
 27c:	34 01 00 00 	mvi r1,0
 280:	f8 00 00 ef 	calli 63c <pwm_duty>
		pwm_duty(2,15);
 284:	34 02 00 0f 	mvi r2,15
 288:	34 01 00 02 	mvi r1,2
 28c:	f8 00 00 ec 	calli 63c <pwm_duty>
		msleep(1000);
 290:	34 01 03 e8 	mvi r1,1000
 294:	f8 00 00 5b 	calli 400 <msleep>
		pwm_duty(0,13);
 298:	34 02 00 0d 	mvi r2,13
 29c:	34 01 00 00 	mvi r1,0
 2a0:	f8 00 00 e7 	calli 63c <pwm_duty>
		pwm_duty(2,13);
 2a4:	34 02 00 0d 	mvi r2,13
 2a8:	34 01 00 02 	mvi r1,2
 2ac:	f8 00 00 e4 	calli 63c <pwm_duty>
		msleep(1000);
 2b0:	34 01 03 e8 	mvi r1,1000
 2b4:	f8 00 00 53 	calli 400 <msleep>
		pwm_duty(0,18);
 2b8:	34 02 00 12 	mvi r2,18
 2bc:	34 01 00 00 	mvi r1,0
 2c0:	f8 00 00 df 	calli 63c <pwm_duty>
		pwm_duty(2,20);
 2c4:	34 02 00 14 	mvi r2,20
 2c8:	34 01 00 02 	mvi r1,2
 2cc:	f8 00 00 dc 	calli 63c <pwm_duty>
		msleep(1000);
 2d0:	34 01 03 e8 	mvi r1,1000
 2d4:	f8 00 00 4b 	calli 400 <msleep>
		pwm_duty(0,23);
 2d8:	34 02 00 17 	mvi r2,23
 2dc:	34 01 00 00 	mvi r1,0
 2e0:	f8 00 00 d7 	calli 63c <pwm_duty>
		pwm_duty(2,10);
 2e4:	34 02 00 0a 	mvi r2,10
 2e8:	34 01 00 02 	mvi r1,2
 2ec:	f8 00 00 d4 	calli 63c <pwm_duty>
		msleep(1000);
 2f0:	34 01 03 e8 	mvi r1,1000
 2f4:	f8 00 00 43 	calli 400 <msleep>
 2f8:	e3 ff ff d8 	bi 258 <main+0x50>

000002fc <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2fc:	78 01 00 00 	mvhi r1,0x0
 300:	38 21 0b 1c 	ori r1,r1,0xb1c
 304:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 308:	78 04 00 00 	mvhi r4,0x0
 30c:	38 84 0b 20 	ori r4,r4,0xb20
 310:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 314:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 318:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 31c:	34 21 00 01 	addi r1,r1,1
 320:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 324:	34 01 00 0e 	mvi r1,14
 328:	58 61 00 00 	sw (r3+0),r1
}
 32c:	c3 a0 00 00 	ret

00000330 <isr_null>:
 330:	c3 a0 00 00 	ret

00000334 <irq_handler>:
{
 334:	37 9c ff f0 	addi sp,sp,-16
 338:	5b 8b 00 10 	sw (sp+16),r11
 33c:	5b 8c 00 0c 	sw (sp+12),r12
 340:	5b 8d 00 08 	sw (sp+8),r13
 344:	5b 9d 00 04 	sw (sp+4),ra
 348:	78 02 00 00 	mvhi r2,0x0
 34c:	38 42 0b 24 	ori r2,r2,0xb24
 350:	28 4b 00 00 	lw r11,(r2+0)
 354:	b8 20 60 00 	mv r12,r1
 358:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 35c:	21 81 00 01 	andi r1,r12,0x1
 360:	44 20 00 03 	be r1,r0,36c <irq_handler+0x38>
 364:	29 61 00 00 	lw r1,(r11+0)
 368:	d8 20 00 00 	call r1
 36c:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 370:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 374:	5d ab ff fa 	bne r13,r11,35c <irq_handler+0x28>
}
 378:	2b 9d 00 04 	lw ra,(sp+4)
 37c:	2b 8b 00 10 	lw r11,(sp+16)
 380:	2b 8c 00 0c 	lw r12,(sp+12)
 384:	2b 8d 00 08 	lw r13,(sp+8)
 388:	37 9c 00 10 	addi sp,sp,16
 38c:	c3 a0 00 00 	ret

00000390 <isr_init>:
{
 390:	78 02 00 00 	mvhi r2,0x0
 394:	38 42 0b 28 	ori r2,r2,0xb28
 398:	28 41 00 00 	lw r1,(r2+0)
 39c:	78 02 00 00 	mvhi r2,0x0
 3a0:	38 42 0b 2c 	ori r2,r2,0xb2c
 3a4:	28 43 00 00 	lw r3,(r2+0)
 3a8:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 3ac:	58 23 00 00 	sw (r1+0),r3
 3b0:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 3b4:	5c 22 ff fe 	bne r1,r2,3ac <isr_init+0x1c>
}
 3b8:	c3 a0 00 00 	ret

000003bc <isr_register>:
	isr_table[irq] = isr;
 3bc:	78 04 00 00 	mvhi r4,0x0
 3c0:	38 84 0b 30 	ori r4,r4,0xb30
 3c4:	3c 23 00 02 	sli r3,r1,2
 3c8:	28 81 00 00 	lw r1,(r4+0)
 3cc:	b4 23 08 00 	add r1,r1,r3
 3d0:	58 22 00 00 	sw (r1+0),r2
}
 3d4:	c3 a0 00 00 	ret

000003d8 <isr_unregister>:
	isr_table[irq] = &isr_null;
 3d8:	78 03 00 00 	mvhi r3,0x0
 3dc:	38 63 0b 34 	ori r3,r3,0xb34
 3e0:	3c 22 00 02 	sli r2,r1,2
 3e4:	28 61 00 00 	lw r1,(r3+0)
 3e8:	78 03 00 00 	mvhi r3,0x0
 3ec:	38 63 0b 38 	ori r3,r3,0xb38
 3f0:	b4 22 08 00 	add r1,r1,r2
 3f4:	28 62 00 00 	lw r2,(r3+0)
 3f8:	58 22 00 00 	sw (r1+0),r2
}
 3fc:	c3 a0 00 00 	ret

00000400 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 400:	78 03 00 00 	mvhi r3,0x0
 404:	38 02 c3 50 	mvu r2,0xc350
 408:	38 63 0b 3c 	ori r3,r3,0xb3c
 40c:	88 22 08 00 	mul r1,r1,r2
 410:	28 62 00 00 	lw r2,(r3+0)
 414:	28 42 00 00 	lw r2,(r2+0)
 418:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 41c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 420:	34 01 00 08 	mvi r1,8
 424:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 428:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 42c:	20 21 00 01 	andi r1,r1,0x1
 430:	44 20 ff fe 	be r1,r0,428 <msleep+0x28>
}
 434:	c3 a0 00 00 	ret

00000438 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 438:	78 03 00 00 	mvhi r3,0x0
 43c:	38 63 0b 40 	ori r3,r3,0xb40
 440:	28 62 00 00 	lw r2,(r3+0)
 444:	08 21 00 32 	muli r1,r1,50
 448:	28 42 00 00 	lw r2,(r2+0)
 44c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 450:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 454:	34 01 00 08 	mvi r1,8
 458:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 45c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 460:	20 21 00 01 	andi r1,r1,0x1
 464:	44 20 ff fe 	be r1,r0,45c <nsleep+0x24>
}
 468:	c3 a0 00 00 	ret

0000046c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 46c:	78 02 00 00 	mvhi r2,0x0
 470:	38 42 0b 44 	ori r2,r2,0xb44
 474:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 478:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 47c:	34 02 13 88 	mvi r2,5000
 480:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 484:	38 63 0b 48 	ori r3,r3,0xb48
	timer0->compare0 = (FCPU/10000);
 488:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 48c:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 490:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 494:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 498:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 49c:	34 02 00 0e 	mvi r2,14
 4a0:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 0b 4c 	ori r2,r2,0xb4c
 4ac:	38 63 0b 50 	ori r3,r3,0xb50
 4b0:	28 41 00 00 	lw r1,(r2+0)
 4b4:	28 62 00 00 	lw r2,(r3+0)
 4b8:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 4bc:	c3 a0 00 00 	ret

000004c0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4c0:	c3 a0 00 00 	ret

000004c4 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 4c4:	78 02 00 00 	mvhi r2,0x0
 4c8:	38 42 0b 54 	ori r2,r2,0xb54
 4cc:	28 41 00 00 	lw r1,(r2+0)
 4d0:	28 22 00 00 	lw r2,(r1+0)
 4d4:	28 41 00 00 	lw r1,(r2+0)
 4d8:	20 21 00 01 	andi r1,r1,0x1
 4dc:	44 20 ff fe 	be r1,r0,4d4 <uart_getchar+0x10>
	return uart0->rxtx;
 4e0:	28 41 00 04 	lw r1,(r2+4)
}
 4e4:	20 21 00 ff 	andi r1,r1,0xff
 4e8:	c3 a0 00 00 	ret

000004ec <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4ec:	78 03 00 00 	mvhi r3,0x0
 4f0:	38 63 0b 58 	ori r3,r3,0xb58
 4f4:	28 62 00 00 	lw r2,(r3+0)
{
 4f8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4fc:	28 43 00 00 	lw r3,(r2+0)
 500:	28 62 00 00 	lw r2,(r3+0)
 504:	20 42 00 10 	andi r2,r2,0x10
 508:	5c 40 ff fe 	bne r2,r0,500 <uart_putchar+0x14>
	uart0->rxtx = c;
 50c:	58 61 00 04 	sw (r3+4),r1
}
 510:	c3 a0 00 00 	ret

00000514 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 514:	40 24 00 00 	lbu r4,(r1+0)
 518:	44 80 00 0c 	be r4,r0,548 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 51c:	78 03 00 00 	mvhi r3,0x0
 520:	38 63 0b 5c 	ori r3,r3,0xb5c
 524:	28 62 00 00 	lw r2,(r3+0)
 528:	28 43 00 00 	lw r3,(r2+0)
 52c:	28 62 00 00 	lw r2,(r3+0)
 530:	20 42 00 10 	andi r2,r2,0x10
 534:	5c 40 ff fe 	bne r2,r0,52c <uart_putstr+0x18>
	uart0->rxtx = c;
 538:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 53c:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 540:	40 24 00 00 	lbu r4,(r1+0)
 544:	5c 80 ff fa 	bne r4,r0,52c <uart_putstr+0x18>
	}
}
 548:	c3 a0 00 00 	ret

0000054c <pwm_en>:
 * PWM Functions
 */

void pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
 54c:	5c 20 00 0e 	bne r1,r0,584 <pwm_en+0x38>
 550:	78 04 00 00 	mvhi r4,0x0
 554:	38 84 0b 60 	ori r4,r4,0xb60
 558:	28 83 00 00 	lw r3,(r4+0)
 55c:	28 63 00 00 	lw r3,(r3+0)
 560:	58 62 00 00 	sw (r3+0),r2
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
 564:	34 03 00 05 	mvi r3,5
 568:	5c 23 00 16 	bne r1,r3,5c0 <pwm_en+0x74>
 56c:	78 04 00 00 	mvhi r4,0x0
 570:	38 84 0b 60 	ori r4,r4,0xb60
 574:	28 81 00 00 	lw r1,(r4+0)
 578:	28 21 00 00 	lw r1,(r1+0)
 57c:	58 22 00 3c 	sw (r1+60),r2
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

}
 580:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
 584:	34 03 00 01 	mvi r3,1
 588:	5c 23 00 07 	bne r1,r3,5a4 <pwm_en+0x58>
 58c:	78 04 00 00 	mvhi r4,0x0
 590:	38 84 0b 60 	ori r4,r4,0xb60
 594:	28 83 00 00 	lw r3,(r4+0)
 598:	28 63 00 00 	lw r3,(r3+0)
 59c:	58 62 00 0c 	sw (r3+12),r2
 5a0:	e3 ff ff f1 	bi 564 <pwm_en+0x18>
	if(sel == 2) pwm0->en2 = val;
 5a4:	34 03 00 02 	mvi r3,2
 5a8:	5c 23 00 0e 	bne r1,r3,5e0 <pwm_en+0x94>
 5ac:	78 04 00 00 	mvhi r4,0x0
 5b0:	38 84 0b 60 	ori r4,r4,0xb60
 5b4:	28 83 00 00 	lw r3,(r4+0)
 5b8:	28 63 00 00 	lw r3,(r3+0)
 5bc:	58 62 00 18 	sw (r3+24),r2
	if(sel == 6) pwm0->en6 = val;
 5c0:	34 03 00 06 	mvi r3,6
 5c4:	5c 23 00 0e 	bne r1,r3,5fc <pwm_en+0xb0>
 5c8:	78 03 00 00 	mvhi r3,0x0
 5cc:	38 63 0b 60 	ori r3,r3,0xb60
 5d0:	28 61 00 00 	lw r1,(r3+0)
 5d4:	28 21 00 00 	lw r1,(r1+0)
 5d8:	58 22 00 48 	sw (r1+72),r2
}
 5dc:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
 5e0:	34 03 00 03 	mvi r3,3
 5e4:	5c 23 00 0e 	bne r1,r3,61c <pwm_en+0xd0>
 5e8:	78 04 00 00 	mvhi r4,0x0
 5ec:	38 84 0b 60 	ori r4,r4,0xb60
 5f0:	28 83 00 00 	lw r3,(r4+0)
 5f4:	28 63 00 00 	lw r3,(r3+0)
 5f8:	58 62 00 24 	sw (r3+36),r2
	if(sel == 7) pwm0->en7 = val;
 5fc:	34 03 00 07 	mvi r3,7
 600:	5c 23 ff e0 	bne r1,r3,580 <pwm_en+0x34>
 604:	78 04 00 00 	mvhi r4,0x0
 608:	38 84 0b 60 	ori r4,r4,0xb60
 60c:	28 81 00 00 	lw r1,(r4+0)
 610:	28 21 00 00 	lw r1,(r1+0)
 614:	58 22 00 54 	sw (r1+84),r2
}
 618:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
 61c:	34 03 00 04 	mvi r3,4
 620:	5c 23 ff d1 	bne r1,r3,564 <pwm_en+0x18>
 624:	78 03 00 00 	mvhi r3,0x0
 628:	38 63 0b 60 	ori r3,r3,0xb60
 62c:	28 61 00 00 	lw r1,(r3+0)
 630:	28 21 00 00 	lw r1,(r1+0)
 634:	58 22 00 30 	sw (r1+48),r2
}
 638:	c3 a0 00 00 	ret

0000063c <pwm_duty>:

void pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
 63c:	5c 20 00 0e 	bne r1,r0,674 <pwm_duty+0x38>
 640:	78 04 00 00 	mvhi r4,0x0
 644:	38 84 0b 64 	ori r4,r4,0xb64
 648:	28 83 00 00 	lw r3,(r4+0)
 64c:	28 63 00 00 	lw r3,(r3+0)
 650:	58 62 00 08 	sw (r3+8),r2
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
 654:	34 03 00 05 	mvi r3,5
 658:	5c 23 00 16 	bne r1,r3,6b0 <pwm_duty+0x74>
 65c:	78 04 00 00 	mvhi r4,0x0
 660:	38 84 0b 64 	ori r4,r4,0xb64
 664:	28 81 00 00 	lw r1,(r4+0)
 668:	28 21 00 00 	lw r1,(r1+0)
 66c:	58 22 00 44 	sw (r1+68),r2
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

}
 670:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
 674:	34 03 00 01 	mvi r3,1
 678:	5c 23 00 07 	bne r1,r3,694 <pwm_duty+0x58>
 67c:	78 04 00 00 	mvhi r4,0x0
 680:	38 84 0b 64 	ori r4,r4,0xb64
 684:	28 83 00 00 	lw r3,(r4+0)
 688:	28 63 00 00 	lw r3,(r3+0)
 68c:	58 62 00 14 	sw (r3+20),r2
 690:	e3 ff ff f1 	bi 654 <pwm_duty+0x18>
	if(sel == 2) pwm0->duty2 = val;
 694:	34 03 00 02 	mvi r3,2
 698:	5c 23 00 0e 	bne r1,r3,6d0 <pwm_duty+0x94>
 69c:	78 04 00 00 	mvhi r4,0x0
 6a0:	38 84 0b 64 	ori r4,r4,0xb64
 6a4:	28 83 00 00 	lw r3,(r4+0)
 6a8:	28 63 00 00 	lw r3,(r3+0)
 6ac:	58 62 00 20 	sw (r3+32),r2
	if(sel == 6) pwm0->duty6 = val;
 6b0:	34 03 00 06 	mvi r3,6
 6b4:	5c 23 00 0e 	bne r1,r3,6ec <pwm_duty+0xb0>
 6b8:	78 03 00 00 	mvhi r3,0x0
 6bc:	38 63 0b 64 	ori r3,r3,0xb64
 6c0:	28 61 00 00 	lw r1,(r3+0)
 6c4:	28 21 00 00 	lw r1,(r1+0)
 6c8:	58 22 00 50 	sw (r1+80),r2
}
 6cc:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
 6d0:	34 03 00 03 	mvi r3,3
 6d4:	5c 23 00 0e 	bne r1,r3,70c <pwm_duty+0xd0>
 6d8:	78 04 00 00 	mvhi r4,0x0
 6dc:	38 84 0b 64 	ori r4,r4,0xb64
 6e0:	28 83 00 00 	lw r3,(r4+0)
 6e4:	28 63 00 00 	lw r3,(r3+0)
 6e8:	58 62 00 2c 	sw (r3+44),r2
	if(sel == 7) pwm0->duty7 = val;
 6ec:	34 03 00 07 	mvi r3,7
 6f0:	5c 23 ff e0 	bne r1,r3,670 <pwm_duty+0x34>
 6f4:	78 04 00 00 	mvhi r4,0x0
 6f8:	38 84 0b 64 	ori r4,r4,0xb64
 6fc:	28 81 00 00 	lw r1,(r4+0)
 700:	28 21 00 00 	lw r1,(r1+0)
 704:	58 22 00 5c 	sw (r1+92),r2
}
 708:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
 70c:	34 03 00 04 	mvi r3,4
 710:	5c 23 ff d1 	bne r1,r3,654 <pwm_duty+0x18>
 714:	78 03 00 00 	mvhi r3,0x0
 718:	38 63 0b 64 	ori r3,r3,0xb64
 71c:	28 61 00 00 	lw r1,(r3+0)
 720:	28 21 00 00 	lw r1,(r1+0)
 724:	58 22 00 38 	sw (r1+56),r2
}
 728:	c3 a0 00 00 	ret

0000072c <pwm_period>:

void pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
 72c:	5c 20 00 0e 	bne r1,r0,764 <pwm_period+0x38>
 730:	78 04 00 00 	mvhi r4,0x0
 734:	38 84 0b 68 	ori r4,r4,0xb68
 738:	28 83 00 00 	lw r3,(r4+0)
 73c:	28 63 00 00 	lw r3,(r3+0)
 740:	58 62 00 04 	sw (r3+4),r2
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
 744:	34 03 00 05 	mvi r3,5
 748:	5c 23 00 16 	bne r1,r3,7a0 <pwm_period+0x74>
 74c:	78 04 00 00 	mvhi r4,0x0
 750:	38 84 0b 68 	ori r4,r4,0xb68
 754:	28 81 00 00 	lw r1,(r4+0)
 758:	28 21 00 00 	lw r1,(r1+0)
 75c:	58 22 00 40 	sw (r1+64),r2
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

}
 760:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
 764:	34 03 00 01 	mvi r3,1
 768:	5c 23 00 07 	bne r1,r3,784 <pwm_period+0x58>
 76c:	78 04 00 00 	mvhi r4,0x0
 770:	38 84 0b 68 	ori r4,r4,0xb68
 774:	28 83 00 00 	lw r3,(r4+0)
 778:	28 63 00 00 	lw r3,(r3+0)
 77c:	58 62 00 10 	sw (r3+16),r2
 780:	e3 ff ff f1 	bi 744 <pwm_period+0x18>
	if(sel == 2) pwm0->period2 = val;
 784:	34 03 00 02 	mvi r3,2
 788:	5c 23 00 0e 	bne r1,r3,7c0 <pwm_period+0x94>
 78c:	78 04 00 00 	mvhi r4,0x0
 790:	38 84 0b 68 	ori r4,r4,0xb68
 794:	28 83 00 00 	lw r3,(r4+0)
 798:	28 63 00 00 	lw r3,(r3+0)
 79c:	58 62 00 1c 	sw (r3+28),r2
	if(sel == 6) pwm0->period6 = val;
 7a0:	34 03 00 06 	mvi r3,6
 7a4:	5c 23 00 0e 	bne r1,r3,7dc <pwm_period+0xb0>
 7a8:	78 03 00 00 	mvhi r3,0x0
 7ac:	38 63 0b 68 	ori r3,r3,0xb68
 7b0:	28 61 00 00 	lw r1,(r3+0)
 7b4:	28 21 00 00 	lw r1,(r1+0)
 7b8:	58 22 00 4c 	sw (r1+76),r2
}
 7bc:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
 7c0:	34 03 00 03 	mvi r3,3
 7c4:	5c 23 00 0e 	bne r1,r3,7fc <pwm_period+0xd0>
 7c8:	78 04 00 00 	mvhi r4,0x0
 7cc:	38 84 0b 68 	ori r4,r4,0xb68
 7d0:	28 83 00 00 	lw r3,(r4+0)
 7d4:	28 63 00 00 	lw r3,(r3+0)
 7d8:	58 62 00 28 	sw (r3+40),r2
	if(sel == 7) pwm0->period7 = val;
 7dc:	34 03 00 07 	mvi r3,7
 7e0:	5c 23 ff e0 	bne r1,r3,760 <pwm_period+0x34>
 7e4:	78 04 00 00 	mvhi r4,0x0
 7e8:	38 84 0b 68 	ori r4,r4,0xb68
 7ec:	28 81 00 00 	lw r1,(r4+0)
 7f0:	28 21 00 00 	lw r1,(r1+0)
 7f4:	58 22 00 58 	sw (r1+88),r2
}
 7f8:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
 7fc:	34 03 00 04 	mvi r3,4
 800:	5c 23 ff d1 	bne r1,r3,744 <pwm_period+0x18>
 804:	78 03 00 00 	mvhi r3,0x0
 808:	38 63 0b 68 	ori r3,r3,0xb68
 80c:	28 61 00 00 	lw r1,(r3+0)
 810:	28 21 00 00 	lw r1,(r1+0)
 814:	58 22 00 34 	sw (r1+52),r2
}
 818:	c3 a0 00 00 	ret

0000081c <pwm_geten>:

uint32_t pwm_geten(uint32_t sel){

	if(sel == 0) return pwm0->en0;
 81c:	44 20 00 10 	be r1,r0,85c <pwm_geten+0x40>
	if(sel == 1) return pwm0->en1;
 820:	34 02 00 01 	mvi r2,1
 824:	44 22 00 14 	be r1,r2,874 <pwm_geten+0x58>
	if(sel == 2) return pwm0->en2;
 828:	34 02 00 02 	mvi r2,2
 82c:	44 22 00 1e 	be r1,r2,8a4 <pwm_geten+0x88>
	if(sel == 3) return pwm0->en3;
 830:	34 02 00 03 	mvi r2,3
 834:	44 22 00 16 	be r1,r2,88c <pwm_geten+0x70>
	if(sel == 4) return pwm0->en4;
 838:	34 02 00 04 	mvi r2,4
 83c:	44 22 00 20 	be r1,r2,8bc <pwm_geten+0xa0>
	if(sel == 5) return pwm0->en5;
 840:	34 02 00 05 	mvi r2,5
 844:	44 22 00 2a 	be r1,r2,8ec <pwm_geten+0xd0>
	if(sel == 6) return pwm0->en6;
 848:	34 02 00 06 	mvi r2,6
 84c:	44 22 00 2e 	be r1,r2,904 <pwm_geten+0xe8>
	if(sel == 7) return pwm0->en7;
 850:	34 02 00 07 	mvi r2,7
 854:	44 22 00 20 	be r1,r2,8d4 <pwm_geten+0xb8>

}
 858:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->en0;
 85c:	78 02 00 00 	mvhi r2,0x0
 860:	38 42 0b 6c 	ori r2,r2,0xb6c
 864:	28 41 00 00 	lw r1,(r2+0)
 868:	28 21 00 00 	lw r1,(r1+0)
 86c:	28 21 00 00 	lw r1,(r1+0)
}
 870:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
 874:	78 02 00 00 	mvhi r2,0x0
 878:	38 42 0b 6c 	ori r2,r2,0xb6c
 87c:	28 41 00 00 	lw r1,(r2+0)
 880:	28 21 00 00 	lw r1,(r1+0)
 884:	28 21 00 0c 	lw r1,(r1+12)
}
 888:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
 88c:	78 02 00 00 	mvhi r2,0x0
 890:	38 42 0b 6c 	ori r2,r2,0xb6c
 894:	28 41 00 00 	lw r1,(r2+0)
 898:	28 21 00 00 	lw r1,(r1+0)
 89c:	28 21 00 24 	lw r1,(r1+36)
}
 8a0:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
 8a4:	78 02 00 00 	mvhi r2,0x0
 8a8:	38 42 0b 6c 	ori r2,r2,0xb6c
 8ac:	28 41 00 00 	lw r1,(r2+0)
 8b0:	28 21 00 00 	lw r1,(r1+0)
 8b4:	28 21 00 18 	lw r1,(r1+24)
}
 8b8:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
 8bc:	78 02 00 00 	mvhi r2,0x0
 8c0:	38 42 0b 6c 	ori r2,r2,0xb6c
 8c4:	28 41 00 00 	lw r1,(r2+0)
 8c8:	28 21 00 00 	lw r1,(r1+0)
 8cc:	28 21 00 30 	lw r1,(r1+48)
}
 8d0:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->en7;
 8d4:	78 02 00 00 	mvhi r2,0x0
 8d8:	38 42 0b 6c 	ori r2,r2,0xb6c
 8dc:	28 41 00 00 	lw r1,(r2+0)
 8e0:	28 21 00 00 	lw r1,(r1+0)
 8e4:	28 21 00 54 	lw r1,(r1+84)
}
 8e8:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
 8ec:	78 02 00 00 	mvhi r2,0x0
 8f0:	38 42 0b 6c 	ori r2,r2,0xb6c
 8f4:	28 41 00 00 	lw r1,(r2+0)
 8f8:	28 21 00 00 	lw r1,(r1+0)
 8fc:	28 21 00 3c 	lw r1,(r1+60)
}
 900:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
 904:	78 02 00 00 	mvhi r2,0x0
 908:	38 42 0b 6c 	ori r2,r2,0xb6c
 90c:	28 41 00 00 	lw r1,(r2+0)
 910:	28 21 00 00 	lw r1,(r1+0)
 914:	28 21 00 48 	lw r1,(r1+72)
}
 918:	c3 a0 00 00 	ret

0000091c <pwm_getduty>:

uint32_t pwm_getduty(uint32_t sel){

	if(sel == 0) return pwm0->duty0;
 91c:	44 20 00 10 	be r1,r0,95c <pwm_getduty+0x40>
	if(sel == 1) return pwm0->duty1;
 920:	34 02 00 01 	mvi r2,1
 924:	44 22 00 14 	be r1,r2,974 <pwm_getduty+0x58>
	if(sel == 2) return pwm0->duty2;
 928:	34 02 00 02 	mvi r2,2
 92c:	44 22 00 1e 	be r1,r2,9a4 <pwm_getduty+0x88>
	if(sel == 3) return pwm0->duty3;
 930:	34 02 00 03 	mvi r2,3
 934:	44 22 00 16 	be r1,r2,98c <pwm_getduty+0x70>
	if(sel == 4) return pwm0->duty4;
 938:	34 02 00 04 	mvi r2,4
 93c:	44 22 00 20 	be r1,r2,9bc <pwm_getduty+0xa0>
	if(sel == 5) return pwm0->duty5;
 940:	34 02 00 05 	mvi r2,5
 944:	44 22 00 2a 	be r1,r2,9ec <pwm_getduty+0xd0>
	if(sel == 6) return pwm0->duty6;
 948:	34 02 00 06 	mvi r2,6
 94c:	44 22 00 2e 	be r1,r2,a04 <pwm_getduty+0xe8>
	if(sel == 7) return pwm0->duty7;
 950:	34 02 00 07 	mvi r2,7
 954:	44 22 00 20 	be r1,r2,9d4 <pwm_getduty+0xb8>
	
}
 958:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->duty0;
 95c:	78 02 00 00 	mvhi r2,0x0
 960:	38 42 0b 70 	ori r2,r2,0xb70
 964:	28 41 00 00 	lw r1,(r2+0)
 968:	28 21 00 00 	lw r1,(r1+0)
 96c:	28 21 00 08 	lw r1,(r1+8)
}
 970:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
 974:	78 02 00 00 	mvhi r2,0x0
 978:	38 42 0b 70 	ori r2,r2,0xb70
 97c:	28 41 00 00 	lw r1,(r2+0)
 980:	28 21 00 00 	lw r1,(r1+0)
 984:	28 21 00 14 	lw r1,(r1+20)
}
 988:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
 98c:	78 02 00 00 	mvhi r2,0x0
 990:	38 42 0b 70 	ori r2,r2,0xb70
 994:	28 41 00 00 	lw r1,(r2+0)
 998:	28 21 00 00 	lw r1,(r1+0)
 99c:	28 21 00 2c 	lw r1,(r1+44)
}
 9a0:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
 9a4:	78 02 00 00 	mvhi r2,0x0
 9a8:	38 42 0b 70 	ori r2,r2,0xb70
 9ac:	28 41 00 00 	lw r1,(r2+0)
 9b0:	28 21 00 00 	lw r1,(r1+0)
 9b4:	28 21 00 20 	lw r1,(r1+32)
}
 9b8:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
 9bc:	78 02 00 00 	mvhi r2,0x0
 9c0:	38 42 0b 70 	ori r2,r2,0xb70
 9c4:	28 41 00 00 	lw r1,(r2+0)
 9c8:	28 21 00 00 	lw r1,(r1+0)
 9cc:	28 21 00 38 	lw r1,(r1+56)
}
 9d0:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->duty7;
 9d4:	78 02 00 00 	mvhi r2,0x0
 9d8:	38 42 0b 70 	ori r2,r2,0xb70
 9dc:	28 41 00 00 	lw r1,(r2+0)
 9e0:	28 21 00 00 	lw r1,(r1+0)
 9e4:	28 21 00 5c 	lw r1,(r1+92)
}
 9e8:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
 9ec:	78 02 00 00 	mvhi r2,0x0
 9f0:	38 42 0b 70 	ori r2,r2,0xb70
 9f4:	28 41 00 00 	lw r1,(r2+0)
 9f8:	28 21 00 00 	lw r1,(r1+0)
 9fc:	28 21 00 44 	lw r1,(r1+68)
}
 a00:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
 a04:	78 02 00 00 	mvhi r2,0x0
 a08:	38 42 0b 70 	ori r2,r2,0xb70
 a0c:	28 41 00 00 	lw r1,(r2+0)
 a10:	28 21 00 00 	lw r1,(r1+0)
 a14:	28 21 00 50 	lw r1,(r1+80)
}
 a18:	c3 a0 00 00 	ret

00000a1c <pwm_getperiod>:

uint32_t pwm_getperiod(uint32_t sel){

	if(sel == 0) return pwm0->period0;
 a1c:	44 20 00 10 	be r1,r0,a5c <pwm_getperiod+0x40>
	if(sel == 1) return pwm0->period1;
 a20:	34 02 00 01 	mvi r2,1
 a24:	44 22 00 14 	be r1,r2,a74 <pwm_getperiod+0x58>
	if(sel == 2) return pwm0->period2;
 a28:	34 02 00 02 	mvi r2,2
 a2c:	44 22 00 1e 	be r1,r2,aa4 <pwm_getperiod+0x88>
	if(sel == 3) return pwm0->period3;
 a30:	34 02 00 03 	mvi r2,3
 a34:	44 22 00 16 	be r1,r2,a8c <pwm_getperiod+0x70>
	if(sel == 4) return pwm0->period4;
 a38:	34 02 00 04 	mvi r2,4
 a3c:	44 22 00 20 	be r1,r2,abc <pwm_getperiod+0xa0>
	if(sel == 5) return pwm0->period5;
 a40:	34 02 00 05 	mvi r2,5
 a44:	44 22 00 2a 	be r1,r2,aec <pwm_getperiod+0xd0>
	if(sel == 6) return pwm0->period6;
 a48:	34 02 00 06 	mvi r2,6
 a4c:	44 22 00 2e 	be r1,r2,b04 <pwm_getperiod+0xe8>
	if(sel == 7) return pwm0->period7;
 a50:	34 02 00 07 	mvi r2,7
 a54:	44 22 00 20 	be r1,r2,ad4 <pwm_getperiod+0xb8>
	
 a58:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->period0;
 a5c:	78 02 00 00 	mvhi r2,0x0
 a60:	38 42 0b 74 	ori r2,r2,0xb74
 a64:	28 41 00 00 	lw r1,(r2+0)
 a68:	28 21 00 00 	lw r1,(r1+0)
 a6c:	28 21 00 04 	lw r1,(r1+4)
 a70:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
 a74:	78 02 00 00 	mvhi r2,0x0
 a78:	38 42 0b 74 	ori r2,r2,0xb74
 a7c:	28 41 00 00 	lw r1,(r2+0)
 a80:	28 21 00 00 	lw r1,(r1+0)
 a84:	28 21 00 10 	lw r1,(r1+16)
 a88:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
 a8c:	78 02 00 00 	mvhi r2,0x0
 a90:	38 42 0b 74 	ori r2,r2,0xb74
 a94:	28 41 00 00 	lw r1,(r2+0)
 a98:	28 21 00 00 	lw r1,(r1+0)
 a9c:	28 21 00 28 	lw r1,(r1+40)
 aa0:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
 aa4:	78 02 00 00 	mvhi r2,0x0
 aa8:	38 42 0b 74 	ori r2,r2,0xb74
 aac:	28 41 00 00 	lw r1,(r2+0)
 ab0:	28 21 00 00 	lw r1,(r1+0)
 ab4:	28 21 00 1c 	lw r1,(r1+28)
 ab8:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
 abc:	78 02 00 00 	mvhi r2,0x0
 ac0:	38 42 0b 74 	ori r2,r2,0xb74
 ac4:	28 41 00 00 	lw r1,(r2+0)
 ac8:	28 21 00 00 	lw r1,(r1+0)
 acc:	28 21 00 34 	lw r1,(r1+52)
 ad0:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->period7;
 ad4:	78 02 00 00 	mvhi r2,0x0
 ad8:	38 42 0b 74 	ori r2,r2,0xb74
 adc:	28 41 00 00 	lw r1,(r2+0)
 ae0:	28 21 00 00 	lw r1,(r1+0)
 ae4:	28 21 00 58 	lw r1,(r1+88)
 ae8:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
 aec:	78 02 00 00 	mvhi r2,0x0
 af0:	38 42 0b 74 	ori r2,r2,0xb74
 af4:	28 41 00 00 	lw r1,(r2+0)
 af8:	28 21 00 00 	lw r1,(r1+0)
 afc:	28 21 00 40 	lw r1,(r1+64)
 b00:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
 b04:	78 02 00 00 	mvhi r2,0x0
 b08:	38 42 0b 74 	ori r2,r2,0xb74
 b0c:	28 41 00 00 	lw r1,(r2+0)
 b10:	28 21 00 00 	lw r1,(r1+0)
 b14:	28 21 00 4c 	lw r1,(r1+76)
 b18:	c3 a0 00 00 	ret
