
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001458  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000001d8  00001458  00001458  000014ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00001630  00001630  00001684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000a8  00001640  00001640  00001694  2**2
                  ALLOC
  4 .debug_frame  000003f4  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000254c  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095d  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000075f  00000000  00000000  00004931  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a8  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001408  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000064d  00000000  00000000  000065a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00006bf5  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 01 b6 	calli 7a4 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c ff fc 	ori sp,sp,0xfffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 16 40 	ori gp,gp,0x1640
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 16 40 	ori r1,r1,0x1640
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 16 e8 	ori r3,r3,0x16e8

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 00 67 	calli 2d8 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <_Z11instruccion3armc>:
int inst;
int dir;
int val;


void instruccion(arm y,char x){
     208:	37 9c ff dc 	addi sp,sp,-36
     20c:	5b 9d 00 04 	sw (sp+4),ra
     210:	43 89 00 2b 	lbu r9,(sp+43)
     214:	5b 81 00 08 	sw (sp+8),r1
     218:	5b 82 00 0c 	sw (sp+12),r2
     21c:	5b 83 00 10 	sw (sp+16),r3
     220:	5b 84 00 14 	sw (sp+20),r4
     224:	5b 85 00 18 	sw (sp+24),r5
     228:	5b 86 00 1c 	sw (sp+28),r6
     22c:	5b 87 00 20 	sw (sp+32),r7
     230:	5b 88 00 24 	sw (sp+36),r8
	switch(x){
     234:	34 01 00 10 	mvi r1,16
     238:	45 21 00 0a 	be r9,r1,260 <_Z11instruccion3armc+0x58>
     23c:	34 01 00 11 	mvi r1,17
     240:	5d 21 00 05 	bne r9,r1,254 <_Z11instruccion3armc+0x4c>
			y.derecha();
			uart_putchar('d');
			break;

		case 0x11:
			y.izquierda();
     244:	37 81 00 08 	addi r1,sp,8
     248:	f8 00 03 37 	calli f24 <_ZN3arm9izquierdaEv>
			uart_putchar('z');
     24c:	34 01 00 7a 	mvi r1,122
     250:	f8 00 01 c4 	calli 960 <uart_putchar>
			break;
	}
}
     254:	2b 9d 00 04 	lw ra,(sp+4)
     258:	37 9c 00 24 	addi sp,sp,36
     25c:	c3 a0 00 00 	ret
			y.derecha();
     260:	37 81 00 08 	addi r1,sp,8
     264:	f8 00 03 11 	calli ea8 <_ZN3arm7derechaEv>
			uart_putchar('d');
     268:	34 01 00 64 	mvi r1,100
     26c:	f8 00 01 bd 	calli 960 <uart_putchar>
}
     270:	2b 9d 00 04 	lw ra,(sp+4)
     274:	37 9c 00 24 	addi sp,sp,36
     278:	c3 a0 00 00 	ret

0000027c <_Z12read_commandv>:

uint32_t command_array [5];

uint8_t read_command(){
     27c:	37 9c ff f4 	addi sp,sp,-12
     280:	5b 8b 00 0c 	sw (sp+12),r11
     284:	5b 8c 00 08 	sw (sp+8),r12
     288:	5b 9d 00 04 	sw (sp+4),ra
     28c:	78 01 00 00 	mvhi r1,0x0
     290:	38 21 14 58 	ori r1,r1,0x1458
     294:	28 2c 00 00 	lw r12,(r1+0)

		uint8_t cm;
		uint8_t i=0;
     298:	34 0b 00 00 	mvi r11,0
        while ( (cm != 0xf0) && (i<5) ){
        	cm = uart_getchar();
        	command_array[i]=cm;
        	i++;
     29c:	35 6b 00 01 	addi r11,r11,1
        	cm = uart_getchar();
     2a0:	f8 00 01 a6 	calli 938 <uart_getchar>
        	i++;
     2a4:	21 6b 00 ff 	andi r11,r11,0xff
        while ( (cm != 0xf0) && (i<5) ){
     2a8:	64 23 00 f0 	cmpei r3,r1,240
     2ac:	75 62 00 04 	cmpgui r2,r11,0x4
        	command_array[i]=cm;
     2b0:	59 81 00 00 	sw (r12+0),r1
        while ( (cm != 0xf0) && (i<5) ){
     2b4:	b8 62 10 00 	or r2,r3,r2
     2b8:	35 8c 00 04 	addi r12,r12,4
     2bc:	44 40 ff f8 	be r2,r0,29c <_Z12read_commandv+0x20>
        }
        if (cm == 0xf0 )
        	return 1;
        return 0;
			
}
     2c0:	b8 60 08 00 	mv r1,r3
     2c4:	2b 9d 00 04 	lw ra,(sp+4)
     2c8:	2b 8b 00 0c 	lw r11,(sp+12)
     2cc:	2b 8c 00 08 	lw r12,(sp+8)
     2d0:	37 9c 00 0c 	addi sp,sp,12
     2d4:	c3 a0 00 00 	ret

000002d8 <main>:

int main(){
     2d8:	37 9c ff 34 	addi sp,sp,-204
     2dc:	5b 8b 00 48 	sw (sp+72),r11
     2e0:	5b 8c 00 44 	sw (sp+68),r12
     2e4:	5b 8d 00 40 	sw (sp+64),r13
     2e8:	5b 8e 00 3c 	sw (sp+60),r14
     2ec:	5b 8f 00 38 	sw (sp+56),r15
     2f0:	5b 90 00 34 	sw (sp+52),r16
     2f4:	5b 91 00 30 	sw (sp+48),r17
     2f8:	5b 92 00 2c 	sw (sp+44),r18
     2fc:	5b 93 00 28 	sw (sp+40),r19
     300:	5b 94 00 24 	sw (sp+36),r20
     304:	5b 95 00 20 	sw (sp+32),r21
     308:	5b 96 00 1c 	sw (sp+28),r22
     30c:	5b 97 00 18 	sw (sp+24),r23
     310:	5b 98 00 14 	sw (sp+20),r24
     314:	5b 99 00 10 	sw (sp+16),r25
     318:	5b 9b 00 0c 	sw (sp+12),fp
     31c:	5b 9d 00 08 	sw (sp+8),ra

	cam camera;

	uart_putstr("Initializing...");
     320:	78 02 00 00 	mvhi r2,0x0
     324:	38 42 14 5c 	ori r2,r2,0x145c
     328:	28 41 00 00 	lw r1,(r2+0)
		uart_putchar('\n');

	    uint8_t cm=read_command();

		if (cm){
			if (command_array[0] == 0xff) {
     32c:	34 0e 00 ff 	mvi r14,255
	uart_putstr("Initializing...");
     330:	f8 00 01 96 	calli 988 <uart_putstr>
   volatile uint32_t en7;
   volatile uint32_t period7;
   volatile uint32_t duty7;
} pwm_t;

class  pwm{
     334:	78 04 50 00 	mvhi r4,0x5000
	arm1.set_serv(0,1);
     338:	34 03 00 01 	mvi r3,1
     33c:	34 02 00 00 	mvi r2,0
     340:	37 81 00 50 	addi r1,sp,80
     344:	5b 84 00 50 	sw (sp+80),r4
     348:	5b 84 00 70 	sw (sp+112),r4
     34c:	5b 84 00 90 	sw (sp+144),r4
     350:	5b 84 00 b0 	sw (sp+176),r4
     354:	f8 00 03 13 	calli fa0 <_ZN3arm8set_servEii>
	arm2.set_serv(2,3);
     358:	34 03 00 03 	mvi r3,3
     35c:	34 02 00 02 	mvi r2,2
     360:	37 81 00 70 	addi r1,sp,112
     364:	f8 00 03 0f 	calli fa0 <_ZN3arm8set_servEii>
	arm3.set_serv(4,5);
     368:	34 03 00 05 	mvi r3,5
     36c:	34 02 00 04 	mvi r2,4
     370:	37 81 00 90 	addi r1,sp,144
     374:	f8 00 03 0b 	calli fa0 <_ZN3arm8set_servEii>
	arm4.set_serv(6,7);
     378:	34 03 00 07 	mvi r3,7
     37c:	34 02 00 06 	mvi r2,6
     380:	37 81 00 b0 	addi r1,sp,176
     384:	f8 00 03 07 	calli fa0 <_ZN3arm8set_servEii>
	uart_putstr("Ready");
     388:	78 05 00 00 	mvhi r5,0x0
     38c:	38 a5 14 60 	ori r5,r5,0x1460
     390:	28 a1 00 00 	lw r1,(r5+0)
     394:	78 05 00 00 	mvhi r5,0x0
     398:	38 a5 14 68 	ori r5,r5,0x1468
     39c:	28 b2 00 00 	lw r18,(r5+0)
     3a0:	78 02 00 00 	mvhi r2,0x0
     3a4:	78 05 00 00 	mvhi r5,0x0
     3a8:	38 42 14 64 	ori r2,r2,0x1464
     3ac:	38 a5 14 70 	ori r5,r5,0x1470
     3b0:	28 4c 00 00 	lw r12,(r2+0)
     3b4:	28 b0 00 00 	lw r16,(r5+0)
     3b8:	78 02 00 00 	mvhi r2,0x0
					uart_putstr("Home...");
     3bc:	78 05 00 00 	mvhi r5,0x0
     3c0:	38 42 14 6c 	ori r2,r2,0x146c
     3c4:	38 a5 14 78 	ori r5,r5,0x1478
     3c8:	28 51 00 00 	lw r17,(r2+0)
     3cc:	28 bb 00 00 	lw fp,(r5+0)
		uart_putstr("------Instruction------");
     3d0:	78 02 00 00 	mvhi r2,0x0
					arm4.home();
					uart_putstr("Ready");
			}

			if (command_array[0] == 0xfe){
					uart_putstr("Init...");
     3d4:	78 05 00 00 	mvhi r5,0x0
		uart_putstr("------Instruction------");
     3d8:	38 42 14 74 	ori r2,r2,0x1474
					uart_putstr("Init...");
     3dc:	38 a5 14 7c 	ori r5,r5,0x147c
		uart_putstr("------Instruction------");
     3e0:	28 4b 00 00 	lw r11,(r2+0)
					uart_putstr("Init...");
     3e4:	28 b9 00 00 	lw r25,(r5+0)
					uart_putstr("Ready");
			}

			if (command_array[0] == 0xfd){
				inst = command_array[2];
				uart_putstr("Moving...");
     3e8:	78 02 00 00 	mvhi r2,0x0
			}
			if (command_array[0] == 0xfc){
				br  = command_array[1];
				dir = command_array[2];
				val = command_array[3];
				uart_putstr("Calibrating...");
     3ec:	78 05 00 00 	mvhi r5,0x0
				uart_putstr("Moving...");
     3f0:	38 42 14 80 	ori r2,r2,0x1480
				uart_putstr("Calibrating...");
     3f4:	38 a5 14 84 	ori r5,r5,0x1484
				uart_putstr("Moving...");
     3f8:	28 58 00 00 	lw r24,(r2+0)
				uart_putstr("Calibrating...");
     3fc:	28 b7 00 00 	lw r23,(r5+0)
					arm4.calib(dir,val);
				uart_putstr("Ready");
			}

			if (command_array[0] == 0x50){
				uart_putstr("Reset camera...");
     400:	78 02 00 00 	mvhi r2,0x0
				camera.reset();
			}

			if (command_array[0] == 0x5a){
				uart_putstr("Take picture...");
     404:	78 05 00 00 	mvhi r5,0x0
				uart_putstr("Reset camera...");
     408:	38 42 14 88 	ori r2,r2,0x1488
				uart_putstr("Take picture...");
     40c:	38 a5 14 8c 	ori r5,r5,0x148c
				uart_putstr("Reset camera...");
     410:	28 56 00 00 	lw r22,(r2+0)
				uart_putstr("Take picture...");
     414:	28 b5 00 00 	lw r21,(r5+0)
				camera.takepicture();
			}

			if (command_array[0] == 0x5b){
				uart_putstr("Get size...");
     418:	78 02 00 00 	mvhi r2,0x0
				camera.getsize();
			}

			if (command_array[0] == 0x5c){
				uart_putstr("Sending...");
     41c:	78 05 00 00 	mvhi r5,0x0
				uart_putstr("Get size...");
     420:	38 42 14 90 	ori r2,r2,0x1490
				uart_putstr("Sending...");
     424:	38 a5 14 94 	ori r5,r5,0x1494
					uart_putstr("Ready");
     428:	b8 20 78 00 	mv r15,r1
				uart_putstr("Get size...");
     42c:	28 54 00 00 	lw r20,(r2+0)
				uart_putstr("Sending...");
     430:	28 b3 00 00 	lw r19,(r5+0)
	uart_putstr("Ready");
     434:	f8 00 01 55 	calli 988 <uart_putstr>
			if (command_array[0] == 0xfe){
     438:	34 0d 00 fe 	mvi r13,254
		uart_putchar('\n');
     43c:	34 01 00 0a 	mvi r1,10
     440:	f8 00 01 48 	calli 960 <uart_putchar>
		uart_putstr("------Instruction------");
     444:	b9 60 08 00 	mv r1,r11
     448:	f8 00 01 50 	calli 988 <uart_putstr>
		uart_putchar('\n');
     44c:	34 01 00 0a 	mvi r1,10
     450:	f8 00 01 44 	calli 960 <uart_putchar>
	    uint8_t cm=read_command();
     454:	fb ff ff 8a 	calli 27c <_Z12read_commandv>
		if (cm){
     458:	44 20 ff f9 	be r1,r0,43c <main+0x164>
			if (command_array[0] == 0xff) {
     45c:	29 81 00 00 	lw r1,(r12+0)
     460:	44 2e 00 17 	be r1,r14,4bc <main+0x1e4>
			if (command_array[0] == 0xfe){
     464:	44 2d 00 24 	be r1,r13,4f4 <main+0x21c>
			if (command_array[0] == 0xfd){
     468:	34 02 00 fd 	mvi r2,253
     46c:	44 22 00 31 	be r1,r2,530 <main+0x258>
			if (command_array[0] == 0xfc){
     470:	34 02 00 fc 	mvi r2,252
     474:	44 22 00 41 	be r1,r2,578 <main+0x2a0>
			if (command_array[0] == 0x50){
     478:	34 02 00 50 	mvi r2,80
     47c:	44 22 00 57 	be r1,r2,5d8 <main+0x300>
			if (command_array[0] == 0x5a){
     480:	34 02 00 5a 	mvi r2,90
     484:	44 22 00 5c 	be r1,r2,5f4 <main+0x31c>
			if (command_array[0] == 0x5b){
     488:	34 02 00 5b 	mvi r2,91
     48c:	44 22 00 61 	be r1,r2,610 <main+0x338>
			if (command_array[0] == 0x5c){
     490:	34 02 00 5c 	mvi r2,92
     494:	44 22 00 66 	be r1,r2,62c <main+0x354>
				camera.sendpicture();
			}

			if (command_array[0] == 0x5d){
     498:	34 02 00 5d 	mvi r2,93
     49c:	5c 22 ff e8 	bne r1,r2,43c <main+0x164>
				uart_putstr("Stoping...");
     4a0:	78 02 00 00 	mvhi r2,0x0
     4a4:	38 42 14 98 	ori r2,r2,0x1498
     4a8:	28 41 00 00 	lw r1,(r2+0)
     4ac:	f8 00 01 37 	calli 988 <uart_putstr>
				camera.stoptaking();
     4b0:	37 81 00 4c 	addi r1,sp,76
     4b4:	f8 00 03 c1 	calli 13b8 <_ZN3cam10stoptakingEv>
     4b8:	e3 ff ff e0 	bi 438 <main+0x160>
					uart_putstr("Home...");
     4bc:	bb 60 08 00 	mv r1,fp
     4c0:	f8 00 01 32 	calli 988 <uart_putstr>
					arm1.home();
     4c4:	37 81 00 50 	addi r1,sp,80
     4c8:	f8 00 02 6b 	calli e74 <_ZN3arm4homeEv>
					arm2.home();
     4cc:	37 81 00 70 	addi r1,sp,112
     4d0:	f8 00 02 69 	calli e74 <_ZN3arm4homeEv>
					arm3.home();
     4d4:	37 81 00 90 	addi r1,sp,144
     4d8:	f8 00 02 67 	calli e74 <_ZN3arm4homeEv>
					arm4.home();
     4dc:	37 81 00 b0 	addi r1,sp,176
     4e0:	f8 00 02 65 	calli e74 <_ZN3arm4homeEv>
					uart_putstr("Ready");
     4e4:	b9 e0 08 00 	mv r1,r15
     4e8:	f8 00 01 28 	calli 988 <uart_putstr>
     4ec:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0xfe){
     4f0:	5c 2d ff de 	bne r1,r13,468 <main+0x190>
					uart_putstr("Init...");
     4f4:	bb 20 08 00 	mv r1,r25
     4f8:	f8 00 01 24 	calli 988 <uart_putstr>
					arm1.init();
     4fc:	37 81 00 50 	addi r1,sp,80
     500:	f8 00 02 44 	calli e10 <_ZN3arm4initEv>
					arm2.init();
     504:	37 81 00 70 	addi r1,sp,112
     508:	f8 00 02 42 	calli e10 <_ZN3arm4initEv>
					arm3.init();
     50c:	37 81 00 90 	addi r1,sp,144
     510:	f8 00 02 40 	calli e10 <_ZN3arm4initEv>
					arm4.init();
     514:	37 81 00 b0 	addi r1,sp,176
     518:	f8 00 02 3e 	calli e10 <_ZN3arm4initEv>
					uart_putstr("Ready");
     51c:	b9 e0 08 00 	mv r1,r15
     520:	f8 00 01 1a 	calli 988 <uart_putstr>
     524:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0xfd){
     528:	34 02 00 fd 	mvi r2,253
     52c:	5c 22 ff d1 	bne r1,r2,470 <main+0x198>
				inst = command_array[2];
     530:	29 82 00 08 	lw r2,(r12+8)
				uart_putstr("Moving...");
     534:	bb 00 08 00 	mv r1,r24
				inst = command_array[2];
     538:	5a 42 00 00 	sw (r18+0),r2
				uart_putstr("Moving...");
     53c:	f8 00 01 13 	calli 988 <uart_putstr>
				if (command_array[1] == 0x01) 
     540:	29 81 00 04 	lw r1,(r12+4)
     544:	34 02 00 01 	mvi r2,1
     548:	44 22 00 65 	be r1,r2,6dc <main+0x404>
				if (command_array[1] == 0x02)
     54c:	34 02 00 02 	mvi r2,2
     550:	44 22 00 56 	be r1,r2,6a8 <main+0x3d0>
				if (command_array[1] == 0x03)
     554:	34 02 00 03 	mvi r2,3
     558:	44 22 00 47 	be r1,r2,674 <main+0x39c>
				if (command_array[1] == 0x04)
     55c:	34 02 00 04 	mvi r2,4
     560:	44 22 00 39 	be r1,r2,644 <main+0x36c>
				uart_putstr("Ready");
     564:	b9 e0 08 00 	mv r1,r15
     568:	f8 00 01 08 	calli 988 <uart_putstr>
     56c:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0xfc){
     570:	34 02 00 fc 	mvi r2,252
     574:	5c 22 ff c1 	bne r1,r2,478 <main+0x1a0>
				val = command_array[3];
     578:	29 82 00 0c 	lw r2,(r12+12)
				br  = command_array[1];
     57c:	29 84 00 04 	lw r4,(r12+4)
				dir = command_array[2];
     580:	29 83 00 08 	lw r3,(r12+8)
				br  = command_array[1];
     584:	78 05 00 00 	mvhi r5,0x0
				uart_putstr("Calibrating...");
     588:	ba e0 08 00 	mv r1,r23
				br  = command_array[1];
     58c:	38 a5 16 60 	ori r5,r5,0x1660
				val = command_array[3];
     590:	5a 02 00 00 	sw (r16+0),r2
				br  = command_array[1];
     594:	58 a4 00 00 	sw (r5+0),r4
				dir = command_array[2];
     598:	5a 23 00 00 	sw (r17+0),r3
				uart_putstr("Calibrating...");
     59c:	f8 00 00 fb 	calli 988 <uart_putstr>
				if (command_array[1] == 0x01)
     5a0:	29 81 00 04 	lw r1,(r12+4)
     5a4:	34 02 00 01 	mvi r2,1
     5a8:	44 22 00 6b 	be r1,r2,754 <main+0x47c>
				if (command_array[1] == 0x02)
     5ac:	34 02 00 02 	mvi r2,2
     5b0:	44 22 00 63 	be r1,r2,73c <main+0x464>
				if (command_array[1] == 0x03)
     5b4:	34 02 00 03 	mvi r2,3
     5b8:	44 22 00 5b 	be r1,r2,724 <main+0x44c>
				if (command_array[1] == 0x04)
     5bc:	34 02 00 04 	mvi r2,4
     5c0:	44 22 00 54 	be r1,r2,710 <main+0x438>
				uart_putstr("Ready");
     5c4:	b9 e0 08 00 	mv r1,r15
     5c8:	f8 00 00 f0 	calli 988 <uart_putstr>
     5cc:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0x50){
     5d0:	34 02 00 50 	mvi r2,80
     5d4:	5c 22 ff ab 	bne r1,r2,480 <main+0x1a8>
				uart_putstr("Reset camera...");
     5d8:	ba c0 08 00 	mv r1,r22
     5dc:	f8 00 00 eb 	calli 988 <uart_putstr>
				camera.reset();
     5e0:	37 81 00 4c 	addi r1,sp,76
     5e4:	f8 00 02 b0 	calli 10a4 <_ZN3cam5resetEv>
     5e8:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0x5a){
     5ec:	34 02 00 5a 	mvi r2,90
     5f0:	5c 22 ff a6 	bne r1,r2,488 <main+0x1b0>
				uart_putstr("Take picture...");
     5f4:	ba a0 08 00 	mv r1,r21
     5f8:	f8 00 00 e4 	calli 988 <uart_putstr>
				camera.takepicture();
     5fc:	37 81 00 4c 	addi r1,sp,76
     600:	f8 00 02 c8 	calli 1120 <_ZN3cam11takepictureEv>
     604:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0x5b){
     608:	34 02 00 5b 	mvi r2,91
     60c:	5c 22 ff a1 	bne r1,r2,490 <main+0x1b8>
				uart_putstr("Get size...");
     610:	ba 80 08 00 	mv r1,r20
     614:	f8 00 00 dd 	calli 988 <uart_putstr>
				camera.getsize();
     618:	37 81 00 4c 	addi r1,sp,76
     61c:	f8 00 02 e9 	calli 11c0 <_ZN3cam7getsizeEv>
     620:	29 81 00 00 	lw r1,(r12+0)
			if (command_array[0] == 0x5c){
     624:	34 02 00 5c 	mvi r2,92
     628:	5c 22 ff 9c 	bne r1,r2,498 <main+0x1c0>
				uart_putstr("Sending...");
     62c:	ba 60 08 00 	mv r1,r19
     630:	f8 00 00 d6 	calli 988 <uart_putstr>
				camera.sendpicture();
     634:	37 81 00 4c 	addi r1,sp,76
     638:	f8 00 03 15 	calli 128c <_ZN3cam11sendpictureEv>
     63c:	29 81 00 00 	lw r1,(r12+0)
     640:	e3 ff ff 96 	bi 498 <main+0x1c0>
					instruccion(arm4,inst);
     644:	42 49 00 03 	lbu r9,(r18+3)
     648:	2b 81 00 b0 	lw r1,(sp+176)
     64c:	2b 82 00 b4 	lw r2,(sp+180)
     650:	2b 83 00 b8 	lw r3,(sp+184)
     654:	2b 84 00 bc 	lw r4,(sp+188)
     658:	2b 85 00 c0 	lw r5,(sp+192)
     65c:	2b 86 00 c4 	lw r6,(sp+196)
     660:	2b 87 00 c8 	lw r7,(sp+200)
     664:	2b 88 00 cc 	lw r8,(sp+204)
     668:	5b 89 00 04 	sw (sp+4),r9
     66c:	fb ff fe e7 	calli 208 <_Z11instruccion3armc>
     670:	e3 ff ff bd 	bi 564 <main+0x28c>
					instruccion(arm3,inst);
     674:	42 49 00 03 	lbu r9,(r18+3)
     678:	2b 81 00 90 	lw r1,(sp+144)
     67c:	2b 82 00 94 	lw r2,(sp+148)
     680:	2b 83 00 98 	lw r3,(sp+152)
     684:	2b 84 00 9c 	lw r4,(sp+156)
     688:	2b 85 00 a0 	lw r5,(sp+160)
     68c:	2b 86 00 a4 	lw r6,(sp+164)
     690:	2b 87 00 a8 	lw r7,(sp+168)
     694:	2b 88 00 ac 	lw r8,(sp+172)
     698:	5b 89 00 04 	sw (sp+4),r9
     69c:	fb ff fe db 	calli 208 <_Z11instruccion3armc>
     6a0:	29 81 00 04 	lw r1,(r12+4)
     6a4:	e3 ff ff ae 	bi 55c <main+0x284>
					instruccion(arm2,inst);
     6a8:	42 49 00 03 	lbu r9,(r18+3)
     6ac:	2b 81 00 70 	lw r1,(sp+112)
     6b0:	2b 82 00 74 	lw r2,(sp+116)
     6b4:	2b 83 00 78 	lw r3,(sp+120)
     6b8:	2b 84 00 7c 	lw r4,(sp+124)
     6bc:	2b 85 00 80 	lw r5,(sp+128)
     6c0:	2b 86 00 84 	lw r6,(sp+132)
     6c4:	2b 87 00 88 	lw r7,(sp+136)
     6c8:	2b 88 00 8c 	lw r8,(sp+140)
     6cc:	5b 89 00 04 	sw (sp+4),r9
     6d0:	fb ff fe ce 	calli 208 <_Z11instruccion3armc>
     6d4:	29 81 00 04 	lw r1,(r12+4)
     6d8:	e3 ff ff 9f 	bi 554 <main+0x27c>
					instruccion(arm1,inst);
     6dc:	42 49 00 03 	lbu r9,(r18+3)
     6e0:	2b 81 00 50 	lw r1,(sp+80)
     6e4:	2b 82 00 54 	lw r2,(sp+84)
     6e8:	2b 83 00 58 	lw r3,(sp+88)
     6ec:	2b 84 00 5c 	lw r4,(sp+92)
     6f0:	2b 85 00 60 	lw r5,(sp+96)
     6f4:	2b 86 00 64 	lw r6,(sp+100)
     6f8:	2b 87 00 68 	lw r7,(sp+104)
     6fc:	2b 88 00 6c 	lw r8,(sp+108)
     700:	5b 89 00 04 	sw (sp+4),r9
     704:	fb ff fe c1 	calli 208 <_Z11instruccion3armc>
     708:	29 81 00 04 	lw r1,(r12+4)
     70c:	e3 ff ff 90 	bi 54c <main+0x274>
					arm4.calib(dir,val);
     710:	2a 03 00 00 	lw r3,(r16+0)
     714:	42 22 00 03 	lbu r2,(r17+3)
     718:	37 81 00 b0 	addi r1,sp,176
     71c:	f8 00 02 4d 	calli 1050 <_ZN3arm5calibEci>
     720:	e3 ff ff a9 	bi 5c4 <main+0x2ec>
					arm3.calib(dir,val);
     724:	2a 03 00 00 	lw r3,(r16+0)
     728:	42 22 00 03 	lbu r2,(r17+3)
     72c:	37 81 00 90 	addi r1,sp,144
     730:	f8 00 02 48 	calli 1050 <_ZN3arm5calibEci>
     734:	29 81 00 04 	lw r1,(r12+4)
     738:	e3 ff ff a1 	bi 5bc <main+0x2e4>
					arm2.calib(dir,val);
     73c:	2a 03 00 00 	lw r3,(r16+0)
     740:	42 22 00 03 	lbu r2,(r17+3)
     744:	37 81 00 70 	addi r1,sp,112
     748:	f8 00 02 42 	calli 1050 <_ZN3arm5calibEci>
     74c:	29 81 00 04 	lw r1,(r12+4)
     750:	e3 ff ff 99 	bi 5b4 <main+0x2dc>
					arm1.calib(dir,val);
     754:	2a 03 00 00 	lw r3,(r16+0)
     758:	42 22 00 03 	lbu r2,(r17+3)
     75c:	37 81 00 50 	addi r1,sp,80
     760:	f8 00 02 3c 	calli 1050 <_ZN3arm5calibEci>
     764:	29 81 00 04 	lw r1,(r12+4)
     768:	e3 ff ff 91 	bi 5ac <main+0x2d4>

0000076c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
     76c:	78 01 00 00 	mvhi r1,0x0
     770:	38 21 15 3c 	ori r1,r1,0x153c
     774:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     778:	78 04 00 00 	mvhi r4,0x0
     77c:	38 84 15 40 	ori r4,r4,0x1540
     780:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
     784:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     788:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
     78c:	34 21 00 01 	addi r1,r1,1
     790:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     794:	34 01 00 0e 	mvi r1,14
     798:	58 61 00 00 	sw (r3+0),r1
}
     79c:	c3 a0 00 00 	ret

000007a0 <isr_null>:
     7a0:	c3 a0 00 00 	ret

000007a4 <irq_handler>:
{
     7a4:	37 9c ff f0 	addi sp,sp,-16
     7a8:	5b 8b 00 10 	sw (sp+16),r11
     7ac:	5b 8c 00 0c 	sw (sp+12),r12
     7b0:	5b 8d 00 08 	sw (sp+8),r13
     7b4:	5b 9d 00 04 	sw (sp+4),ra
     7b8:	78 02 00 00 	mvhi r2,0x0
     7bc:	38 42 15 44 	ori r2,r2,0x1544
     7c0:	28 4b 00 00 	lw r11,(r2+0)
     7c4:	b8 20 60 00 	mv r12,r1
     7c8:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
     7cc:	21 81 00 01 	andi r1,r12,0x1
     7d0:	44 20 00 03 	be r1,r0,7dc <irq_handler+0x38>
     7d4:	29 61 00 00 	lw r1,(r11+0)
     7d8:	d8 20 00 00 	call r1
     7dc:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
     7e0:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
     7e4:	5d ab ff fa 	bne r13,r11,7cc <irq_handler+0x28>
}
     7e8:	2b 9d 00 04 	lw ra,(sp+4)
     7ec:	2b 8b 00 10 	lw r11,(sp+16)
     7f0:	2b 8c 00 0c 	lw r12,(sp+12)
     7f4:	2b 8d 00 08 	lw r13,(sp+8)
     7f8:	37 9c 00 10 	addi sp,sp,16
     7fc:	c3 a0 00 00 	ret

00000800 <isr_init>:
{
     800:	78 02 00 00 	mvhi r2,0x0
     804:	38 42 15 48 	ori r2,r2,0x1548
     808:	28 41 00 00 	lw r1,(r2+0)
     80c:	78 02 00 00 	mvhi r2,0x0
     810:	38 42 15 4c 	ori r2,r2,0x154c
     814:	28 43 00 00 	lw r3,(r2+0)
     818:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
     81c:	58 23 00 00 	sw (r1+0),r3
     820:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
     824:	5c 22 ff fe 	bne r1,r2,81c <isr_init+0x1c>
}
     828:	c3 a0 00 00 	ret

0000082c <isr_register>:
	isr_table[irq] = isr;
     82c:	78 04 00 00 	mvhi r4,0x0
     830:	38 84 15 50 	ori r4,r4,0x1550
     834:	3c 23 00 02 	sli r3,r1,2
     838:	28 81 00 00 	lw r1,(r4+0)
     83c:	b4 23 08 00 	add r1,r1,r3
     840:	58 22 00 00 	sw (r1+0),r2
}
     844:	c3 a0 00 00 	ret

00000848 <isr_unregister>:
	isr_table[irq] = &isr_null;
     848:	78 03 00 00 	mvhi r3,0x0
     84c:	38 63 15 54 	ori r3,r3,0x1554
     850:	3c 22 00 02 	sli r2,r1,2
     854:	28 61 00 00 	lw r1,(r3+0)
     858:	78 03 00 00 	mvhi r3,0x0
     85c:	38 63 15 58 	ori r3,r3,0x1558
     860:	b4 22 08 00 	add r1,r1,r2
     864:	28 62 00 00 	lw r2,(r3+0)
     868:	58 22 00 00 	sw (r1+0),r2
}
     86c:	c3 a0 00 00 	ret

00000870 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
     870:	78 03 00 00 	mvhi r3,0x0
     874:	38 02 86 a0 	mvu r2,0x86a0
     878:	78 42 00 01 	orhi r2,r2,0x1
     87c:	38 63 15 5c 	ori r3,r3,0x155c
     880:	88 22 08 00 	mul r1,r1,r2
     884:	28 62 00 00 	lw r2,(r3+0)
     888:	28 42 00 00 	lw r2,(r2+0)
     88c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     890:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
     894:	34 01 00 08 	mvi r1,8
     898:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
     89c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
     8a0:	20 21 00 01 	andi r1,r1,0x1
     8a4:	44 20 ff fe 	be r1,r0,89c <msleep+0x2c>
}
     8a8:	c3 a0 00 00 	ret

000008ac <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
     8ac:	78 03 00 00 	mvhi r3,0x0
     8b0:	38 63 15 60 	ori r3,r3,0x1560
     8b4:	28 62 00 00 	lw r2,(r3+0)
     8b8:	08 21 00 64 	muli r1,r1,100
     8bc:	28 42 00 00 	lw r2,(r2+0)
     8c0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
     8c4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
     8c8:	34 01 00 08 	mvi r1,8
     8cc:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
     8d0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
     8d4:	20 21 00 01 	andi r1,r1,0x1
     8d8:	44 20 ff fe 	be r1,r0,8d0 <nsleep+0x24>
}
     8dc:	c3 a0 00 00 	ret

000008e0 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
     8e0:	78 02 00 00 	mvhi r2,0x0
     8e4:	38 42 15 64 	ori r2,r2,0x1564
     8e8:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
     8ec:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
     8f0:	34 02 27 10 	mvi r2,10000
     8f4:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
     8f8:	38 63 15 68 	ori r3,r3,0x1568
	timer0->compare0 = (FCPU/10000);
     8fc:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
     900:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
     904:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
     908:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
     90c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     910:	34 02 00 0e 	mvi r2,14
     914:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
     918:	78 02 00 00 	mvhi r2,0x0
     91c:	38 42 15 6c 	ori r2,r2,0x156c
     920:	38 63 15 70 	ori r3,r3,0x1570
     924:	28 41 00 00 	lw r1,(r2+0)
     928:	28 62 00 00 	lw r2,(r3+0)
     92c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
     930:	c3 a0 00 00 	ret

00000934 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
     934:	c3 a0 00 00 	ret

00000938 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
     938:	78 02 00 00 	mvhi r2,0x0
     93c:	38 42 15 74 	ori r2,r2,0x1574
     940:	28 41 00 00 	lw r1,(r2+0)
     944:	28 22 00 00 	lw r2,(r1+0)
     948:	28 41 00 00 	lw r1,(r2+0)
     94c:	20 21 00 01 	andi r1,r1,0x1
     950:	44 20 ff fe 	be r1,r0,948 <uart_getchar+0x10>
	return uart0->rxtx;
     954:	28 41 00 04 	lw r1,(r2+4)
}
     958:	20 21 00 ff 	andi r1,r1,0xff
     95c:	c3 a0 00 00 	ret

00000960 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
     960:	78 03 00 00 	mvhi r3,0x0
     964:	38 63 15 78 	ori r3,r3,0x1578
     968:	28 62 00 00 	lw r2,(r3+0)
{
     96c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
     970:	28 43 00 00 	lw r3,(r2+0)
     974:	28 62 00 00 	lw r2,(r3+0)
     978:	20 42 00 10 	andi r2,r2,0x10
     97c:	5c 40 ff fe 	bne r2,r0,974 <uart_putchar+0x14>
	uart0->rxtx = c;
     980:	58 61 00 04 	sw (r3+4),r1
}
     984:	c3 a0 00 00 	ret

00000988 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
     988:	40 24 00 00 	lbu r4,(r1+0)
     98c:	44 80 00 0c 	be r4,r0,9bc <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
     990:	78 03 00 00 	mvhi r3,0x0
     994:	38 63 15 7c 	ori r3,r3,0x157c
     998:	28 62 00 00 	lw r2,(r3+0)
     99c:	28 43 00 00 	lw r3,(r2+0)
     9a0:	28 62 00 00 	lw r2,(r3+0)
     9a4:	20 42 00 10 	andi r2,r2,0x10
     9a8:	5c 40 ff fe 	bne r2,r0,9a0 <uart_putstr+0x18>
	uart0->rxtx = c;
     9ac:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
     9b0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
     9b4:	40 24 00 00 	lbu r4,(r1+0)
     9b8:	5c 80 ff fa 	bne r4,r0,9a0 <uart_putstr+0x18>
	}
}
     9bc:	c3 a0 00 00 	ret

000009c0 <uart1_init>:
     9c0:	c3 a0 00 00 	ret

000009c4 <uart1_getchar>:
	//uart0->div = (FCPU/(57600*16));
}

char uart1_getchar()
{   
	while (! (uart1->ucr & UART_DR)) ;
     9c4:	78 02 00 00 	mvhi r2,0x0
     9c8:	38 42 15 80 	ori r2,r2,0x1580
     9cc:	28 41 00 00 	lw r1,(r2+0)
     9d0:	28 22 00 00 	lw r2,(r1+0)
     9d4:	28 41 00 00 	lw r1,(r2+0)
     9d8:	20 21 00 01 	andi r1,r1,0x1
     9dc:	44 20 ff fe 	be r1,r0,9d4 <uart1_getchar+0x10>
	return uart1->rxtx;
     9e0:	28 41 00 04 	lw r1,(r2+4)
}
     9e4:	20 21 00 ff 	andi r1,r1,0xff
     9e8:	c3 a0 00 00 	ret

000009ec <uart1_putchar>:

void uart1_putchar(char c)
{
	while (uart1->ucr & UART_BUSY) ;
     9ec:	78 03 00 00 	mvhi r3,0x0
     9f0:	38 63 15 84 	ori r3,r3,0x1584
     9f4:	28 62 00 00 	lw r2,(r3+0)
{
     9f8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
     9fc:	28 43 00 00 	lw r3,(r2+0)
     a00:	28 62 00 00 	lw r2,(r3+0)
     a04:	20 42 00 10 	andi r2,r2,0x10
     a08:	5c 40 ff fe 	bne r2,r0,a00 <uart1_putchar+0x14>
	uart1->rxtx = c;
     a0c:	58 61 00 04 	sw (r3+4),r1
}
     a10:	c3 a0 00 00 	ret

00000a14 <uart1_putstr>:

void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
     a14:	40 24 00 00 	lbu r4,(r1+0)
     a18:	44 80 00 0c 	be r4,r0,a48 <uart1_putstr+0x34>
	while (uart1->ucr & UART_BUSY) ;
     a1c:	78 03 00 00 	mvhi r3,0x0
     a20:	38 63 15 88 	ori r3,r3,0x1588
     a24:	28 62 00 00 	lw r2,(r3+0)
     a28:	28 43 00 00 	lw r3,(r2+0)
     a2c:	28 62 00 00 	lw r2,(r3+0)
     a30:	20 42 00 10 	andi r2,r2,0x10
     a34:	5c 40 ff fe 	bne r2,r0,a2c <uart1_putstr+0x18>
	uart1->rxtx = c;
     a38:	58 64 00 04 	sw (r3+4),r4
		uart1_putchar(*c);
		c++;
     a3c:	34 21 00 01 	addi r1,r1,1
	while(*c) {
     a40:	40 24 00 00 	lbu r4,(r1+0)
     a44:	5c 80 ff fa 	bne r4,r0,a2c <uart1_putstr+0x18>
	}
     a48:	c3 a0 00 00 	ret

00000a4c <_ZN3pwm5pauseEv>:
#include "pwm.h"

void pwm::pause(){
     a4c:	37 9c ff fc 	addi sp,sp,-4
     a50:	5b 9d 00 04 	sw (sp+4),ra

	msleep(1000);
     a54:	34 01 03 e8 	mvi r1,1000
     a58:	fb ff ff 86 	calli 870 <msleep>

};
     a5c:	2b 9d 00 04 	lw ra,(sp+4)
     a60:	37 9c 00 04 	addi sp,sp,4
     a64:	c3 a0 00 00 	ret

00000a68 <_ZN3pwm6pwm_enEij>:
void pwm::pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
     a68:	5c 40 00 08 	bne r2,r0,a88 <_ZN3pwm6pwm_enEij+0x20>
     a6c:	28 24 00 00 	lw r4,(r1+0)
     a70:	58 83 00 00 	sw (r4+0),r3
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
     a74:	34 04 00 05 	mvi r4,5
     a78:	5c 44 00 0d 	bne r2,r4,aac <_ZN3pwm6pwm_enEij+0x44>
     a7c:	28 21 00 00 	lw r1,(r1+0)
     a80:	58 23 00 3c 	sw (r1+60),r3
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

};
     a84:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
     a88:	34 04 00 01 	mvi r4,1
     a8c:	5c 44 00 04 	bne r2,r4,a9c <_ZN3pwm6pwm_enEij+0x34>
     a90:	28 24 00 00 	lw r4,(r1+0)
     a94:	58 83 00 0c 	sw (r4+12),r3
     a98:	e3 ff ff f7 	bi a74 <_ZN3pwm6pwm_enEij+0xc>
	if(sel == 2) pwm0->en2 = val;
     a9c:	34 04 00 02 	mvi r4,2
     aa0:	5c 44 00 08 	bne r2,r4,ac0 <_ZN3pwm6pwm_enEij+0x58>
     aa4:	28 24 00 00 	lw r4,(r1+0)
     aa8:	58 83 00 18 	sw (r4+24),r3
	if(sel == 6) pwm0->en6 = val;
     aac:	34 04 00 06 	mvi r4,6
     ab0:	5c 44 00 08 	bne r2,r4,ad0 <_ZN3pwm6pwm_enEij+0x68>
     ab4:	28 21 00 00 	lw r1,(r1+0)
     ab8:	58 23 00 48 	sw (r1+72),r3
};
     abc:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
     ac0:	34 04 00 03 	mvi r4,3
     ac4:	5c 44 00 08 	bne r2,r4,ae4 <_ZN3pwm6pwm_enEij+0x7c>
     ac8:	28 24 00 00 	lw r4,(r1+0)
     acc:	58 83 00 24 	sw (r4+36),r3
	if(sel == 7) pwm0->en7 = val;
     ad0:	34 04 00 07 	mvi r4,7
     ad4:	5c 44 ff ec 	bne r2,r4,a84 <_ZN3pwm6pwm_enEij+0x1c>
     ad8:	28 21 00 00 	lw r1,(r1+0)
     adc:	58 23 00 54 	sw (r1+84),r3
};
     ae0:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
     ae4:	34 04 00 04 	mvi r4,4
     ae8:	5c 44 ff e3 	bne r2,r4,a74 <_ZN3pwm6pwm_enEij+0xc>
     aec:	28 21 00 00 	lw r1,(r1+0)
     af0:	58 23 00 30 	sw (r1+48),r3
};
     af4:	c3 a0 00 00 	ret

00000af8 <_ZN3pwm8pwm_dutyEij>:

void pwm::pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
     af8:	5c 40 00 08 	bne r2,r0,b18 <_ZN3pwm8pwm_dutyEij+0x20>
     afc:	28 24 00 00 	lw r4,(r1+0)
     b00:	58 83 00 08 	sw (r4+8),r3
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
     b04:	34 04 00 05 	mvi r4,5
     b08:	5c 44 00 0d 	bne r2,r4,b3c <_ZN3pwm8pwm_dutyEij+0x44>
     b0c:	28 21 00 00 	lw r1,(r1+0)
     b10:	58 23 00 44 	sw (r1+68),r3
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

};
     b14:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
     b18:	34 04 00 01 	mvi r4,1
     b1c:	5c 44 00 04 	bne r2,r4,b2c <_ZN3pwm8pwm_dutyEij+0x34>
     b20:	28 24 00 00 	lw r4,(r1+0)
     b24:	58 83 00 14 	sw (r4+20),r3
     b28:	e3 ff ff f7 	bi b04 <_ZN3pwm8pwm_dutyEij+0xc>
	if(sel == 2) pwm0->duty2 = val;
     b2c:	34 04 00 02 	mvi r4,2
     b30:	5c 44 00 08 	bne r2,r4,b50 <_ZN3pwm8pwm_dutyEij+0x58>
     b34:	28 24 00 00 	lw r4,(r1+0)
     b38:	58 83 00 20 	sw (r4+32),r3
	if(sel == 6) pwm0->duty6 = val;
     b3c:	34 04 00 06 	mvi r4,6
     b40:	5c 44 00 08 	bne r2,r4,b60 <_ZN3pwm8pwm_dutyEij+0x68>
     b44:	28 21 00 00 	lw r1,(r1+0)
     b48:	58 23 00 50 	sw (r1+80),r3
};
     b4c:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
     b50:	34 04 00 03 	mvi r4,3
     b54:	5c 44 00 08 	bne r2,r4,b74 <_ZN3pwm8pwm_dutyEij+0x7c>
     b58:	28 24 00 00 	lw r4,(r1+0)
     b5c:	58 83 00 2c 	sw (r4+44),r3
	if(sel == 7) pwm0->duty7 = val;
     b60:	34 04 00 07 	mvi r4,7
     b64:	5c 44 ff ec 	bne r2,r4,b14 <_ZN3pwm8pwm_dutyEij+0x1c>
     b68:	28 21 00 00 	lw r1,(r1+0)
     b6c:	58 23 00 5c 	sw (r1+92),r3
};
     b70:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
     b74:	34 04 00 04 	mvi r4,4
     b78:	5c 44 ff e3 	bne r2,r4,b04 <_ZN3pwm8pwm_dutyEij+0xc>
     b7c:	28 21 00 00 	lw r1,(r1+0)
     b80:	58 23 00 38 	sw (r1+56),r3
};
     b84:	c3 a0 00 00 	ret

00000b88 <_ZN3pwm10pwm_periodEij>:

void pwm::pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
     b88:	5c 40 00 08 	bne r2,r0,ba8 <_ZN3pwm10pwm_periodEij+0x20>
     b8c:	28 24 00 00 	lw r4,(r1+0)
     b90:	58 83 00 04 	sw (r4+4),r3
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
     b94:	34 04 00 05 	mvi r4,5
     b98:	5c 44 00 0d 	bne r2,r4,bcc <_ZN3pwm10pwm_periodEij+0x44>
     b9c:	28 21 00 00 	lw r1,(r1+0)
     ba0:	58 23 00 40 	sw (r1+64),r3
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

};
     ba4:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
     ba8:	34 04 00 01 	mvi r4,1
     bac:	5c 44 00 04 	bne r2,r4,bbc <_ZN3pwm10pwm_periodEij+0x34>
     bb0:	28 24 00 00 	lw r4,(r1+0)
     bb4:	58 83 00 10 	sw (r4+16),r3
     bb8:	e3 ff ff f7 	bi b94 <_ZN3pwm10pwm_periodEij+0xc>
	if(sel == 2) pwm0->period2 = val;
     bbc:	34 04 00 02 	mvi r4,2
     bc0:	5c 44 00 08 	bne r2,r4,be0 <_ZN3pwm10pwm_periodEij+0x58>
     bc4:	28 24 00 00 	lw r4,(r1+0)
     bc8:	58 83 00 1c 	sw (r4+28),r3
	if(sel == 6) pwm0->period6 = val;
     bcc:	34 04 00 06 	mvi r4,6
     bd0:	5c 44 00 08 	bne r2,r4,bf0 <_ZN3pwm10pwm_periodEij+0x68>
     bd4:	28 21 00 00 	lw r1,(r1+0)
     bd8:	58 23 00 4c 	sw (r1+76),r3
};
     bdc:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
     be0:	34 04 00 03 	mvi r4,3
     be4:	5c 44 00 08 	bne r2,r4,c04 <_ZN3pwm10pwm_periodEij+0x7c>
     be8:	28 24 00 00 	lw r4,(r1+0)
     bec:	58 83 00 28 	sw (r4+40),r3
	if(sel == 7) pwm0->period7 = val;
     bf0:	34 04 00 07 	mvi r4,7
     bf4:	5c 44 ff ec 	bne r2,r4,ba4 <_ZN3pwm10pwm_periodEij+0x1c>
     bf8:	28 21 00 00 	lw r1,(r1+0)
     bfc:	58 23 00 58 	sw (r1+88),r3
};
     c00:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
     c04:	34 04 00 04 	mvi r4,4
     c08:	5c 44 ff e3 	bne r2,r4,b94 <_ZN3pwm10pwm_periodEij+0xc>
     c0c:	28 21 00 00 	lw r1,(r1+0)
     c10:	58 23 00 34 	sw (r1+52),r3
};
     c14:	c3 a0 00 00 	ret

00000c18 <_ZN3pwm9pwm_getenEj>:

uint32_t pwm::pwm_geten(uint32_t sel){
     c18:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->en0;
     c1c:	44 40 00 11 	be r2,r0,c60 <_ZN3pwm9pwm_getenEj+0x48>
	if(sel == 1) return pwm0->en1;
     c20:	34 01 00 01 	mvi r1,1
     c24:	44 41 00 12 	be r2,r1,c6c <_ZN3pwm9pwm_getenEj+0x54>
	if(sel == 2) return pwm0->en2;
     c28:	34 01 00 02 	mvi r1,2
     c2c:	44 41 00 16 	be r2,r1,c84 <_ZN3pwm9pwm_getenEj+0x6c>
	if(sel == 3) return pwm0->en3;
     c30:	34 01 00 03 	mvi r1,3
     c34:	44 41 00 11 	be r2,r1,c78 <_ZN3pwm9pwm_getenEj+0x60>
	if(sel == 4) return pwm0->en4;
     c38:	34 01 00 04 	mvi r1,4
     c3c:	44 41 00 15 	be r2,r1,c90 <_ZN3pwm9pwm_getenEj+0x78>
	if(sel == 5) return pwm0->en5;
     c40:	34 01 00 05 	mvi r1,5
     c44:	44 41 00 19 	be r2,r1,ca8 <_ZN3pwm9pwm_getenEj+0x90>
	if(sel == 6) return pwm0->en6;
     c48:	34 01 00 06 	mvi r1,6
     c4c:	44 41 00 1a 	be r2,r1,cb4 <_ZN3pwm9pwm_getenEj+0x9c>
	if(sel == 7) return pwm0->en7;
     c50:	34 04 00 07 	mvi r4,7
	return 0;
     c54:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->en7;
     c58:	44 44 00 11 	be r2,r4,c9c <_ZN3pwm9pwm_getenEj+0x84>

};
     c5c:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->en0;
     c60:	28 21 00 00 	lw r1,(r1+0)
     c64:	28 21 00 00 	lw r1,(r1+0)
};
     c68:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
     c6c:	28 61 00 00 	lw r1,(r3+0)
     c70:	28 21 00 0c 	lw r1,(r1+12)
};
     c74:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
     c78:	28 61 00 00 	lw r1,(r3+0)
     c7c:	28 21 00 24 	lw r1,(r1+36)
};
     c80:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
     c84:	28 61 00 00 	lw r1,(r3+0)
     c88:	28 21 00 18 	lw r1,(r1+24)
};
     c8c:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
     c90:	28 61 00 00 	lw r1,(r3+0)
     c94:	28 21 00 30 	lw r1,(r1+48)
};
     c98:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->en7;
     c9c:	28 61 00 00 	lw r1,(r3+0)
     ca0:	28 21 00 54 	lw r1,(r1+84)
};
     ca4:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
     ca8:	28 61 00 00 	lw r1,(r3+0)
     cac:	28 21 00 3c 	lw r1,(r1+60)
};
     cb0:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
     cb4:	28 61 00 00 	lw r1,(r3+0)
     cb8:	28 21 00 48 	lw r1,(r1+72)
};
     cbc:	c3 a0 00 00 	ret

00000cc0 <_ZN3pwm11pwm_getdutyEj>:

uint32_t pwm::pwm_getduty(uint32_t sel){
     cc0:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->duty0;
     cc4:	44 40 00 11 	be r2,r0,d08 <_ZN3pwm11pwm_getdutyEj+0x48>
	if(sel == 1) return pwm0->duty1;
     cc8:	34 01 00 01 	mvi r1,1
     ccc:	44 41 00 12 	be r2,r1,d14 <_ZN3pwm11pwm_getdutyEj+0x54>
	if(sel == 2) return pwm0->duty2;
     cd0:	34 01 00 02 	mvi r1,2
     cd4:	44 41 00 16 	be r2,r1,d2c <_ZN3pwm11pwm_getdutyEj+0x6c>
	if(sel == 3) return pwm0->duty3;
     cd8:	34 01 00 03 	mvi r1,3
     cdc:	44 41 00 11 	be r2,r1,d20 <_ZN3pwm11pwm_getdutyEj+0x60>
	if(sel == 4) return pwm0->duty4;
     ce0:	34 01 00 04 	mvi r1,4
     ce4:	44 41 00 15 	be r2,r1,d38 <_ZN3pwm11pwm_getdutyEj+0x78>
	if(sel == 5) return pwm0->duty5;
     ce8:	34 01 00 05 	mvi r1,5
     cec:	44 41 00 19 	be r2,r1,d50 <_ZN3pwm11pwm_getdutyEj+0x90>
	if(sel == 6) return pwm0->duty6;
     cf0:	34 01 00 06 	mvi r1,6
     cf4:	44 41 00 1a 	be r2,r1,d5c <_ZN3pwm11pwm_getdutyEj+0x9c>
	if(sel == 7) return pwm0->duty7;
     cf8:	34 04 00 07 	mvi r4,7
	return 0;
     cfc:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->duty7;
     d00:	44 44 00 11 	be r2,r4,d44 <_ZN3pwm11pwm_getdutyEj+0x84>
	
};
     d04:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->duty0;
     d08:	28 21 00 00 	lw r1,(r1+0)
     d0c:	28 21 00 08 	lw r1,(r1+8)
};
     d10:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
     d14:	28 61 00 00 	lw r1,(r3+0)
     d18:	28 21 00 14 	lw r1,(r1+20)
};
     d1c:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
     d20:	28 61 00 00 	lw r1,(r3+0)
     d24:	28 21 00 2c 	lw r1,(r1+44)
};
     d28:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
     d2c:	28 61 00 00 	lw r1,(r3+0)
     d30:	28 21 00 20 	lw r1,(r1+32)
};
     d34:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
     d38:	28 61 00 00 	lw r1,(r3+0)
     d3c:	28 21 00 38 	lw r1,(r1+56)
};
     d40:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->duty7;
     d44:	28 61 00 00 	lw r1,(r3+0)
     d48:	28 21 00 5c 	lw r1,(r1+92)
};
     d4c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
     d50:	28 61 00 00 	lw r1,(r3+0)
     d54:	28 21 00 44 	lw r1,(r1+68)
};
     d58:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
     d5c:	28 61 00 00 	lw r1,(r3+0)
     d60:	28 21 00 50 	lw r1,(r1+80)
};
     d64:	c3 a0 00 00 	ret

00000d68 <_ZN3pwm13pwm_getperiodEj>:

uint32_t pwm::pwm_getperiod(uint32_t sel){
     d68:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->period0;
     d6c:	44 40 00 11 	be r2,r0,db0 <_ZN3pwm13pwm_getperiodEj+0x48>
	if(sel == 1) return pwm0->period1;
     d70:	34 01 00 01 	mvi r1,1
     d74:	44 41 00 12 	be r2,r1,dbc <_ZN3pwm13pwm_getperiodEj+0x54>
	if(sel == 2) return pwm0->period2;
     d78:	34 01 00 02 	mvi r1,2
     d7c:	44 41 00 16 	be r2,r1,dd4 <_ZN3pwm13pwm_getperiodEj+0x6c>
	if(sel == 3) return pwm0->period3;
     d80:	34 01 00 03 	mvi r1,3
     d84:	44 41 00 11 	be r2,r1,dc8 <_ZN3pwm13pwm_getperiodEj+0x60>
	if(sel == 4) return pwm0->period4;
     d88:	34 01 00 04 	mvi r1,4
     d8c:	44 41 00 15 	be r2,r1,de0 <_ZN3pwm13pwm_getperiodEj+0x78>
	if(sel == 5) return pwm0->period5;
     d90:	34 01 00 05 	mvi r1,5
     d94:	44 41 00 19 	be r2,r1,df8 <_ZN3pwm13pwm_getperiodEj+0x90>
	if(sel == 6) return pwm0->period6;
     d98:	34 01 00 06 	mvi r1,6
     d9c:	44 41 00 1a 	be r2,r1,e04 <_ZN3pwm13pwm_getperiodEj+0x9c>
	if(sel == 7) return pwm0->period7;
     da0:	34 04 00 07 	mvi r4,7
	return 0;
     da4:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->period7;
     da8:	44 44 00 11 	be r2,r4,dec <_ZN3pwm13pwm_getperiodEj+0x84>
	
     dac:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->period0;
     db0:	28 21 00 00 	lw r1,(r1+0)
     db4:	28 21 00 04 	lw r1,(r1+4)
     db8:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
     dbc:	28 61 00 00 	lw r1,(r3+0)
     dc0:	28 21 00 10 	lw r1,(r1+16)
     dc4:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
     dc8:	28 61 00 00 	lw r1,(r3+0)
     dcc:	28 21 00 28 	lw r1,(r1+40)
     dd0:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
     dd4:	28 61 00 00 	lw r1,(r3+0)
     dd8:	28 21 00 1c 	lw r1,(r1+28)
     ddc:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
     de0:	28 61 00 00 	lw r1,(r3+0)
     de4:	28 21 00 34 	lw r1,(r1+52)
     de8:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->period7;
     dec:	28 61 00 00 	lw r1,(r3+0)
     df0:	28 21 00 58 	lw r1,(r1+88)
     df4:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
     df8:	28 61 00 00 	lw r1,(r3+0)
     dfc:	28 21 00 40 	lw r1,(r1+64)
     e00:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
     e04:	28 61 00 00 	lw r1,(r3+0)
     e08:	28 21 00 4c 	lw r1,(r1+76)
     e0c:	c3 a0 00 00 	ret

00000e10 <_ZN3arm4initEv>:
#include "servos.h"

void arm::init(){
     e10:	37 9c ff f8 	addi sp,sp,-8
     e14:	5b 8b 00 08 	sw (sp+8),r11
     e18:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,atr);
     e1c:	28 23 00 18 	lw r3,(r1+24)
     e20:	28 22 00 08 	lw r2,(r1+8)
void arm::init(){
     e24:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,atr);
     e28:	fb ff ff 34 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     e2c:	b9 60 08 00 	mv r1,r11
     e30:	fb ff ff 07 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
     e34:	29 63 00 14 	lw r3,(r11+20)
     e38:	29 62 00 04 	lw r2,(r11+4)
     e3c:	b9 60 08 00 	mv r1,r11
     e40:	fb ff ff 2e 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     e44:	b9 60 08 00 	mv r1,r11
     e48:	fb ff ff 01 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
     e4c:	29 63 00 1c 	lw r3,(r11+28)
     e50:	29 62 00 08 	lw r2,(r11+8)
     e54:	b9 60 08 00 	mv r1,r11
     e58:	fb ff ff 28 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     e5c:	b9 60 08 00 	mv r1,r11
     e60:	fb ff fe fb 	calli a4c <_ZN3pwm5pauseEv>
};
     e64:	2b 9d 00 04 	lw ra,(sp+4)
     e68:	2b 8b 00 08 	lw r11,(sp+8)
     e6c:	37 9c 00 08 	addi sp,sp,8
     e70:	c3 a0 00 00 	ret

00000e74 <_ZN3arm4homeEv>:

void arm::home(){
     e74:	37 9c ff f8 	addi sp,sp,-8
     e78:	5b 8b 00 08 	sw (sp+8),r11
     e7c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,atr);
     e80:	28 23 00 18 	lw r3,(r1+24)
     e84:	28 22 00 08 	lw r2,(r1+8)
void arm::home(){
     e88:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,atr);
     e8c:	fb ff ff 1b 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     e90:	b9 60 08 00 	mv r1,r11
     e94:	fb ff fe ee 	calli a4c <_ZN3pwm5pauseEv>
};
     e98:	2b 9d 00 04 	lw ra,(sp+4)
     e9c:	2b 8b 00 08 	lw r11,(sp+8)
     ea0:	37 9c 00 08 	addi sp,sp,8
     ea4:	c3 a0 00 00 	ret

00000ea8 <_ZN3arm7derechaEv>:

void arm::derecha(){
     ea8:	37 9c ff f8 	addi sp,sp,-8
     eac:	5b 8b 00 08 	sw (sp+8),r11
     eb0:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,der);
     eb4:	28 23 00 0c 	lw r3,(r1+12)
     eb8:	28 22 00 04 	lw r2,(r1+4)
void arm::derecha(){
     ebc:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,der);
     ec0:	fb ff ff 0e 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     ec4:	b9 60 08 00 	mv r1,r11
     ec8:	fb ff fe e1 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv2,atr);
     ecc:	29 63 00 18 	lw r3,(r11+24)
     ed0:	29 62 00 08 	lw r2,(r11+8)
     ed4:	b9 60 08 00 	mv r1,r11
     ed8:	fb ff ff 08 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     edc:	b9 60 08 00 	mv r1,r11
     ee0:	fb ff fe db 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
     ee4:	29 63 00 14 	lw r3,(r11+20)
     ee8:	29 62 00 04 	lw r2,(r11+4)
     eec:	b9 60 08 00 	mv r1,r11
     ef0:	fb ff ff 02 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     ef4:	b9 60 08 00 	mv r1,r11
     ef8:	fb ff fe d5 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
     efc:	29 63 00 1c 	lw r3,(r11+28)
     f00:	29 62 00 08 	lw r2,(r11+8)
     f04:	b9 60 08 00 	mv r1,r11
     f08:	fb ff fe fc 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     f0c:	b9 60 08 00 	mv r1,r11
     f10:	fb ff fe cf 	calli a4c <_ZN3pwm5pauseEv>
};
     f14:	2b 9d 00 04 	lw ra,(sp+4)
     f18:	2b 8b 00 08 	lw r11,(sp+8)
     f1c:	37 9c 00 08 	addi sp,sp,8
     f20:	c3 a0 00 00 	ret

00000f24 <_ZN3arm9izquierdaEv>:

void arm::izquierda(){
     f24:	37 9c ff f8 	addi sp,sp,-8
     f28:	5b 8b 00 08 	sw (sp+8),r11
     f2c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,iz);
     f30:	28 23 00 10 	lw r3,(r1+16)
     f34:	28 22 00 04 	lw r2,(r1+4)
void arm::izquierda(){
     f38:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,iz);
     f3c:	fb ff fe ef 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     f40:	b9 60 08 00 	mv r1,r11
     f44:	fb ff fe c2 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv2,atr);
     f48:	29 63 00 18 	lw r3,(r11+24)
     f4c:	29 62 00 08 	lw r2,(r11+8)
     f50:	b9 60 08 00 	mv r1,r11
     f54:	fb ff fe e9 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     f58:	b9 60 08 00 	mv r1,r11
     f5c:	fb ff fe bc 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
     f60:	29 63 00 14 	lw r3,(r11+20)
     f64:	29 62 00 04 	lw r2,(r11+4)
     f68:	b9 60 08 00 	mv r1,r11
     f6c:	fb ff fe e3 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     f70:	b9 60 08 00 	mv r1,r11
     f74:	fb ff fe b6 	calli a4c <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
     f78:	29 63 00 1c 	lw r3,(r11+28)
     f7c:	29 62 00 08 	lw r2,(r11+8)
     f80:	b9 60 08 00 	mv r1,r11
     f84:	fb ff fe dd 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pause();
     f88:	b9 60 08 00 	mv r1,r11
     f8c:	fb ff fe b0 	calli a4c <_ZN3pwm5pauseEv>
};
     f90:	2b 9d 00 04 	lw ra,(sp+4)
     f94:	2b 8b 00 08 	lw r11,(sp+8)
     f98:	37 9c 00 08 	addi sp,sp,8
     f9c:	c3 a0 00 00 	ret

00000fa0 <_ZN3arm8set_servEii>:

void arm::set_serv(int x,int y){
     fa0:	37 9c ff f8 	addi sp,sp,-8
     fa4:	5b 8b 00 08 	sw (sp+8),r11
     fa8:	5b 9d 00 04 	sw (sp+4),ra
	serv1 = x;
	serv2 = y;

	der = DER;
	iz  = IZ;
     fac:	34 04 00 05 	mvi r4,5
     fb0:	58 24 00 10 	sw (r1+16),r4
	mid = MID;
     fb4:	34 04 00 0d 	mvi r4,13
     fb8:	58 24 00 14 	sw (r1+20),r4

	atr = ATR;
     fbc:	34 04 00 12 	mvi r4,18
	serv2 = y;
     fc0:	58 23 00 08 	sw (r1+8),r3
	atr = ATR;
     fc4:	58 24 00 18 	sw (r1+24),r4
	der = DER;
     fc8:	34 03 00 19 	mvi r3,25
	ade = ADE;
     fcc:	34 04 00 0c 	mvi r4,12
     fd0:	58 24 00 1c 	sw (r1+28),r4
	serv1 = x;
     fd4:	58 22 00 04 	sw (r1+4),r2
	der = DER;
     fd8:	58 23 00 0c 	sw (r1+12),r3

	pwm_period(serv1,200);
     fdc:	34 03 00 c8 	mvi r3,200
void arm::set_serv(int x,int y){
     fe0:	b8 20 58 00 	mv r11,r1
	pwm_period(serv1,200);
     fe4:	fb ff fe e9 	calli b88 <_ZN3pwm10pwm_periodEij>
	pwm_period(serv2,200);
     fe8:	29 62 00 08 	lw r2,(r11+8)
     fec:	b9 60 08 00 	mv r1,r11
     ff0:	34 03 00 c8 	mvi r3,200
     ff4:	fb ff fe e5 	calli b88 <_ZN3pwm10pwm_periodEij>
	pwm_duty(serv1,mid);
     ff8:	29 63 00 14 	lw r3,(r11+20)
     ffc:	29 62 00 04 	lw r2,(r11+4)
    1000:	b9 60 08 00 	mv r1,r11
    1004:	fb ff fe bd 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pwm_duty(serv2,atr);
    1008:	29 63 00 18 	lw r3,(r11+24)
    100c:	29 62 00 08 	lw r2,(r11+8)
    1010:	b9 60 08 00 	mv r1,r11
    1014:	fb ff fe b9 	calli af8 <_ZN3pwm8pwm_dutyEij>
	pwm_en(serv1,1);
    1018:	29 62 00 04 	lw r2,(r11+4)
    101c:	b9 60 08 00 	mv r1,r11
    1020:	34 03 00 01 	mvi r3,1
    1024:	fb ff fe 91 	calli a68 <_ZN3pwm6pwm_enEij>
	pwm_en(serv2,1);
    1028:	29 62 00 08 	lw r2,(r11+8)
    102c:	34 03 00 01 	mvi r3,1
    1030:	b9 60 08 00 	mv r1,r11
    1034:	fb ff fe 8d 	calli a68 <_ZN3pwm6pwm_enEij>
	pause();
    1038:	b9 60 08 00 	mv r1,r11
    103c:	fb ff fe 84 	calli a4c <_ZN3pwm5pauseEv>
};
    1040:	2b 9d 00 04 	lw ra,(sp+4)
    1044:	2b 8b 00 08 	lw r11,(sp+8)
    1048:	37 9c 00 08 	addi sp,sp,8
    104c:	c3 a0 00 00 	ret

00001050 <_ZN3arm5calibEci>:

void arm::calib(char dir,int val){
    1050:	20 42 00 ff 	andi r2,r2,0xff
	if(dir == 0x20){
    1054:	34 04 00 20 	mvi r4,32
    1058:	44 44 00 09 	be r2,r4,107c <_ZN3arm5calibEci+0x2c>
		der = val;
	}
	if(dir == 0x21){
    105c:	34 04 00 21 	mvi r4,33
    1060:	5c 44 00 03 	bne r2,r4,106c <_ZN3arm5calibEci+0x1c>
		iz = val;
    1064:	58 23 00 10 	sw (r1+16),r3
		atr = val;
	}
	if(dir == 0x24){
		ade = val;
	}
};
    1068:	c3 a0 00 00 	ret
	if(dir == 0x22){
    106c:	34 04 00 22 	mvi r4,34
    1070:	5c 44 00 05 	bne r2,r4,1084 <_ZN3arm5calibEci+0x34>
		mid = val;
    1074:	58 23 00 14 	sw (r1+20),r3
};
    1078:	c3 a0 00 00 	ret
		der = val;
    107c:	58 23 00 0c 	sw (r1+12),r3
};
    1080:	c3 a0 00 00 	ret
	if(dir == 0x23){
    1084:	34 04 00 23 	mvi r4,35
    1088:	5c 44 00 03 	bne r2,r4,1094 <_ZN3arm5calibEci+0x44>
		atr = val;
    108c:	58 23 00 18 	sw (r1+24),r3
};
    1090:	c3 a0 00 00 	ret
	if(dir == 0x24){
    1094:	34 04 00 24 	mvi r4,36
    1098:	5c 44 ff f4 	bne r2,r4,1068 <_ZN3arm5calibEci+0x18>
		ade = val;
    109c:	58 23 00 1c 	sw (r1+28),r3
};
    10a0:	e3 ff ff f2 	bi 1068 <_ZN3arm5calibEci+0x18>

000010a4 <_ZN3cam5resetEv>:
#pragma GCC diagnostic ignored "-Wwrite-strings"
#include "cam.h"

void cam::reset(){
    10a4:	37 9c ff f4 	addi sp,sp,-12
    10a8:	5b 8b 00 0c 	sw (sp+12),r11
    10ac:	5b 8c 00 08 	sw (sp+8),r12
    10b0:	5b 9d 00 04 	sw (sp+4),ra

	char R1;
	char R2;

	for(int i = 0;i < 4;i++){
		uart1_putchar(RESET_CAMERA[i]);
    10b4:	34 01 00 56 	mvi r1,86
    10b8:	fb ff fe 4d 	calli 9ec <uart1_putchar>
    10bc:	34 01 00 00 	mvi r1,0
    10c0:	fb ff fe 4b 	calli 9ec <uart1_putchar>
    10c4:	34 01 00 26 	mvi r1,38
    10c8:	fb ff fe 49 	calli 9ec <uart1_putchar>
    10cc:	34 01 00 00 	mvi r1,0
    10d0:	fb ff fe 47 	calli 9ec <uart1_putchar>
	}

	R1 = uart1_getchar();
    10d4:	fb ff fe 3c 	calli 9c4 <uart1_getchar>
    10d8:	b8 20 60 00 	mv r12,r1
    10dc:	34 0b 00 46 	mvi r11,70
    10e0:	35 6b ff ff 	addi r11,r11,-1

	for(int i = 0;i < 70;i++){
		R2 = uart1_getchar();
    10e4:	fb ff fe 38 	calli 9c4 <uart1_getchar>
	for(int i = 0;i < 70;i++){
    10e8:	5d 60 ff fe 	bne r11,r0,10e0 <_ZN3cam5resetEv+0x3c>
	}

	if(R1 == 0x76 && R2 == 0x0a){
    10ec:	65 8c 00 76 	cmpei r12,r12,118
    10f0:	64 21 00 0a 	cmpei r1,r1,10
    10f4:	a1 81 08 00 	and r1,r12,r1
    10f8:	44 20 00 05 	be r1,r0,110c <_ZN3cam5resetEv+0x68>
		uart_putstr("Ok");
    10fc:	78 02 00 00 	mvhi r2,0x0
    1100:	38 42 15 a0 	ori r2,r2,0x15a0
    1104:	28 41 00 00 	lw r1,(r2+0)
    1108:	fb ff fe 20 	calli 988 <uart_putstr>
	}
	

};
    110c:	2b 9d 00 04 	lw ra,(sp+4)
    1110:	2b 8b 00 0c 	lw r11,(sp+12)
    1114:	2b 8c 00 08 	lw r12,(sp+8)
    1118:	37 9c 00 0c 	addi sp,sp,12
    111c:	c3 a0 00 00 	ret

00001120 <_ZN3cam11takepictureEv>:

void cam::takepicture(){
    1120:	37 9c ff e0 	addi sp,sp,-32
    1124:	5b 8b 00 0c 	sw (sp+12),r11
    1128:	5b 8c 00 08 	sw (sp+8),r12
    112c:	5b 9d 00 04 	sw (sp+4),ra
    1130:	78 01 00 00 	mvhi r1,0x0
    1134:	38 21 15 a4 	ori r1,r1,0x15a4
    1138:	28 2b 00 00 	lw r11,(r1+0)
    113c:	34 01 00 56 	mvi r1,86

	uint32_t Z [5];

	for(int i = 0;i < 5;i++){
		uart1_putchar(TAKE_PICTURE[i]);
    1140:	20 21 00 ff 	andi r1,r1,0xff
    1144:	35 6c 00 14 	addi r12,r11,20
    1148:	35 6b 00 04 	addi r11,r11,4
    114c:	fb ff fe 28 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1150:	45 6c 00 06 	be r11,r12,1168 <_ZN3cam11takepictureEv+0x48>
    1154:	29 61 00 00 	lw r1,(r11+0)
    1158:	35 6b 00 04 	addi r11,r11,4
		uart1_putchar(TAKE_PICTURE[i]);
    115c:	20 21 00 ff 	andi r1,r1,0xff
    1160:	fb ff fe 23 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 5;i++){
    1164:	5d 6c ff fc 	bne r11,r12,1154 <_ZN3cam11takepictureEv+0x34>
    1168:	37 8b 00 10 	addi r11,sp,16
    116c:	37 8c 00 24 	addi r12,sp,36
	}

	for(int i = 0;i < 5;i++){
		Z[i] = uart1_getchar();
    1170:	fb ff fe 15 	calli 9c4 <uart1_getchar>
    1174:	59 61 00 00 	sw (r11+0),r1
    1178:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 5;i++){
    117c:	5d 6c ff fd 	bne r11,r12,1170 <_ZN3cam11takepictureEv+0x50>
	}


	if(Z[0] == 0x76 && Z[2] == 0x36){
    1180:	2b 82 00 10 	lw r2,(sp+16)
    1184:	34 01 00 76 	mvi r1,118
    1188:	44 41 00 06 	be r2,r1,11a0 <_ZN3cam11takepictureEv+0x80>
		uart_putstr("Ok");	}

};
    118c:	2b 9d 00 04 	lw ra,(sp+4)
    1190:	2b 8b 00 0c 	lw r11,(sp+12)
    1194:	2b 8c 00 08 	lw r12,(sp+8)
    1198:	37 9c 00 20 	addi sp,sp,32
    119c:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x36){
    11a0:	2b 82 00 18 	lw r2,(sp+24)
    11a4:	34 01 00 36 	mvi r1,54
    11a8:	5c 41 ff f9 	bne r2,r1,118c <_ZN3cam11takepictureEv+0x6c>
		uart_putstr("Ok");	}
    11ac:	78 02 00 00 	mvhi r2,0x0
    11b0:	38 42 15 a8 	ori r2,r2,0x15a8
    11b4:	28 41 00 00 	lw r1,(r2+0)
    11b8:	fb ff fd f4 	calli 988 <uart_putstr>
};
    11bc:	e3 ff ff f4 	bi 118c <_ZN3cam11takepictureEv+0x6c>

000011c0 <_ZN3cam7getsizeEv>:

void cam::getsize(){
    11c0:	37 9c ff cc 	addi sp,sp,-52
    11c4:	5b 8b 00 10 	sw (sp+16),r11
    11c8:	5b 8c 00 0c 	sw (sp+12),r12
    11cc:	5b 8d 00 08 	sw (sp+8),r13
    11d0:	5b 9d 00 04 	sw (sp+4),ra
    11d4:	78 02 00 00 	mvhi r2,0x0
    11d8:	38 42 15 ac 	ori r2,r2,0x15ac
    11dc:	28 4b 00 00 	lw r11,(r2+0)
    11e0:	b8 20 68 00 	mv r13,r1
    11e4:	34 01 00 56 	mvi r1,86
    11e8:	35 6c 00 14 	addi r12,r11,20

	uint32_t Z [9];

	for(int i = 0;i < 5;i++){
		uart1_putchar(GET_SIZE[i]);
    11ec:	20 21 00 ff 	andi r1,r1,0xff
    11f0:	35 6b 00 04 	addi r11,r11,4
    11f4:	fb ff fd fe 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 5;i++){
    11f8:	45 6c 00 06 	be r11,r12,1210 <_ZN3cam7getsizeEv+0x50>
    11fc:	29 61 00 00 	lw r1,(r11+0)
    1200:	35 6b 00 04 	addi r11,r11,4
		uart1_putchar(GET_SIZE[i]);
    1204:	20 21 00 ff 	andi r1,r1,0xff
    1208:	fb ff fd f9 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 5;i++){
    120c:	5d 6c ff fc 	bne r11,r12,11fc <_ZN3cam7getsizeEv+0x3c>
    1210:	37 8b 00 14 	addi r11,sp,20
    1214:	37 8c 00 38 	addi r12,sp,56
	}

	for(int i = 0;i < 9;i++){
		Z[i] = uart1_getchar();
    1218:	fb ff fd eb 	calli 9c4 <uart1_getchar>
    121c:	59 61 00 00 	sw (r11+0),r1
    1220:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 9;i++){
    1224:	5d 6c ff fd 	bne r11,r12,1218 <_ZN3cam7getsizeEv+0x58>
	}

	if(Z[0] == 0x76 && Z[2] == 0x34){
    1228:	2b 82 00 14 	lw r2,(sp+20)
    122c:	34 01 00 76 	mvi r1,118
    1230:	44 41 00 07 	be r2,r1,124c <_ZN3cam7getsizeEv+0x8c>
		xl = Z[8];

		uart_putchar(xh);
		uart_putchar(xl);
	}
};
    1234:	2b 9d 00 04 	lw ra,(sp+4)
    1238:	2b 8b 00 10 	lw r11,(sp+16)
    123c:	2b 8c 00 0c 	lw r12,(sp+12)
    1240:	2b 8d 00 08 	lw r13,(sp+8)
    1244:	37 9c 00 34 	addi sp,sp,52
    1248:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x34){
    124c:	2b 82 00 1c 	lw r2,(sp+28)
    1250:	34 01 00 34 	mvi r1,52
    1254:	5c 41 ff f8 	bne r2,r1,1234 <_ZN3cam7getsizeEv+0x74>
		uart_putstr("Ok");
    1258:	78 02 00 00 	mvhi r2,0x0
    125c:	38 42 15 b0 	ori r2,r2,0x15b0
    1260:	28 41 00 00 	lw r1,(r2+0)
    1264:	fb ff fd c9 	calli 988 <uart_putstr>
		xh = Z[7];
    1268:	2b 82 00 30 	lw r2,(sp+48)
		uart_putchar(xh);
    126c:	20 41 00 ff 	andi r1,r2,0xff
		xh = Z[7];
    1270:	31 a2 00 00 	sb (r13+0),r2
		xl = Z[8];
    1274:	2b 82 00 34 	lw r2,(sp+52)
    1278:	31 a2 00 01 	sb (r13+1),r2
		uart_putchar(xh);
    127c:	fb ff fd b9 	calli 960 <uart_putchar>
		uart_putchar(xl);
    1280:	41 a1 00 01 	lbu r1,(r13+1)
    1284:	fb ff fd b7 	calli 960 <uart_putchar>
};
    1288:	e3 ff ff eb 	bi 1234 <_ZN3cam7getsizeEv+0x74>

0000128c <_ZN3cam11sendpictureEv>:

void cam::sendpicture(){
    128c:	37 9c ff c4 	addi sp,sp,-60
    1290:	5b 8b 00 18 	sw (sp+24),r11
    1294:	5b 8c 00 14 	sw (sp+20),r12
    1298:	5b 8d 00 10 	sw (sp+16),r13
    129c:	5b 8e 00 0c 	sw (sp+12),r14
    12a0:	5b 8f 00 08 	sw (sp+8),r15
    12a4:	5b 9d 00 04 	sw (sp+4),ra

	uint32_t Z [9];
	int length;
	char R1;

	length = (((int)xh)*256)+((int)xl);
    12a8:	40 2d 00 00 	lbu r13,(r1+0)
void cam::sendpicture(){
    12ac:	b8 20 70 00 	mv r14,r1
	length = (((int)xh)*256)+((int)xl);
    12b0:	40 21 00 01 	lbu r1,(r1+1)
    12b4:	78 02 00 00 	mvhi r2,0x0
    12b8:	3d ad 00 08 	sli r13,r13,8
    12bc:	38 42 15 b4 	ori r2,r2,0x15b4
    12c0:	28 4b 00 00 	lw r11,(r2+0)
    12c4:	b5 a1 68 00 	add r13,r13,r1
	uart_putchar(length);
    12c8:	21 a1 00 ff 	andi r1,r13,0xff
    12cc:	fb ff fd a5 	calli 960 <uart_putchar>
    12d0:	35 6c 00 30 	addi r12,r11,48
    12d4:	34 01 00 56 	mvi r1,86
    12d8:	e0 00 00 02 	bi 12e0 <_ZN3cam11sendpictureEv+0x54>
    12dc:	29 61 00 00 	lw r1,(r11+0)
    12e0:	35 6b 00 04 	addi r11,r11,4

	for(int i = 0;i < 12;i++){
		uart1_putchar(SEND_JPG[i]);
    12e4:	20 21 00 ff 	andi r1,r1,0xff
    12e8:	fb ff fd c1 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 12;i++){
    12ec:	5d 6c ff fc 	bne r11,r12,12dc <_ZN3cam11sendpictureEv+0x50>
	}

	uart1_putchar(xh);
    12f0:	41 c1 00 00 	lbu r1,(r14+0)
    12f4:	37 8f 00 1c 	addi r15,sp,28
    12f8:	37 8c 00 30 	addi r12,sp,48
    12fc:	fb ff fd bc 	calli 9ec <uart1_putchar>
	uart1_putchar(xl);
    1300:	41 c1 00 01 	lbu r1,(r14+1)
	uart1_putchar(0x00);
	uart1_putchar(0x0a);
    1304:	b9 e0 58 00 	mv r11,r15
	uart1_putchar(xl);
    1308:	fb ff fd b9 	calli 9ec <uart1_putchar>
	uart1_putchar(0x00);
    130c:	34 01 00 00 	mvi r1,0
    1310:	fb ff fd b7 	calli 9ec <uart1_putchar>
	uart1_putchar(0x0a);
    1314:	34 01 00 0a 	mvi r1,10
    1318:	fb ff fd b5 	calli 9ec <uart1_putchar>

	for(int i = 0;i < 5;i++){
		Z[i] = uart1_getchar();
    131c:	fb ff fd aa 	calli 9c4 <uart1_getchar>
    1320:	59 61 00 00 	sw (r11+0),r1
    1324:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 5;i++){
    1328:	5d 6c ff fd 	bne r11,r12,131c <_ZN3cam11sendpictureEv+0x90>
	}

	if(Z[0] == 0x76 && Z[2] == 0x32){
    132c:	2b 82 00 1c 	lw r2,(sp+28)
    1330:	34 01 00 76 	mvi r1,118
    1334:	44 41 00 09 	be r2,r1,1358 <_ZN3cam11sendpictureEv+0xcc>
		uart_putstr("Sent");
		}
		
	}

};
    1338:	2b 9d 00 04 	lw ra,(sp+4)
    133c:	2b 8b 00 18 	lw r11,(sp+24)
    1340:	2b 8c 00 14 	lw r12,(sp+20)
    1344:	2b 8d 00 10 	lw r13,(sp+16)
    1348:	2b 8e 00 0c 	lw r14,(sp+12)
    134c:	2b 8f 00 08 	lw r15,(sp+8)
    1350:	37 9c 00 3c 	addi sp,sp,60
    1354:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x32){
    1358:	2b 82 00 24 	lw r2,(sp+36)
    135c:	34 01 00 32 	mvi r1,50
    1360:	5c 41 ff f6 	bne r2,r1,1338 <_ZN3cam11sendpictureEv+0xac>
		for(int i = 0;i < length;i++){
    1364:	45 a0 00 06 	be r13,r0,137c <_ZN3cam11sendpictureEv+0xf0>
    1368:	34 0c 00 00 	mvi r12,0
    136c:	35 8c 00 01 	addi r12,r12,1
			R1 = uart1_getchar();
    1370:	fb ff fd 95 	calli 9c4 <uart1_getchar>
			uart_putchar(R1);
    1374:	fb ff fd 7b 	calli 960 <uart_putchar>
		for(int i = 0;i < length;i++){
    1378:	5d ac ff fd 	bne r13,r12,136c <_ZN3cam11sendpictureEv+0xe0>
			Z[i] = uart1_getchar();
    137c:	fb ff fd 92 	calli 9c4 <uart1_getchar>
    1380:	59 e1 00 00 	sw (r15+0),r1
    1384:	35 ef 00 04 	addi r15,r15,4
		for(int i = 0;i < 5;i++){
    1388:	5d eb ff fd 	bne r15,r11,137c <_ZN3cam11sendpictureEv+0xf0>
		if(Z[0] == 0x76 && Z[2] == 0x32){
    138c:	2b 82 00 1c 	lw r2,(sp+28)
    1390:	34 01 00 76 	mvi r1,118
    1394:	5c 41 ff e9 	bne r2,r1,1338 <_ZN3cam11sendpictureEv+0xac>
    1398:	2b 82 00 24 	lw r2,(sp+36)
    139c:	34 01 00 32 	mvi r1,50
    13a0:	5c 41 ff e6 	bne r2,r1,1338 <_ZN3cam11sendpictureEv+0xac>
		uart_putstr("Sent");
    13a4:	78 02 00 00 	mvhi r2,0x0
    13a8:	38 42 15 b8 	ori r2,r2,0x15b8
    13ac:	28 41 00 00 	lw r1,(r2+0)
    13b0:	fb ff fd 76 	calli 988 <uart_putstr>
};
    13b4:	e3 ff ff e1 	bi 1338 <_ZN3cam11sendpictureEv+0xac>

000013b8 <_ZN3cam10stoptakingEv>:

void cam::stoptaking(){
    13b8:	37 9c ff e0 	addi sp,sp,-32
    13bc:	5b 8b 00 0c 	sw (sp+12),r11
    13c0:	5b 8c 00 08 	sw (sp+8),r12
    13c4:	5b 9d 00 04 	sw (sp+4),ra
    13c8:	78 01 00 00 	mvhi r1,0x0
    13cc:	38 21 15 bc 	ori r1,r1,0x15bc
    13d0:	28 2b 00 00 	lw r11,(r1+0)
    13d4:	34 01 00 56 	mvi r1,86

	uint32_t Z [5];

	for(int i = 0;i < 5;i++){
		uart1_putchar(STOP_TAKING_PICS[i]);
    13d8:	20 21 00 ff 	andi r1,r1,0xff
    13dc:	35 6c 00 14 	addi r12,r11,20
    13e0:	35 6b 00 04 	addi r11,r11,4
    13e4:	fb ff fd 82 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 5;i++){
    13e8:	45 6c 00 06 	be r11,r12,1400 <_ZN3cam10stoptakingEv+0x48>
    13ec:	29 61 00 00 	lw r1,(r11+0)
    13f0:	35 6b 00 04 	addi r11,r11,4
		uart1_putchar(STOP_TAKING_PICS[i]);
    13f4:	20 21 00 ff 	andi r1,r1,0xff
    13f8:	fb ff fd 7d 	calli 9ec <uart1_putchar>
	for(int i = 0;i < 5;i++){
    13fc:	5d 6c ff fc 	bne r11,r12,13ec <_ZN3cam10stoptakingEv+0x34>
    1400:	37 8b 00 10 	addi r11,sp,16
    1404:	37 8c 00 24 	addi r12,sp,36
	}

	for(int i = 0;i < 5;i++){
		Z[i] = uart1_getchar();
    1408:	fb ff fd 6f 	calli 9c4 <uart1_getchar>
    140c:	59 61 00 00 	sw (r11+0),r1
    1410:	35 6b 00 04 	addi r11,r11,4
	for(int i = 0;i < 5;i++){
    1414:	5d 6c ff fd 	bne r11,r12,1408 <_ZN3cam10stoptakingEv+0x50>
	}


	if(Z[0] == 0x76 && Z[2] == 0x36){
    1418:	2b 82 00 10 	lw r2,(sp+16)
    141c:	34 01 00 76 	mvi r1,118
    1420:	44 41 00 06 	be r2,r1,1438 <_ZN3cam10stoptakingEv+0x80>
		uart_putstr("Finish");
	}

};
    1424:	2b 9d 00 04 	lw ra,(sp+4)
    1428:	2b 8b 00 0c 	lw r11,(sp+12)
    142c:	2b 8c 00 08 	lw r12,(sp+8)
    1430:	37 9c 00 20 	addi sp,sp,32
    1434:	c3 a0 00 00 	ret
	if(Z[0] == 0x76 && Z[2] == 0x36){
    1438:	2b 82 00 18 	lw r2,(sp+24)
    143c:	34 01 00 36 	mvi r1,54
    1440:	5c 41 ff f9 	bne r2,r1,1424 <_ZN3cam10stoptakingEv+0x6c>
		uart_putstr("Finish");
    1444:	78 02 00 00 	mvhi r2,0x0
    1448:	38 42 15 c0 	ori r2,r2,0x15c0
    144c:	28 41 00 00 	lw r1,(r2+0)
    1450:	fb ff fd 4e 	calli 988 <uart_putstr>
};
    1454:	e3 ff ff f4 	bi 1424 <_ZN3cam10stoptakingEv+0x6c>
