
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000070  00000e3c  00000e3c  00000e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000eac  00000eac  00000f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000094  00000ebc  00000ebc  00000f10  2**2
                  ALLOC
  4 .debug_frame  000002c0  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ab9  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073a  00000000  00000000  00002c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000500  00000000  00000000  000033c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000088  00000000  00000000  000038c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000394b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000de5  00000000  00000000  00003993  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ff  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00004c77  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 40 	calli 5cc <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c ff fc 	ori sp,sp,0xfffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0e c0 	ori gp,gp,0xec0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0e bc 	ori r1,r1,0xebc
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0f 50 	ori r3,r3,0xf50

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 50 	calli 27c <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <_Z11instruccion3armc>:
int inst;
int dir;
int val;


void instruccion(arm y,char x){
 208:	37 9c ff dc 	addi sp,sp,-36
 20c:	5b 9d 00 04 	sw (sp+4),ra
 210:	43 89 00 2b 	lbu r9,(sp+43)
 214:	5b 81 00 08 	sw (sp+8),r1
 218:	5b 82 00 0c 	sw (sp+12),r2
 21c:	5b 83 00 10 	sw (sp+16),r3
 220:	5b 84 00 14 	sw (sp+20),r4
 224:	5b 85 00 18 	sw (sp+24),r5
 228:	5b 86 00 1c 	sw (sp+28),r6
 22c:	5b 87 00 20 	sw (sp+32),r7
 230:	5b 88 00 24 	sw (sp+36),r8
	switch(x){
 234:	34 01 00 10 	mvi r1,16
 238:	45 21 00 0a 	be r9,r1,260 <_Z11instruccion3armc+0x58>
 23c:	34 01 00 11 	mvi r1,17
 240:	5d 21 00 05 	bne r9,r1,254 <_Z11instruccion3armc+0x4c>
			y.derecha();
			uart_putchar('d');
			break;

		case 0x11:
			y.izquierda();
 244:	37 81 00 08 	addi r1,sp,8
 248:	f8 00 02 9d 	calli cbc <_ZN3arm9izquierdaEv>
			uart_putchar('z');
 24c:	34 01 00 7a 	mvi r1,122
 250:	f8 00 01 4d 	calli 784 <uart_putchar>
			break;
	}
}
 254:	2b 9d 00 04 	lw ra,(sp+4)
 258:	37 9c 00 24 	addi sp,sp,36
 25c:	c3 a0 00 00 	ret
			y.derecha();
 260:	37 81 00 08 	addi r1,sp,8
 264:	f8 00 02 77 	calli c40 <_ZN3arm7derechaEv>
			uart_putchar('d');
 268:	34 01 00 64 	mvi r1,100
 26c:	f8 00 01 46 	calli 784 <uart_putchar>
}
 270:	2b 9d 00 04 	lw ra,(sp+4)
 274:	37 9c 00 24 	addi sp,sp,36
 278:	c3 a0 00 00 	ret

0000027c <main>:

int main(){
 27c:	37 9c ff 40 	addi sp,sp,-192
 280:	5b 8b 00 40 	sw (sp+64),r11
 284:	5b 8c 00 3c 	sw (sp+60),r12
 288:	5b 8d 00 38 	sw (sp+56),r13
 28c:	5b 8e 00 34 	sw (sp+52),r14
 290:	5b 8f 00 30 	sw (sp+48),r15
 294:	5b 90 00 2c 	sw (sp+44),r16
 298:	5b 91 00 28 	sw (sp+40),r17
 29c:	5b 92 00 24 	sw (sp+36),r18
 2a0:	5b 93 00 20 	sw (sp+32),r19
 2a4:	5b 94 00 1c 	sw (sp+28),r20
 2a8:	5b 95 00 18 	sw (sp+24),r21
 2ac:	5b 96 00 14 	sw (sp+20),r22
 2b0:	5b 97 00 10 	sw (sp+16),r23
 2b4:	5b 98 00 0c 	sw (sp+12),r24
 2b8:	5b 9d 00 08 	sw (sp+8),ra
   volatile uint32_t en7;
   volatile uint32_t period7;
   volatile uint32_t duty7;
} pwm_t;

class  pwm{
 2bc:	78 04 50 00 	mvhi r4,0x5000
	arm arm1;
	arm arm2;
	arm arm3;
	arm arm4;

	arm1.set_serv(0,1);
 2c0:	34 03 00 01 	mvi r3,1
 2c4:	34 02 00 00 	mvi r2,0
 2c8:	37 81 00 44 	addi r1,sp,68
 2cc:	5b 84 00 44 	sw (sp+68),r4
 2d0:	5b 84 00 64 	sw (sp+100),r4
 2d4:	5b 84 00 84 	sw (sp+132),r4
 2d8:	5b 84 00 a4 	sw (sp+164),r4
 2dc:	f8 00 02 97 	calli d38 <_ZN3arm8set_servEii>
	arm2.set_serv(2,3);
 2e0:	34 03 00 03 	mvi r3,3
 2e4:	34 02 00 02 	mvi r2,2
 2e8:	37 81 00 64 	addi r1,sp,100
 2ec:	f8 00 02 93 	calli d38 <_ZN3arm8set_servEii>
	arm3.set_serv(4,5);
 2f0:	34 03 00 05 	mvi r3,5
 2f4:	34 02 00 04 	mvi r2,4
 2f8:	37 81 00 84 	addi r1,sp,132
 2fc:	f8 00 02 8f 	calli d38 <_ZN3arm8set_servEii>
 300:	78 01 00 00 	mvhi r1,0x0
 304:	38 21 0e 3c 	ori r1,r1,0xe3c
 308:	28 2c 00 00 	lw r12,(r1+0)
 30c:	78 01 00 00 	mvhi r1,0x0
 310:	38 21 0e 40 	ori r1,r1,0xe40
 314:	28 2f 00 00 	lw r15,(r1+0)
 318:	78 01 00 00 	mvhi r1,0x0
 31c:	38 21 0e 44 	ori r1,r1,0xe44
 320:	28 34 00 00 	lw r20,(r1+0)
 324:	78 01 00 00 	mvhi r1,0x0
 328:	38 21 0e 48 	ori r1,r1,0xe48
 32c:	28 33 00 00 	lw r19,(r1+0)
 330:	78 01 00 00 	mvhi r1,0x0
 334:	38 21 0e 4c 	ori r1,r1,0xe4c
 338:	28 32 00 00 	lw r18,(r1+0)
	arm4.set_serv(6,7);
 33c:	34 03 00 07 	mvi r3,7
 340:	34 02 00 06 	mvi r2,6
 344:	37 81 00 a4 	addi r1,sp,164
 348:	f8 00 02 7c 	calli d38 <_ZN3arm8set_servEii>


	while(1){
		C = uart_getchar();

		switch(C){
 34c:	34 0b 00 fd 	mvi r11,253
 350:	34 0e 00 fe 	mvi r14,254
 354:	34 11 00 ff 	mvi r17,255
 358:	34 10 00 fc 	mvi r16,252
				}
				break;

			case 0xfe:
				C = uart_getchar();
				if(C == 0xf0){
 35c:	34 0d 00 f0 	mvi r13,240
				dir = uart_getchar();
				val = uart_getchar();
				C   = uart_getchar();
				if(C == 0xf0){
					uart_putchar('c');
					switch(br){
 360:	34 15 00 02 	mvi r21,2
 364:	34 16 00 03 	mvi r22,3
 368:	34 18 00 04 	mvi r24,4
 36c:	34 17 00 01 	mvi r23,1
		C = uart_getchar();
 370:	f8 00 00 fb 	calli 75c <uart_getchar>
 374:	31 81 00 00 	sb (r12+0),r1
		switch(C){
 378:	44 2b 00 19 	be r1,r11,3dc <main+0x160>
 37c:	54 2b 00 31 	bgu r1,r11,440 <main+0x1c4>
 380:	5c 30 ff fc 	bne r1,r16,370 <main+0xf4>
				br  = uart_getchar();
 384:	f8 00 00 f6 	calli 75c <uart_getchar>
 388:	59 e1 00 00 	sw (r15+0),r1
				dir = uart_getchar();
 38c:	f8 00 00 f4 	calli 75c <uart_getchar>
 390:	5a 61 00 00 	sw (r19+0),r1
				val = uart_getchar();
 394:	f8 00 00 f2 	calli 75c <uart_getchar>
 398:	5a 41 00 00 	sw (r18+0),r1
				C   = uart_getchar();
 39c:	f8 00 00 f0 	calli 75c <uart_getchar>
 3a0:	31 81 00 00 	sb (r12+0),r1
				if(C == 0xf0){
 3a4:	5c 2d ff f3 	bne r1,r13,370 <main+0xf4>
					uart_putchar('c');
 3a8:	34 01 00 63 	mvi r1,99
 3ac:	f8 00 00 f6 	calli 784 <uart_putchar>
					switch(br){
 3b0:	29 e1 00 00 	lw r1,(r15+0)
 3b4:	44 35 00 67 	be r1,r21,550 <main+0x2d4>
 3b8:	48 35 00 32 	bg r1,r21,480 <main+0x204>
 3bc:	5c 37 ff ed 	bne r1,r23,370 <main+0xf4>
						case 0x01:
							arm1.calib(dir,val);
 3c0:	2a 43 00 00 	lw r3,(r18+0)
 3c4:	42 62 00 03 	lbu r2,(r19+3)
 3c8:	37 81 00 44 	addi r1,sp,68
 3cc:	f8 00 02 87 	calli de8 <_ZN3arm5calibEci>
		C = uart_getchar();
 3d0:	f8 00 00 e3 	calli 75c <uart_getchar>
 3d4:	31 81 00 00 	sb (r12+0),r1
		switch(C){
 3d8:	5c 2b ff e9 	bne r1,r11,37c <main+0x100>
				br   = uart_getchar();
 3dc:	f8 00 00 e0 	calli 75c <uart_getchar>
 3e0:	59 e1 00 00 	sw (r15+0),r1
				inst = uart_getchar();
 3e4:	f8 00 00 de 	calli 75c <uart_getchar>
 3e8:	5a 81 00 00 	sw (r20+0),r1
				C    = uart_getchar();
 3ec:	f8 00 00 dc 	calli 75c <uart_getchar>
 3f0:	31 81 00 00 	sb (r12+0),r1
				if(C == 0xf0){
 3f4:	5c 2d ff df 	bne r1,r13,370 <main+0xf4>
					uart_putchar('o');
 3f8:	34 01 00 6f 	mvi r1,111
 3fc:	f8 00 00 e2 	calli 784 <uart_putchar>
					switch(br){
 400:	29 e1 00 00 	lw r1,(r15+0)
 404:	44 35 00 42 	be r1,r21,50c <main+0x290>
 408:	48 35 00 25 	bg r1,r21,49c <main+0x220>
 40c:	5c 37 ff d9 	bne r1,r23,370 <main+0xf4>
							instruccion(arm1,inst);
 410:	42 89 00 03 	lbu r9,(r20+3)
 414:	2b 81 00 44 	lw r1,(sp+68)
 418:	2b 82 00 48 	lw r2,(sp+72)
 41c:	2b 83 00 4c 	lw r3,(sp+76)
 420:	2b 84 00 50 	lw r4,(sp+80)
 424:	2b 85 00 54 	lw r5,(sp+84)
 428:	2b 86 00 58 	lw r6,(sp+88)
 42c:	2b 87 00 5c 	lw r7,(sp+92)
 430:	2b 88 00 60 	lw r8,(sp+96)
 434:	5b 89 00 04 	sw (sp+4),r9
 438:	fb ff ff 74 	calli 208 <_Z11instruccion3armc>
 43c:	e3 ff ff cd 	bi 370 <main+0xf4>
		switch(C){
 440:	44 2e 00 25 	be r1,r14,4d4 <main+0x258>
 444:	5c 31 ff cb 	bne r1,r17,370 <main+0xf4>
				C = uart_getchar();
 448:	f8 00 00 c5 	calli 75c <uart_getchar>
 44c:	31 81 00 00 	sb (r12+0),r1
				if(C == 0xf0){
 450:	5c 2d ff c8 	bne r1,r13,370 <main+0xf4>
					uart_putchar('h');
 454:	34 01 00 68 	mvi r1,104
 458:	f8 00 00 cb 	calli 784 <uart_putchar>
					arm1.home();
 45c:	37 81 00 44 	addi r1,sp,68
 460:	f8 00 01 eb 	calli c0c <_ZN3arm4homeEv>
					arm2.home();
 464:	37 81 00 64 	addi r1,sp,100
 468:	f8 00 01 e9 	calli c0c <_ZN3arm4homeEv>
					arm3.home();
 46c:	37 81 00 84 	addi r1,sp,132
 470:	f8 00 01 e7 	calli c0c <_ZN3arm4homeEv>
					arm4.home();
 474:	37 81 00 a4 	addi r1,sp,164
 478:	f8 00 01 e5 	calli c0c <_ZN3arm4homeEv>
 47c:	e3 ff ff bd 	bi 370 <main+0xf4>
					switch(br){
 480:	44 36 00 2f 	be r1,r22,53c <main+0x2c0>
 484:	5c 38 ff bb 	bne r1,r24,370 <main+0xf4>
							break;
						case 0x03:
							arm3.calib(dir,val);
							break;
						case 0x04:
							arm4.calib(dir,val);
 488:	2a 43 00 00 	lw r3,(r18+0)
 48c:	42 62 00 03 	lbu r2,(r19+3)
 490:	37 81 00 a4 	addi r1,sp,164
 494:	f8 00 02 55 	calli de8 <_ZN3arm5calibEci>
 498:	e3 ff ff b6 	bi 370 <main+0xf4>
					switch(br){
 49c:	44 36 00 32 	be r1,r22,564 <main+0x2e8>
 4a0:	5c 38 ff b4 	bne r1,r24,370 <main+0xf4>
							instruccion(arm4,inst);
 4a4:	42 89 00 03 	lbu r9,(r20+3)
 4a8:	2b 81 00 a4 	lw r1,(sp+164)
 4ac:	2b 82 00 a8 	lw r2,(sp+168)
 4b0:	2b 83 00 ac 	lw r3,(sp+172)
 4b4:	2b 84 00 b0 	lw r4,(sp+176)
 4b8:	2b 85 00 b4 	lw r5,(sp+180)
 4bc:	2b 86 00 b8 	lw r6,(sp+184)
 4c0:	2b 87 00 bc 	lw r7,(sp+188)
 4c4:	2b 88 00 c0 	lw r8,(sp+192)
 4c8:	5b 89 00 04 	sw (sp+4),r9
 4cc:	fb ff ff 4f 	calli 208 <_Z11instruccion3armc>
 4d0:	e3 ff ff a8 	bi 370 <main+0xf4>
				C = uart_getchar();
 4d4:	f8 00 00 a2 	calli 75c <uart_getchar>
 4d8:	31 81 00 00 	sb (r12+0),r1
				if(C == 0xf0){
 4dc:	5c 2d ff a5 	bne r1,r13,370 <main+0xf4>
					uart_putchar('i');
 4e0:	34 01 00 69 	mvi r1,105
 4e4:	f8 00 00 a8 	calli 784 <uart_putchar>
					arm1.init();
 4e8:	37 81 00 44 	addi r1,sp,68
 4ec:	f8 00 01 af 	calli ba8 <_ZN3arm4initEv>
					arm2.init();
 4f0:	37 81 00 64 	addi r1,sp,100
 4f4:	f8 00 01 ad 	calli ba8 <_ZN3arm4initEv>
					arm3.init();
 4f8:	37 81 00 84 	addi r1,sp,132
 4fc:	f8 00 01 ab 	calli ba8 <_ZN3arm4initEv>
					arm4.init();
 500:	37 81 00 a4 	addi r1,sp,164
 504:	f8 00 01 a9 	calli ba8 <_ZN3arm4initEv>
 508:	e3 ff ff 9a 	bi 370 <main+0xf4>
							instruccion(arm2,inst);
 50c:	42 89 00 03 	lbu r9,(r20+3)
 510:	2b 81 00 64 	lw r1,(sp+100)
 514:	2b 82 00 68 	lw r2,(sp+104)
 518:	2b 83 00 6c 	lw r3,(sp+108)
 51c:	2b 84 00 70 	lw r4,(sp+112)
 520:	2b 85 00 74 	lw r5,(sp+116)
 524:	2b 86 00 78 	lw r6,(sp+120)
 528:	2b 87 00 7c 	lw r7,(sp+124)
 52c:	2b 88 00 80 	lw r8,(sp+128)
 530:	5b 89 00 04 	sw (sp+4),r9
 534:	fb ff ff 35 	calli 208 <_Z11instruccion3armc>
 538:	e3 ff ff 8e 	bi 370 <main+0xf4>
							arm3.calib(dir,val);
 53c:	2a 43 00 00 	lw r3,(r18+0)
 540:	42 62 00 03 	lbu r2,(r19+3)
 544:	37 81 00 84 	addi r1,sp,132
 548:	f8 00 02 28 	calli de8 <_ZN3arm5calibEci>
 54c:	e3 ff ff 89 	bi 370 <main+0xf4>
							arm2.calib(dir,val);
 550:	2a 43 00 00 	lw r3,(r18+0)
 554:	42 62 00 03 	lbu r2,(r19+3)
 558:	37 81 00 64 	addi r1,sp,100
 55c:	f8 00 02 23 	calli de8 <_ZN3arm5calibEci>
 560:	e3 ff ff 84 	bi 370 <main+0xf4>
							instruccion(arm3,inst);
 564:	42 89 00 03 	lbu r9,(r20+3)
 568:	2b 81 00 84 	lw r1,(sp+132)
 56c:	2b 82 00 88 	lw r2,(sp+136)
 570:	2b 83 00 8c 	lw r3,(sp+140)
 574:	2b 84 00 90 	lw r4,(sp+144)
 578:	2b 85 00 94 	lw r5,(sp+148)
 57c:	2b 86 00 98 	lw r6,(sp+152)
 580:	2b 87 00 9c 	lw r7,(sp+156)
 584:	2b 88 00 a0 	lw r8,(sp+160)
 588:	5b 89 00 04 	sw (sp+4),r9
 58c:	fb ff ff 1f 	calli 208 <_Z11instruccion3armc>
 590:	e3 ff ff 78 	bi 370 <main+0xf4>

00000594 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 594:	78 01 00 00 	mvhi r1,0x0
 598:	38 21 0e 50 	ori r1,r1,0xe50
 59c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5a0:	78 04 00 00 	mvhi r4,0x0
 5a4:	38 84 0e 54 	ori r4,r4,0xe54
 5a8:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 5ac:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5b0:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 5b4:	34 21 00 01 	addi r1,r1,1
 5b8:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5bc:	34 01 00 0e 	mvi r1,14
 5c0:	58 61 00 00 	sw (r3+0),r1
}
 5c4:	c3 a0 00 00 	ret

000005c8 <isr_null>:
 5c8:	c3 a0 00 00 	ret

000005cc <irq_handler>:
{
 5cc:	37 9c ff f0 	addi sp,sp,-16
 5d0:	5b 8b 00 10 	sw (sp+16),r11
 5d4:	5b 8c 00 0c 	sw (sp+12),r12
 5d8:	5b 8d 00 08 	sw (sp+8),r13
 5dc:	5b 9d 00 04 	sw (sp+4),ra
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 0e 58 	ori r2,r2,0xe58
 5e8:	28 4b 00 00 	lw r11,(r2+0)
 5ec:	b8 20 60 00 	mv r12,r1
 5f0:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 5f4:	21 81 00 01 	andi r1,r12,0x1
 5f8:	44 20 00 03 	be r1,r0,604 <irq_handler+0x38>
 5fc:	29 61 00 00 	lw r1,(r11+0)
 600:	d8 20 00 00 	call r1
 604:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 608:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 60c:	5d ab ff fa 	bne r13,r11,5f4 <irq_handler+0x28>
}
 610:	2b 9d 00 04 	lw ra,(sp+4)
 614:	2b 8b 00 10 	lw r11,(sp+16)
 618:	2b 8c 00 0c 	lw r12,(sp+12)
 61c:	2b 8d 00 08 	lw r13,(sp+8)
 620:	37 9c 00 10 	addi sp,sp,16
 624:	c3 a0 00 00 	ret

00000628 <isr_init>:
{
 628:	78 02 00 00 	mvhi r2,0x0
 62c:	38 42 0e 5c 	ori r2,r2,0xe5c
 630:	28 41 00 00 	lw r1,(r2+0)
 634:	78 02 00 00 	mvhi r2,0x0
 638:	38 42 0e 60 	ori r2,r2,0xe60
 63c:	28 43 00 00 	lw r3,(r2+0)
 640:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 644:	58 23 00 00 	sw (r1+0),r3
 648:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 64c:	5c 22 ff fe 	bne r1,r2,644 <isr_init+0x1c>
}
 650:	c3 a0 00 00 	ret

00000654 <isr_register>:
	isr_table[irq] = isr;
 654:	78 04 00 00 	mvhi r4,0x0
 658:	38 84 0e 64 	ori r4,r4,0xe64
 65c:	3c 23 00 02 	sli r3,r1,2
 660:	28 81 00 00 	lw r1,(r4+0)
 664:	b4 23 08 00 	add r1,r1,r3
 668:	58 22 00 00 	sw (r1+0),r2
}
 66c:	c3 a0 00 00 	ret

00000670 <isr_unregister>:
	isr_table[irq] = &isr_null;
 670:	78 03 00 00 	mvhi r3,0x0
 674:	38 63 0e 68 	ori r3,r3,0xe68
 678:	3c 22 00 02 	sli r2,r1,2
 67c:	28 61 00 00 	lw r1,(r3+0)
 680:	78 03 00 00 	mvhi r3,0x0
 684:	38 63 0e 6c 	ori r3,r3,0xe6c
 688:	b4 22 08 00 	add r1,r1,r2
 68c:	28 62 00 00 	lw r2,(r3+0)
 690:	58 22 00 00 	sw (r1+0),r2
}
 694:	c3 a0 00 00 	ret

00000698 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 698:	78 03 00 00 	mvhi r3,0x0
 69c:	38 02 c3 50 	mvu r2,0xc350
 6a0:	38 63 0e 70 	ori r3,r3,0xe70
 6a4:	88 22 08 00 	mul r1,r1,r2
 6a8:	28 62 00 00 	lw r2,(r3+0)
 6ac:	28 42 00 00 	lw r2,(r2+0)
 6b0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 6b4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6b8:	34 01 00 08 	mvi r1,8
 6bc:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 6c0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6c4:	20 21 00 01 	andi r1,r1,0x1
 6c8:	44 20 ff fe 	be r1,r0,6c0 <msleep+0x28>
}
 6cc:	c3 a0 00 00 	ret

000006d0 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 6d0:	78 03 00 00 	mvhi r3,0x0
 6d4:	38 63 0e 74 	ori r3,r3,0xe74
 6d8:	28 62 00 00 	lw r2,(r3+0)
 6dc:	08 21 00 32 	muli r1,r1,50
 6e0:	28 42 00 00 	lw r2,(r2+0)
 6e4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 6e8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6ec:	34 01 00 08 	mvi r1,8
 6f0:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 6f4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6f8:	20 21 00 01 	andi r1,r1,0x1
 6fc:	44 20 ff fe 	be r1,r0,6f4 <nsleep+0x24>
}
 700:	c3 a0 00 00 	ret

00000704 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 704:	78 02 00 00 	mvhi r2,0x0
 708:	38 42 0e 78 	ori r2,r2,0xe78
 70c:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 710:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 714:	34 02 13 88 	mvi r2,5000
 718:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 71c:	38 63 0e 7c 	ori r3,r3,0xe7c
	timer0->compare0 = (FCPU/10000);
 720:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 724:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 728:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 72c:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 730:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 734:	34 02 00 0e 	mvi r2,14
 738:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 73c:	78 02 00 00 	mvhi r2,0x0
 740:	38 42 0e 80 	ori r2,r2,0xe80
 744:	38 63 0e 84 	ori r3,r3,0xe84
 748:	28 41 00 00 	lw r1,(r2+0)
 74c:	28 62 00 00 	lw r2,(r3+0)
 750:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 754:	c3 a0 00 00 	ret

00000758 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 758:	c3 a0 00 00 	ret

0000075c <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 75c:	78 02 00 00 	mvhi r2,0x0
 760:	38 42 0e 88 	ori r2,r2,0xe88
 764:	28 41 00 00 	lw r1,(r2+0)
 768:	28 22 00 00 	lw r2,(r1+0)
 76c:	28 41 00 00 	lw r1,(r2+0)
 770:	20 21 00 01 	andi r1,r1,0x1
 774:	44 20 ff fe 	be r1,r0,76c <uart_getchar+0x10>
	return uart0->rxtx;
 778:	28 41 00 04 	lw r1,(r2+4)
}
 77c:	20 21 00 ff 	andi r1,r1,0xff
 780:	c3 a0 00 00 	ret

00000784 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 784:	78 03 00 00 	mvhi r3,0x0
 788:	38 63 0e 8c 	ori r3,r3,0xe8c
 78c:	28 62 00 00 	lw r2,(r3+0)
{
 790:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 794:	28 43 00 00 	lw r3,(r2+0)
 798:	28 62 00 00 	lw r2,(r3+0)
 79c:	20 42 00 10 	andi r2,r2,0x10
 7a0:	5c 40 ff fe 	bne r2,r0,798 <uart_putchar+0x14>
	uart0->rxtx = c;
 7a4:	58 61 00 04 	sw (r3+4),r1
}
 7a8:	c3 a0 00 00 	ret

000007ac <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7ac:	40 24 00 00 	lbu r4,(r1+0)
 7b0:	44 80 00 0c 	be r4,r0,7e0 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 7b4:	78 03 00 00 	mvhi r3,0x0
 7b8:	38 63 0e 90 	ori r3,r3,0xe90
 7bc:	28 62 00 00 	lw r2,(r3+0)
 7c0:	28 43 00 00 	lw r3,(r2+0)
 7c4:	28 62 00 00 	lw r2,(r3+0)
 7c8:	20 42 00 10 	andi r2,r2,0x10
 7cc:	5c 40 ff fe 	bne r2,r0,7c4 <uart_putstr+0x18>
	uart0->rxtx = c;
 7d0:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 7d4:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 7d8:	40 24 00 00 	lbu r4,(r1+0)
 7dc:	5c 80 ff fa 	bne r4,r0,7c4 <uart_putstr+0x18>
	}
 7e0:	c3 a0 00 00 	ret

000007e4 <_ZN3pwm5pauseEv>:
#include "pwm.h"

void pwm::pause(){
 7e4:	37 9c ff fc 	addi sp,sp,-4
 7e8:	5b 9d 00 04 	sw (sp+4),ra

	msleep(1000);
 7ec:	34 01 03 e8 	mvi r1,1000
 7f0:	fb ff ff aa 	calli 698 <msleep>

};
 7f4:	2b 9d 00 04 	lw ra,(sp+4)
 7f8:	37 9c 00 04 	addi sp,sp,4
 7fc:	c3 a0 00 00 	ret

00000800 <_ZN3pwm6pwm_enEij>:
void pwm::pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
 800:	5c 40 00 08 	bne r2,r0,820 <_ZN3pwm6pwm_enEij+0x20>
 804:	28 24 00 00 	lw r4,(r1+0)
 808:	58 83 00 00 	sw (r4+0),r3
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
 80c:	34 04 00 05 	mvi r4,5
 810:	5c 44 00 0d 	bne r2,r4,844 <_ZN3pwm6pwm_enEij+0x44>
 814:	28 21 00 00 	lw r1,(r1+0)
 818:	58 23 00 3c 	sw (r1+60),r3
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

};
 81c:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
 820:	34 04 00 01 	mvi r4,1
 824:	5c 44 00 04 	bne r2,r4,834 <_ZN3pwm6pwm_enEij+0x34>
 828:	28 24 00 00 	lw r4,(r1+0)
 82c:	58 83 00 0c 	sw (r4+12),r3
 830:	e3 ff ff f7 	bi 80c <_ZN3pwm6pwm_enEij+0xc>
	if(sel == 2) pwm0->en2 = val;
 834:	34 04 00 02 	mvi r4,2
 838:	5c 44 00 08 	bne r2,r4,858 <_ZN3pwm6pwm_enEij+0x58>
 83c:	28 24 00 00 	lw r4,(r1+0)
 840:	58 83 00 18 	sw (r4+24),r3
	if(sel == 6) pwm0->en6 = val;
 844:	34 04 00 06 	mvi r4,6
 848:	5c 44 00 08 	bne r2,r4,868 <_ZN3pwm6pwm_enEij+0x68>
 84c:	28 21 00 00 	lw r1,(r1+0)
 850:	58 23 00 48 	sw (r1+72),r3
};
 854:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
 858:	34 04 00 03 	mvi r4,3
 85c:	5c 44 00 08 	bne r2,r4,87c <_ZN3pwm6pwm_enEij+0x7c>
 860:	28 24 00 00 	lw r4,(r1+0)
 864:	58 83 00 24 	sw (r4+36),r3
	if(sel == 7) pwm0->en7 = val;
 868:	34 04 00 07 	mvi r4,7
 86c:	5c 44 ff ec 	bne r2,r4,81c <_ZN3pwm6pwm_enEij+0x1c>
 870:	28 21 00 00 	lw r1,(r1+0)
 874:	58 23 00 54 	sw (r1+84),r3
};
 878:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
 87c:	34 04 00 04 	mvi r4,4
 880:	5c 44 ff e3 	bne r2,r4,80c <_ZN3pwm6pwm_enEij+0xc>
 884:	28 21 00 00 	lw r1,(r1+0)
 888:	58 23 00 30 	sw (r1+48),r3
};
 88c:	c3 a0 00 00 	ret

00000890 <_ZN3pwm8pwm_dutyEij>:

void pwm::pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
 890:	5c 40 00 08 	bne r2,r0,8b0 <_ZN3pwm8pwm_dutyEij+0x20>
 894:	28 24 00 00 	lw r4,(r1+0)
 898:	58 83 00 08 	sw (r4+8),r3
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
 89c:	34 04 00 05 	mvi r4,5
 8a0:	5c 44 00 0d 	bne r2,r4,8d4 <_ZN3pwm8pwm_dutyEij+0x44>
 8a4:	28 21 00 00 	lw r1,(r1+0)
 8a8:	58 23 00 44 	sw (r1+68),r3
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

};
 8ac:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
 8b0:	34 04 00 01 	mvi r4,1
 8b4:	5c 44 00 04 	bne r2,r4,8c4 <_ZN3pwm8pwm_dutyEij+0x34>
 8b8:	28 24 00 00 	lw r4,(r1+0)
 8bc:	58 83 00 14 	sw (r4+20),r3
 8c0:	e3 ff ff f7 	bi 89c <_ZN3pwm8pwm_dutyEij+0xc>
	if(sel == 2) pwm0->duty2 = val;
 8c4:	34 04 00 02 	mvi r4,2
 8c8:	5c 44 00 08 	bne r2,r4,8e8 <_ZN3pwm8pwm_dutyEij+0x58>
 8cc:	28 24 00 00 	lw r4,(r1+0)
 8d0:	58 83 00 20 	sw (r4+32),r3
	if(sel == 6) pwm0->duty6 = val;
 8d4:	34 04 00 06 	mvi r4,6
 8d8:	5c 44 00 08 	bne r2,r4,8f8 <_ZN3pwm8pwm_dutyEij+0x68>
 8dc:	28 21 00 00 	lw r1,(r1+0)
 8e0:	58 23 00 50 	sw (r1+80),r3
};
 8e4:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
 8e8:	34 04 00 03 	mvi r4,3
 8ec:	5c 44 00 08 	bne r2,r4,90c <_ZN3pwm8pwm_dutyEij+0x7c>
 8f0:	28 24 00 00 	lw r4,(r1+0)
 8f4:	58 83 00 2c 	sw (r4+44),r3
	if(sel == 7) pwm0->duty7 = val;
 8f8:	34 04 00 07 	mvi r4,7
 8fc:	5c 44 ff ec 	bne r2,r4,8ac <_ZN3pwm8pwm_dutyEij+0x1c>
 900:	28 21 00 00 	lw r1,(r1+0)
 904:	58 23 00 5c 	sw (r1+92),r3
};
 908:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
 90c:	34 04 00 04 	mvi r4,4
 910:	5c 44 ff e3 	bne r2,r4,89c <_ZN3pwm8pwm_dutyEij+0xc>
 914:	28 21 00 00 	lw r1,(r1+0)
 918:	58 23 00 38 	sw (r1+56),r3
};
 91c:	c3 a0 00 00 	ret

00000920 <_ZN3pwm10pwm_periodEij>:

void pwm::pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
 920:	5c 40 00 08 	bne r2,r0,940 <_ZN3pwm10pwm_periodEij+0x20>
 924:	28 24 00 00 	lw r4,(r1+0)
 928:	58 83 00 04 	sw (r4+4),r3
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
 92c:	34 04 00 05 	mvi r4,5
 930:	5c 44 00 0d 	bne r2,r4,964 <_ZN3pwm10pwm_periodEij+0x44>
 934:	28 21 00 00 	lw r1,(r1+0)
 938:	58 23 00 40 	sw (r1+64),r3
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

};
 93c:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
 940:	34 04 00 01 	mvi r4,1
 944:	5c 44 00 04 	bne r2,r4,954 <_ZN3pwm10pwm_periodEij+0x34>
 948:	28 24 00 00 	lw r4,(r1+0)
 94c:	58 83 00 10 	sw (r4+16),r3
 950:	e3 ff ff f7 	bi 92c <_ZN3pwm10pwm_periodEij+0xc>
	if(sel == 2) pwm0->period2 = val;
 954:	34 04 00 02 	mvi r4,2
 958:	5c 44 00 08 	bne r2,r4,978 <_ZN3pwm10pwm_periodEij+0x58>
 95c:	28 24 00 00 	lw r4,(r1+0)
 960:	58 83 00 1c 	sw (r4+28),r3
	if(sel == 6) pwm0->period6 = val;
 964:	34 04 00 06 	mvi r4,6
 968:	5c 44 00 08 	bne r2,r4,988 <_ZN3pwm10pwm_periodEij+0x68>
 96c:	28 21 00 00 	lw r1,(r1+0)
 970:	58 23 00 4c 	sw (r1+76),r3
};
 974:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
 978:	34 04 00 03 	mvi r4,3
 97c:	5c 44 00 08 	bne r2,r4,99c <_ZN3pwm10pwm_periodEij+0x7c>
 980:	28 24 00 00 	lw r4,(r1+0)
 984:	58 83 00 28 	sw (r4+40),r3
	if(sel == 7) pwm0->period7 = val;
 988:	34 04 00 07 	mvi r4,7
 98c:	5c 44 ff ec 	bne r2,r4,93c <_ZN3pwm10pwm_periodEij+0x1c>
 990:	28 21 00 00 	lw r1,(r1+0)
 994:	58 23 00 58 	sw (r1+88),r3
};
 998:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
 99c:	34 04 00 04 	mvi r4,4
 9a0:	5c 44 ff e3 	bne r2,r4,92c <_ZN3pwm10pwm_periodEij+0xc>
 9a4:	28 21 00 00 	lw r1,(r1+0)
 9a8:	58 23 00 34 	sw (r1+52),r3
};
 9ac:	c3 a0 00 00 	ret

000009b0 <_ZN3pwm9pwm_getenEj>:

uint32_t pwm::pwm_geten(uint32_t sel){
 9b0:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->en0;
 9b4:	44 40 00 11 	be r2,r0,9f8 <_ZN3pwm9pwm_getenEj+0x48>
	if(sel == 1) return pwm0->en1;
 9b8:	34 01 00 01 	mvi r1,1
 9bc:	44 41 00 12 	be r2,r1,a04 <_ZN3pwm9pwm_getenEj+0x54>
	if(sel == 2) return pwm0->en2;
 9c0:	34 01 00 02 	mvi r1,2
 9c4:	44 41 00 16 	be r2,r1,a1c <_ZN3pwm9pwm_getenEj+0x6c>
	if(sel == 3) return pwm0->en3;
 9c8:	34 01 00 03 	mvi r1,3
 9cc:	44 41 00 11 	be r2,r1,a10 <_ZN3pwm9pwm_getenEj+0x60>
	if(sel == 4) return pwm0->en4;
 9d0:	34 01 00 04 	mvi r1,4
 9d4:	44 41 00 15 	be r2,r1,a28 <_ZN3pwm9pwm_getenEj+0x78>
	if(sel == 5) return pwm0->en5;
 9d8:	34 01 00 05 	mvi r1,5
 9dc:	44 41 00 19 	be r2,r1,a40 <_ZN3pwm9pwm_getenEj+0x90>
	if(sel == 6) return pwm0->en6;
 9e0:	34 01 00 06 	mvi r1,6
 9e4:	44 41 00 1a 	be r2,r1,a4c <_ZN3pwm9pwm_getenEj+0x9c>
	if(sel == 7) return pwm0->en7;
 9e8:	34 04 00 07 	mvi r4,7
	return 0;
 9ec:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->en7;
 9f0:	44 44 00 11 	be r2,r4,a34 <_ZN3pwm9pwm_getenEj+0x84>

};
 9f4:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->en0;
 9f8:	28 21 00 00 	lw r1,(r1+0)
 9fc:	28 21 00 00 	lw r1,(r1+0)
};
 a00:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
 a04:	28 61 00 00 	lw r1,(r3+0)
 a08:	28 21 00 0c 	lw r1,(r1+12)
};
 a0c:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
 a10:	28 61 00 00 	lw r1,(r3+0)
 a14:	28 21 00 24 	lw r1,(r1+36)
};
 a18:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
 a1c:	28 61 00 00 	lw r1,(r3+0)
 a20:	28 21 00 18 	lw r1,(r1+24)
};
 a24:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
 a28:	28 61 00 00 	lw r1,(r3+0)
 a2c:	28 21 00 30 	lw r1,(r1+48)
};
 a30:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->en7;
 a34:	28 61 00 00 	lw r1,(r3+0)
 a38:	28 21 00 54 	lw r1,(r1+84)
};
 a3c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
 a40:	28 61 00 00 	lw r1,(r3+0)
 a44:	28 21 00 3c 	lw r1,(r1+60)
};
 a48:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
 a4c:	28 61 00 00 	lw r1,(r3+0)
 a50:	28 21 00 48 	lw r1,(r1+72)
};
 a54:	c3 a0 00 00 	ret

00000a58 <_ZN3pwm11pwm_getdutyEj>:

uint32_t pwm::pwm_getduty(uint32_t sel){
 a58:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->duty0;
 a5c:	44 40 00 11 	be r2,r0,aa0 <_ZN3pwm11pwm_getdutyEj+0x48>
	if(sel == 1) return pwm0->duty1;
 a60:	34 01 00 01 	mvi r1,1
 a64:	44 41 00 12 	be r2,r1,aac <_ZN3pwm11pwm_getdutyEj+0x54>
	if(sel == 2) return pwm0->duty2;
 a68:	34 01 00 02 	mvi r1,2
 a6c:	44 41 00 16 	be r2,r1,ac4 <_ZN3pwm11pwm_getdutyEj+0x6c>
	if(sel == 3) return pwm0->duty3;
 a70:	34 01 00 03 	mvi r1,3
 a74:	44 41 00 11 	be r2,r1,ab8 <_ZN3pwm11pwm_getdutyEj+0x60>
	if(sel == 4) return pwm0->duty4;
 a78:	34 01 00 04 	mvi r1,4
 a7c:	44 41 00 15 	be r2,r1,ad0 <_ZN3pwm11pwm_getdutyEj+0x78>
	if(sel == 5) return pwm0->duty5;
 a80:	34 01 00 05 	mvi r1,5
 a84:	44 41 00 19 	be r2,r1,ae8 <_ZN3pwm11pwm_getdutyEj+0x90>
	if(sel == 6) return pwm0->duty6;
 a88:	34 01 00 06 	mvi r1,6
 a8c:	44 41 00 1a 	be r2,r1,af4 <_ZN3pwm11pwm_getdutyEj+0x9c>
	if(sel == 7) return pwm0->duty7;
 a90:	34 04 00 07 	mvi r4,7
	return 0;
 a94:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->duty7;
 a98:	44 44 00 11 	be r2,r4,adc <_ZN3pwm11pwm_getdutyEj+0x84>
	
};
 a9c:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->duty0;
 aa0:	28 21 00 00 	lw r1,(r1+0)
 aa4:	28 21 00 08 	lw r1,(r1+8)
};
 aa8:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
 aac:	28 61 00 00 	lw r1,(r3+0)
 ab0:	28 21 00 14 	lw r1,(r1+20)
};
 ab4:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
 ab8:	28 61 00 00 	lw r1,(r3+0)
 abc:	28 21 00 2c 	lw r1,(r1+44)
};
 ac0:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
 ac4:	28 61 00 00 	lw r1,(r3+0)
 ac8:	28 21 00 20 	lw r1,(r1+32)
};
 acc:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
 ad0:	28 61 00 00 	lw r1,(r3+0)
 ad4:	28 21 00 38 	lw r1,(r1+56)
};
 ad8:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->duty7;
 adc:	28 61 00 00 	lw r1,(r3+0)
 ae0:	28 21 00 5c 	lw r1,(r1+92)
};
 ae4:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
 ae8:	28 61 00 00 	lw r1,(r3+0)
 aec:	28 21 00 44 	lw r1,(r1+68)
};
 af0:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
 af4:	28 61 00 00 	lw r1,(r3+0)
 af8:	28 21 00 50 	lw r1,(r1+80)
};
 afc:	c3 a0 00 00 	ret

00000b00 <_ZN3pwm13pwm_getperiodEj>:

uint32_t pwm::pwm_getperiod(uint32_t sel){
 b00:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->period0;
 b04:	44 40 00 11 	be r2,r0,b48 <_ZN3pwm13pwm_getperiodEj+0x48>
	if(sel == 1) return pwm0->period1;
 b08:	34 01 00 01 	mvi r1,1
 b0c:	44 41 00 12 	be r2,r1,b54 <_ZN3pwm13pwm_getperiodEj+0x54>
	if(sel == 2) return pwm0->period2;
 b10:	34 01 00 02 	mvi r1,2
 b14:	44 41 00 16 	be r2,r1,b6c <_ZN3pwm13pwm_getperiodEj+0x6c>
	if(sel == 3) return pwm0->period3;
 b18:	34 01 00 03 	mvi r1,3
 b1c:	44 41 00 11 	be r2,r1,b60 <_ZN3pwm13pwm_getperiodEj+0x60>
	if(sel == 4) return pwm0->period4;
 b20:	34 01 00 04 	mvi r1,4
 b24:	44 41 00 15 	be r2,r1,b78 <_ZN3pwm13pwm_getperiodEj+0x78>
	if(sel == 5) return pwm0->period5;
 b28:	34 01 00 05 	mvi r1,5
 b2c:	44 41 00 19 	be r2,r1,b90 <_ZN3pwm13pwm_getperiodEj+0x90>
	if(sel == 6) return pwm0->period6;
 b30:	34 01 00 06 	mvi r1,6
 b34:	44 41 00 1a 	be r2,r1,b9c <_ZN3pwm13pwm_getperiodEj+0x9c>
	if(sel == 7) return pwm0->period7;
 b38:	34 04 00 07 	mvi r4,7
	return 0;
 b3c:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->period7;
 b40:	44 44 00 11 	be r2,r4,b84 <_ZN3pwm13pwm_getperiodEj+0x84>
	
 b44:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->period0;
 b48:	28 21 00 00 	lw r1,(r1+0)
 b4c:	28 21 00 04 	lw r1,(r1+4)
 b50:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
 b54:	28 61 00 00 	lw r1,(r3+0)
 b58:	28 21 00 10 	lw r1,(r1+16)
 b5c:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
 b60:	28 61 00 00 	lw r1,(r3+0)
 b64:	28 21 00 28 	lw r1,(r1+40)
 b68:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
 b6c:	28 61 00 00 	lw r1,(r3+0)
 b70:	28 21 00 1c 	lw r1,(r1+28)
 b74:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
 b78:	28 61 00 00 	lw r1,(r3+0)
 b7c:	28 21 00 34 	lw r1,(r1+52)
 b80:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->period7;
 b84:	28 61 00 00 	lw r1,(r3+0)
 b88:	28 21 00 58 	lw r1,(r1+88)
 b8c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
 b90:	28 61 00 00 	lw r1,(r3+0)
 b94:	28 21 00 40 	lw r1,(r1+64)
 b98:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
 b9c:	28 61 00 00 	lw r1,(r3+0)
 ba0:	28 21 00 4c 	lw r1,(r1+76)
 ba4:	c3 a0 00 00 	ret

00000ba8 <_ZN3arm4initEv>:
#include "servos.h"

void arm::init(){
 ba8:	37 9c ff f8 	addi sp,sp,-8
 bac:	5b 8b 00 08 	sw (sp+8),r11
 bb0:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,atr);
 bb4:	28 23 00 18 	lw r3,(r1+24)
 bb8:	28 22 00 08 	lw r2,(r1+8)
void arm::init(){
 bbc:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,atr);
 bc0:	fb ff ff 34 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 bc4:	b9 60 08 00 	mv r1,r11
 bc8:	fb ff ff 07 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
 bcc:	29 63 00 14 	lw r3,(r11+20)
 bd0:	29 62 00 04 	lw r2,(r11+4)
 bd4:	b9 60 08 00 	mv r1,r11
 bd8:	fb ff ff 2e 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 bdc:	b9 60 08 00 	mv r1,r11
 be0:	fb ff ff 01 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
 be4:	29 63 00 1c 	lw r3,(r11+28)
 be8:	29 62 00 08 	lw r2,(r11+8)
 bec:	b9 60 08 00 	mv r1,r11
 bf0:	fb ff ff 28 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 bf4:	b9 60 08 00 	mv r1,r11
 bf8:	fb ff fe fb 	calli 7e4 <_ZN3pwm5pauseEv>
};
 bfc:	2b 9d 00 04 	lw ra,(sp+4)
 c00:	2b 8b 00 08 	lw r11,(sp+8)
 c04:	37 9c 00 08 	addi sp,sp,8
 c08:	c3 a0 00 00 	ret

00000c0c <_ZN3arm4homeEv>:

void arm::home(){
 c0c:	37 9c ff f8 	addi sp,sp,-8
 c10:	5b 8b 00 08 	sw (sp+8),r11
 c14:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,atr);
 c18:	28 23 00 18 	lw r3,(r1+24)
 c1c:	28 22 00 08 	lw r2,(r1+8)
void arm::home(){
 c20:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,atr);
 c24:	fb ff ff 1b 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 c28:	b9 60 08 00 	mv r1,r11
 c2c:	fb ff fe ee 	calli 7e4 <_ZN3pwm5pauseEv>
};
 c30:	2b 9d 00 04 	lw ra,(sp+4)
 c34:	2b 8b 00 08 	lw r11,(sp+8)
 c38:	37 9c 00 08 	addi sp,sp,8
 c3c:	c3 a0 00 00 	ret

00000c40 <_ZN3arm7derechaEv>:

void arm::derecha(){
 c40:	37 9c ff f8 	addi sp,sp,-8
 c44:	5b 8b 00 08 	sw (sp+8),r11
 c48:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,der);
 c4c:	28 23 00 0c 	lw r3,(r1+12)
 c50:	28 22 00 04 	lw r2,(r1+4)
void arm::derecha(){
 c54:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,der);
 c58:	fb ff ff 0e 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 c5c:	b9 60 08 00 	mv r1,r11
 c60:	fb ff fe e1 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,atr);
 c64:	29 63 00 18 	lw r3,(r11+24)
 c68:	29 62 00 08 	lw r2,(r11+8)
 c6c:	b9 60 08 00 	mv r1,r11
 c70:	fb ff ff 08 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 c74:	b9 60 08 00 	mv r1,r11
 c78:	fb ff fe db 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
 c7c:	29 63 00 14 	lw r3,(r11+20)
 c80:	29 62 00 04 	lw r2,(r11+4)
 c84:	b9 60 08 00 	mv r1,r11
 c88:	fb ff ff 02 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 c8c:	b9 60 08 00 	mv r1,r11
 c90:	fb ff fe d5 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
 c94:	29 63 00 1c 	lw r3,(r11+28)
 c98:	29 62 00 08 	lw r2,(r11+8)
 c9c:	b9 60 08 00 	mv r1,r11
 ca0:	fb ff fe fc 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 ca4:	b9 60 08 00 	mv r1,r11
 ca8:	fb ff fe cf 	calli 7e4 <_ZN3pwm5pauseEv>
};
 cac:	2b 9d 00 04 	lw ra,(sp+4)
 cb0:	2b 8b 00 08 	lw r11,(sp+8)
 cb4:	37 9c 00 08 	addi sp,sp,8
 cb8:	c3 a0 00 00 	ret

00000cbc <_ZN3arm9izquierdaEv>:

void arm::izquierda(){
 cbc:	37 9c ff f8 	addi sp,sp,-8
 cc0:	5b 8b 00 08 	sw (sp+8),r11
 cc4:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,iz);
 cc8:	28 23 00 10 	lw r3,(r1+16)
 ccc:	28 22 00 04 	lw r2,(r1+4)
void arm::izquierda(){
 cd0:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,iz);
 cd4:	fb ff fe ef 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 cd8:	b9 60 08 00 	mv r1,r11
 cdc:	fb ff fe c2 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,atr);
 ce0:	29 63 00 18 	lw r3,(r11+24)
 ce4:	29 62 00 08 	lw r2,(r11+8)
 ce8:	b9 60 08 00 	mv r1,r11
 cec:	fb ff fe e9 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 cf0:	b9 60 08 00 	mv r1,r11
 cf4:	fb ff fe bc 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,mid);
 cf8:	29 63 00 14 	lw r3,(r11+20)
 cfc:	29 62 00 04 	lw r2,(r11+4)
 d00:	b9 60 08 00 	mv r1,r11
 d04:	fb ff fe e3 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 d08:	b9 60 08 00 	mv r1,r11
 d0c:	fb ff fe b6 	calli 7e4 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,ade);
 d10:	29 63 00 1c 	lw r3,(r11+28)
 d14:	29 62 00 08 	lw r2,(r11+8)
 d18:	b9 60 08 00 	mv r1,r11
 d1c:	fb ff fe dd 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pause();
 d20:	b9 60 08 00 	mv r1,r11
 d24:	fb ff fe b0 	calli 7e4 <_ZN3pwm5pauseEv>
};
 d28:	2b 9d 00 04 	lw ra,(sp+4)
 d2c:	2b 8b 00 08 	lw r11,(sp+8)
 d30:	37 9c 00 08 	addi sp,sp,8
 d34:	c3 a0 00 00 	ret

00000d38 <_ZN3arm8set_servEii>:

void arm::set_serv(int x,int y){
 d38:	37 9c ff f8 	addi sp,sp,-8
 d3c:	5b 8b 00 08 	sw (sp+8),r11
 d40:	5b 9d 00 04 	sw (sp+4),ra
	serv1 = x;
	serv2 = y;

	der = DER;
	iz  = IZ;
 d44:	34 04 00 05 	mvi r4,5
 d48:	58 24 00 10 	sw (r1+16),r4
	mid = MID;
 d4c:	34 04 00 0d 	mvi r4,13
 d50:	58 24 00 14 	sw (r1+20),r4

	atr = ATR;
 d54:	34 04 00 12 	mvi r4,18
	serv2 = y;
 d58:	58 23 00 08 	sw (r1+8),r3
	atr = ATR;
 d5c:	58 24 00 18 	sw (r1+24),r4
	der = DER;
 d60:	34 03 00 19 	mvi r3,25
	ade = ADE;
 d64:	34 04 00 0c 	mvi r4,12
 d68:	58 24 00 1c 	sw (r1+28),r4
	serv1 = x;
 d6c:	58 22 00 04 	sw (r1+4),r2
	der = DER;
 d70:	58 23 00 0c 	sw (r1+12),r3

	pwm_period(serv1,200);
 d74:	34 03 00 c8 	mvi r3,200
void arm::set_serv(int x,int y){
 d78:	b8 20 58 00 	mv r11,r1
	pwm_period(serv1,200);
 d7c:	fb ff fe e9 	calli 920 <_ZN3pwm10pwm_periodEij>
	pwm_period(serv2,200);
 d80:	29 62 00 08 	lw r2,(r11+8)
 d84:	b9 60 08 00 	mv r1,r11
 d88:	34 03 00 c8 	mvi r3,200
 d8c:	fb ff fe e5 	calli 920 <_ZN3pwm10pwm_periodEij>
	pwm_duty(serv1,mid);
 d90:	29 63 00 14 	lw r3,(r11+20)
 d94:	29 62 00 04 	lw r2,(r11+4)
 d98:	b9 60 08 00 	mv r1,r11
 d9c:	fb ff fe bd 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pwm_duty(serv2,atr);
 da0:	29 63 00 18 	lw r3,(r11+24)
 da4:	29 62 00 08 	lw r2,(r11+8)
 da8:	b9 60 08 00 	mv r1,r11
 dac:	fb ff fe b9 	calli 890 <_ZN3pwm8pwm_dutyEij>
	pwm_en(serv1,1);
 db0:	29 62 00 04 	lw r2,(r11+4)
 db4:	b9 60 08 00 	mv r1,r11
 db8:	34 03 00 01 	mvi r3,1
 dbc:	fb ff fe 91 	calli 800 <_ZN3pwm6pwm_enEij>
	pwm_en(serv2,1);
 dc0:	29 62 00 08 	lw r2,(r11+8)
 dc4:	34 03 00 01 	mvi r3,1
 dc8:	b9 60 08 00 	mv r1,r11
 dcc:	fb ff fe 8d 	calli 800 <_ZN3pwm6pwm_enEij>
	pause();
 dd0:	b9 60 08 00 	mv r1,r11
 dd4:	fb ff fe 84 	calli 7e4 <_ZN3pwm5pauseEv>
};
 dd8:	2b 9d 00 04 	lw ra,(sp+4)
 ddc:	2b 8b 00 08 	lw r11,(sp+8)
 de0:	37 9c 00 08 	addi sp,sp,8
 de4:	c3 a0 00 00 	ret

00000de8 <_ZN3arm5calibEci>:

void arm::calib(char dir,int val){
	switch(dir){
 de8:	34 42 ff e0 	addi r2,r2,-32
 dec:	20 42 00 ff 	andi r2,r2,0xff
 df0:	34 04 00 04 	mvi r4,4
 df4:	54 44 00 09 	bgu r2,r4,e18 <_ZN3arm5calibEci+0x30>
 df8:	78 05 00 00 	mvhi r5,0x0
 dfc:	38 a5 0e 94 	ori r5,r5,0xe94
 e00:	28 a4 00 00 	lw r4,(r5+0)
 e04:	3c 42 00 02 	sli r2,r2,2
 e08:	b4 82 10 00 	add r2,r4,r2
 e0c:	28 42 00 00 	lw r2,(r2+0)
 e10:	c0 40 00 00 	b r2
		case 0x23:
			atr = val;
			break;

		case 0x24:
			ade = val;
 e14:	58 23 00 1c 	sw (r1+28),r3
			break;
	}
};
 e18:	c3 a0 00 00 	ret
			atr = val;
 e1c:	58 23 00 18 	sw (r1+24),r3
};
 e20:	c3 a0 00 00 	ret
			der = val;
 e24:	58 23 00 0c 	sw (r1+12),r3
};
 e28:	c3 a0 00 00 	ret
			iz = val;
 e2c:	58 23 00 10 	sw (r1+16),r3
};
 e30:	c3 a0 00 00 	ret
			mid = val;
 e34:	58 23 00 14 	sw (r1+20),r3
};
 e38:	c3 a0 00 00 	ret
