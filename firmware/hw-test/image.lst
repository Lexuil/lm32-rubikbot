
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c50  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000006c  00000c50  00000c50  00000ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000cbc  00000cbc  00000d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000cd4  00000cd4  00000d28  2**2
                  ALLOC
  4 .debug_frame  000001ac  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2f  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000332  00000000  00000000  00001b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00001e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a77  00000000  00000000  00001e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033e  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00002c52  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000055d  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 bc 	calli 3bc <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0c e0 	ori gp,gp,0xce0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0c d4 	ori r1,r1,0xcd4
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0d 60 	ori r3,r3,0xd60

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"

int period = 0;
int duty = 0;

int main(){
 208:	37 9c ff f8 	addi sp,sp,-8
 20c:	5b 8b 00 08 	sw (sp+8),r11
 210:	5b 9d 00 04 	sw (sp+4),ra
	pwm_period(7,200);
 214:	34 02 00 c8 	mvi r2,200
 218:	34 01 00 07 	mvi r1,7
 21c:	f8 00 01 91 	calli 860 <pwm_period>
	pwm_duty(7,10);
 220:	34 02 00 0a 	mvi r2,10
 224:	34 01 00 07 	mvi r1,7
 228:	f8 00 01 52 	calli 770 <pwm_duty>
	pwm_en(7,1);
 22c:	34 02 00 01 	mvi r2,1
 230:	34 01 00 07 	mvi r1,7
 234:	f8 00 01 13 	calli 680 <pwm_en>

	pwm_period(5,200);
 238:	34 02 00 c8 	mvi r2,200
 23c:	34 01 00 05 	mvi r1,5
 240:	f8 00 01 88 	calli 860 <pwm_period>
	pwm_duty(5,10);
 244:	34 02 00 0a 	mvi r2,10
 248:	34 01 00 05 	mvi r1,5
 24c:	f8 00 01 49 	calli 770 <pwm_duty>
	pwm_en(5,1);
 250:	34 02 00 01 	mvi r2,1
 254:	34 01 00 05 	mvi r1,5
 258:	f8 00 01 0a 	calli 680 <pwm_en>

	pwm_period(3,200);
 25c:	34 02 00 c8 	mvi r2,200
 260:	34 01 00 03 	mvi r1,3
 264:	f8 00 01 7f 	calli 860 <pwm_period>
	pwm_duty(3,10);
 268:	34 02 00 0a 	mvi r2,10
 26c:	34 01 00 03 	mvi r1,3
 270:	f8 00 01 40 	calli 770 <pwm_duty>
	pwm_en(3,1);
 274:	34 02 00 01 	mvi r2,1
 278:	34 01 00 03 	mvi r1,3
 27c:	f8 00 01 01 	calli 680 <pwm_en>

	pwm_period(2,200);
 280:	34 02 00 c8 	mvi r2,200
 284:	34 01 00 02 	mvi r1,2
 288:	f8 00 01 76 	calli 860 <pwm_period>
	pwm_duty(2,10);
 28c:	34 02 00 0a 	mvi r2,10
 290:	34 01 00 02 	mvi r1,2
 294:	f8 00 01 37 	calli 770 <pwm_duty>
	pwm_en(2,1);
 298:	34 02 00 01 	mvi r2,1
 29c:	34 01 00 02 	mvi r1,2
 2a0:	f8 00 00 f8 	calli 680 <pwm_en>

	pwm_period(0,200);
 2a4:	34 02 00 c8 	mvi r2,200
 2a8:	34 01 00 00 	mvi r1,0
 2ac:	f8 00 01 6d 	calli 860 <pwm_period>
	pwm_duty(0,10);
 2b0:	34 02 00 0a 	mvi r2,10
 2b4:	34 01 00 00 	mvi r1,0
 2b8:	f8 00 01 2e 	calli 770 <pwm_duty>
	pwm_en(0,1);
 2bc:	34 02 00 01 	mvi r2,1
 2c0:	34 01 00 00 	mvi r1,0
 2c4:	f8 00 00 ef 	calli 680 <pwm_en>

	duty = pwm_getduty(0);
 2c8:	78 01 00 00 	mvhi r1,0x0
 2cc:	38 21 0c 50 	ori r1,r1,0xc50
 2d0:	28 2b 00 00 	lw r11,(r1+0)
 2d4:	34 01 00 00 	mvi r1,0
 2d8:	f8 00 01 de 	calli a50 <pwm_getduty>
 2dc:	59 61 00 00 	sw (r11+0),r1
	period = pwm_getperiod(0);
 2e0:	34 01 00 00 	mvi r1,0
 2e4:	f8 00 02 1b 	calli b50 <pwm_getperiod>
 2e8:	78 05 00 00 	mvhi r5,0x0
 2ec:	38 a5 0c 54 	ori r5,r5,0xc54
 2f0:	28 a4 00 00 	lw r4,(r5+0)
 2f4:	b8 20 18 00 	mv r3,r1

	pwm_period(4,period);
 2f8:	b8 20 10 00 	mv r2,r1
 2fc:	34 01 00 04 	mvi r1,4
	period = pwm_getperiod(0);
 300:	58 83 00 00 	sw (r4+0),r3
	pwm_period(4,period);
 304:	f8 00 01 57 	calli 860 <pwm_period>
	pwm_duty(4,duty);
 308:	29 62 00 00 	lw r2,(r11+0)
 30c:	34 01 00 04 	mvi r1,4

	msleep(1000000);

	while(1){
		pwm_duty(0,13);
		msleep(1000000);
 310:	38 0b 42 40 	mvu r11,0x4240
 314:	79 6b 00 0f 	orhi r11,r11,0xf
	pwm_duty(4,duty);
 318:	f8 00 01 16 	calli 770 <pwm_duty>
	pwm_en(4,1);
 31c:	34 01 00 04 	mvi r1,4
 320:	34 02 00 01 	mvi r2,1
 324:	f8 00 00 d7 	calli 680 <pwm_en>
	msleep(1000000);
 328:	b9 60 08 00 	mv r1,r11
 32c:	f8 00 00 57 	calli 488 <msleep>
		pwm_duty(0,13);
 330:	34 02 00 0d 	mvi r2,13
 334:	34 01 00 00 	mvi r1,0
 338:	f8 00 01 0e 	calli 770 <pwm_duty>
		msleep(1000000);
 33c:	b9 60 08 00 	mv r1,r11
 340:	f8 00 00 52 	calli 488 <msleep>
		pwm_duty(0,15);
 344:	34 02 00 0f 	mvi r2,15
 348:	34 01 00 00 	mvi r1,0
 34c:	f8 00 01 09 	calli 770 <pwm_duty>
		msleep(1000000);
 350:	b9 60 08 00 	mv r1,r11
 354:	f8 00 00 4d 	calli 488 <msleep>
		pwm_duty(0,20);
 358:	34 02 00 14 	mvi r2,20
 35c:	34 01 00 00 	mvi r1,0
 360:	f8 00 01 04 	calli 770 <pwm_duty>
		msleep(1000000);
 364:	b9 60 08 00 	mv r1,r11
 368:	f8 00 00 48 	calli 488 <msleep>
		pwm_duty(0,10);
 36c:	34 02 00 0a 	mvi r2,10
 370:	34 01 00 00 	mvi r1,0
 374:	f8 00 00 ff 	calli 770 <pwm_duty>
		msleep(1000000);
 378:	b9 60 08 00 	mv r1,r11
 37c:	f8 00 00 43 	calli 488 <msleep>
 380:	e3 ff ff ec 	bi 330 <main+0x128>

00000384 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 384:	78 01 00 00 	mvhi r1,0x0
 388:	38 21 0c 58 	ori r1,r1,0xc58
 38c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 390:	78 04 00 00 	mvhi r4,0x0
 394:	38 84 0c 5c 	ori r4,r4,0xc5c
 398:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 39c:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3a0:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 3a4:	34 21 00 01 	addi r1,r1,1
 3a8:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3ac:	34 01 00 0e 	mvi r1,14
 3b0:	58 61 00 00 	sw (r3+0),r1
}
 3b4:	c3 a0 00 00 	ret

000003b8 <isr_null>:
 3b8:	c3 a0 00 00 	ret

000003bc <irq_handler>:
{
 3bc:	37 9c ff f0 	addi sp,sp,-16
 3c0:	5b 8b 00 10 	sw (sp+16),r11
 3c4:	5b 8c 00 0c 	sw (sp+12),r12
 3c8:	5b 8d 00 08 	sw (sp+8),r13
 3cc:	5b 9d 00 04 	sw (sp+4),ra
 3d0:	78 02 00 00 	mvhi r2,0x0
 3d4:	38 42 0c 60 	ori r2,r2,0xc60
 3d8:	28 4b 00 00 	lw r11,(r2+0)
 3dc:	b8 20 60 00 	mv r12,r1
 3e0:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 3e4:	21 81 00 01 	andi r1,r12,0x1
 3e8:	44 20 00 03 	be r1,r0,3f4 <irq_handler+0x38>
 3ec:	29 61 00 00 	lw r1,(r11+0)
 3f0:	d8 20 00 00 	call r1
 3f4:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 3f8:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 3fc:	5d ab ff fa 	bne r13,r11,3e4 <irq_handler+0x28>
}
 400:	2b 9d 00 04 	lw ra,(sp+4)
 404:	2b 8b 00 10 	lw r11,(sp+16)
 408:	2b 8c 00 0c 	lw r12,(sp+12)
 40c:	2b 8d 00 08 	lw r13,(sp+8)
 410:	37 9c 00 10 	addi sp,sp,16
 414:	c3 a0 00 00 	ret

00000418 <isr_init>:
{
 418:	78 02 00 00 	mvhi r2,0x0
 41c:	38 42 0c 64 	ori r2,r2,0xc64
 420:	28 41 00 00 	lw r1,(r2+0)
 424:	78 02 00 00 	mvhi r2,0x0
 428:	38 42 0c 68 	ori r2,r2,0xc68
 42c:	28 43 00 00 	lw r3,(r2+0)
 430:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 434:	58 23 00 00 	sw (r1+0),r3
 438:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 43c:	5c 22 ff fe 	bne r1,r2,434 <isr_init+0x1c>
}
 440:	c3 a0 00 00 	ret

00000444 <isr_register>:
	isr_table[irq] = isr;
 444:	78 04 00 00 	mvhi r4,0x0
 448:	38 84 0c 6c 	ori r4,r4,0xc6c
 44c:	3c 23 00 02 	sli r3,r1,2
 450:	28 81 00 00 	lw r1,(r4+0)
 454:	b4 23 08 00 	add r1,r1,r3
 458:	58 22 00 00 	sw (r1+0),r2
}
 45c:	c3 a0 00 00 	ret

00000460 <isr_unregister>:
	isr_table[irq] = &isr_null;
 460:	78 03 00 00 	mvhi r3,0x0
 464:	38 63 0c 70 	ori r3,r3,0xc70
 468:	3c 22 00 02 	sli r2,r1,2
 46c:	28 61 00 00 	lw r1,(r3+0)
 470:	78 03 00 00 	mvhi r3,0x0
 474:	38 63 0c 74 	ori r3,r3,0xc74
 478:	b4 22 08 00 	add r1,r1,r2
 47c:	28 62 00 00 	lw r2,(r3+0)
 480:	58 22 00 00 	sw (r1+0),r2
}
 484:	c3 a0 00 00 	ret

00000488 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 488:	78 03 00 00 	mvhi r3,0x0
 48c:	38 02 c3 50 	mvu r2,0xc350
 490:	38 63 0c 78 	ori r3,r3,0xc78
 494:	88 22 08 00 	mul r1,r1,r2
 498:	28 62 00 00 	lw r2,(r3+0)
 49c:	28 42 00 00 	lw r2,(r2+0)
 4a0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4a4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4a8:	34 01 00 08 	mvi r1,8
 4ac:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 4b0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4b4:	20 21 00 01 	andi r1,r1,0x1
 4b8:	44 20 ff fe 	be r1,r0,4b0 <msleep+0x28>
}
 4bc:	c3 a0 00 00 	ret

000004c0 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 4c0:	78 03 00 00 	mvhi r3,0x0
 4c4:	38 63 0c 7c 	ori r3,r3,0xc7c
 4c8:	28 62 00 00 	lw r2,(r3+0)
 4cc:	08 21 00 32 	muli r1,r1,50
 4d0:	28 42 00 00 	lw r2,(r2+0)
 4d4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4d8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4dc:	34 01 00 08 	mvi r1,8
 4e0:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 4e4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4e8:	20 21 00 01 	andi r1,r1,0x1
 4ec:	44 20 ff fe 	be r1,r0,4e4 <nsleep+0x24>
}
 4f0:	c3 a0 00 00 	ret

000004f4 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4f4:	78 02 00 00 	mvhi r2,0x0
 4f8:	38 42 0c 80 	ori r2,r2,0xc80
 4fc:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 500:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 504:	34 02 13 88 	mvi r2,5000
 508:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 50c:	38 63 0c 84 	ori r3,r3,0xc84
	timer0->compare0 = (FCPU/10000);
 510:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 514:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 518:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 51c:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 520:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 524:	34 02 00 0e 	mvi r2,14
 528:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 0c 88 	ori r2,r2,0xc88
 534:	38 63 0c 8c 	ori r3,r3,0xc8c
 538:	28 41 00 00 	lw r1,(r2+0)
 53c:	28 62 00 00 	lw r2,(r3+0)
 540:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 544:	c3 a0 00 00 	ret

00000548 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 548:	c3 a0 00 00 	ret

0000054c <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 54c:	78 02 00 00 	mvhi r2,0x0
 550:	38 42 0c 90 	ori r2,r2,0xc90
 554:	28 41 00 00 	lw r1,(r2+0)
 558:	28 22 00 00 	lw r2,(r1+0)
 55c:	28 41 00 00 	lw r1,(r2+0)
 560:	20 21 00 01 	andi r1,r1,0x1
 564:	44 20 ff fe 	be r1,r0,55c <uart_getchar+0x10>
	return uart0->rxtx;
 568:	28 41 00 04 	lw r1,(r2+4)
}
 56c:	20 21 00 ff 	andi r1,r1,0xff
 570:	c3 a0 00 00 	ret

00000574 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 574:	78 03 00 00 	mvhi r3,0x0
 578:	38 63 0c 94 	ori r3,r3,0xc94
 57c:	28 62 00 00 	lw r2,(r3+0)
{
 580:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 584:	28 43 00 00 	lw r3,(r2+0)
 588:	28 62 00 00 	lw r2,(r3+0)
 58c:	20 42 00 10 	andi r2,r2,0x10
 590:	5c 40 ff fe 	bne r2,r0,588 <uart_putchar+0x14>
	uart0->rxtx = c;
 594:	58 61 00 04 	sw (r3+4),r1
}
 598:	c3 a0 00 00 	ret

0000059c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 59c:	40 24 00 00 	lbu r4,(r1+0)
 5a0:	44 80 00 0c 	be r4,r0,5d0 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 5a4:	78 03 00 00 	mvhi r3,0x0
 5a8:	38 63 0c 98 	ori r3,r3,0xc98
 5ac:	28 62 00 00 	lw r2,(r3+0)
 5b0:	28 43 00 00 	lw r3,(r2+0)
 5b4:	28 62 00 00 	lw r2,(r3+0)
 5b8:	20 42 00 10 	andi r2,r2,0x10
 5bc:	5c 40 ff fe 	bne r2,r0,5b4 <uart_putstr+0x18>
	uart0->rxtx = c;
 5c0:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 5c4:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 5c8:	40 24 00 00 	lbu r4,(r1+0)
 5cc:	5c 80 ff fa 	bne r4,r0,5b4 <uart_putstr+0x18>
	}
}
 5d0:	c3 a0 00 00 	ret

000005d4 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 5d4:	78 02 00 00 	mvhi r2,0x0
 5d8:	38 42 0c 9c 	ori r2,r2,0xc9c
 5dc:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 5e0:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 5e4:	28 21 00 00 	lw r1,(r1+0)
 5e8:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 5ec:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 5f0:	34 02 ff 80 	mvi r2,-128
 5f4:	30 22 00 02 	sb (r1+2),r2


}
 5f8:	c3 a0 00 00 	ret

000005fc <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 5fc:	78 05 00 00 	mvhi r5,0x0
 600:	38 a5 0c a0 	ori r5,r5,0xca0
 604:	28 a4 00 00 	lw r4,(r5+0)
 608:	3c 21 00 02 	sli r1,r1,2
{
 60c:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 610:	28 84 00 00 	lw r4,(r4+0)
 614:	20 21 00 fc 	andi r1,r1,0xfc
{
 618:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 61c:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 620:	34 01 ff 90 	mvi r1,-112
 624:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 628:	40 81 00 04 	lbu r1,(r4+4)
 62c:	20 21 00 02 	andi r1,r1,0x2
 630:	5c 20 ff fe 	bne r1,r0,628 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 634:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 638:	34 01 00 10 	mvi r1,16
 63c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 640:	40 81 00 04 	lbu r1,(r4+4)
 644:	20 21 00 02 	andi r1,r1,0x2
 648:	5c 20 ff fe 	bne r1,r0,640 <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 64c:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 650:	34 01 00 10 	mvi r1,16
 654:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 658:	40 81 00 04 	lbu r1,(r4+4)
 65c:	20 21 00 02 	andi r1,r1,0x2
 660:	5c 20 ff fe 	bne r1,r0,658 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 664:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 668:	34 01 00 50 	mvi r1,80
 66c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 670:	40 81 00 04 	lbu r1,(r4+4)
 674:	20 21 00 02 	andi r1,r1,0x2
 678:	5c 20 ff fe 	bne r1,r0,670 <i2c_write+0x74>
//7

}
 67c:	c3 a0 00 00 	ret

00000680 <pwm_en>:
 * PWM Functions
 */

void pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
 680:	5c 20 00 0e 	bne r1,r0,6b8 <pwm_en+0x38>
 684:	78 04 00 00 	mvhi r4,0x0
 688:	38 84 0c a4 	ori r4,r4,0xca4
 68c:	28 83 00 00 	lw r3,(r4+0)
 690:	28 63 00 00 	lw r3,(r3+0)
 694:	58 62 00 00 	sw (r3+0),r2
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
 698:	34 03 00 05 	mvi r3,5
 69c:	5c 23 00 16 	bne r1,r3,6f4 <pwm_en+0x74>
 6a0:	78 04 00 00 	mvhi r4,0x0
 6a4:	38 84 0c a4 	ori r4,r4,0xca4
 6a8:	28 81 00 00 	lw r1,(r4+0)
 6ac:	28 21 00 00 	lw r1,(r1+0)
 6b0:	58 22 00 3c 	sw (r1+60),r2
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

}
 6b4:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
 6b8:	34 03 00 01 	mvi r3,1
 6bc:	5c 23 00 07 	bne r1,r3,6d8 <pwm_en+0x58>
 6c0:	78 04 00 00 	mvhi r4,0x0
 6c4:	38 84 0c a4 	ori r4,r4,0xca4
 6c8:	28 83 00 00 	lw r3,(r4+0)
 6cc:	28 63 00 00 	lw r3,(r3+0)
 6d0:	58 62 00 0c 	sw (r3+12),r2
 6d4:	e3 ff ff f1 	bi 698 <pwm_en+0x18>
	if(sel == 2) pwm0->en2 = val;
 6d8:	34 03 00 02 	mvi r3,2
 6dc:	5c 23 00 0e 	bne r1,r3,714 <pwm_en+0x94>
 6e0:	78 04 00 00 	mvhi r4,0x0
 6e4:	38 84 0c a4 	ori r4,r4,0xca4
 6e8:	28 83 00 00 	lw r3,(r4+0)
 6ec:	28 63 00 00 	lw r3,(r3+0)
 6f0:	58 62 00 18 	sw (r3+24),r2
	if(sel == 6) pwm0->en6 = val;
 6f4:	34 03 00 06 	mvi r3,6
 6f8:	5c 23 00 0e 	bne r1,r3,730 <pwm_en+0xb0>
 6fc:	78 03 00 00 	mvhi r3,0x0
 700:	38 63 0c a4 	ori r3,r3,0xca4
 704:	28 61 00 00 	lw r1,(r3+0)
 708:	28 21 00 00 	lw r1,(r1+0)
 70c:	58 22 00 48 	sw (r1+72),r2
}
 710:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
 714:	34 03 00 03 	mvi r3,3
 718:	5c 23 00 0e 	bne r1,r3,750 <pwm_en+0xd0>
 71c:	78 04 00 00 	mvhi r4,0x0
 720:	38 84 0c a4 	ori r4,r4,0xca4
 724:	28 83 00 00 	lw r3,(r4+0)
 728:	28 63 00 00 	lw r3,(r3+0)
 72c:	58 62 00 24 	sw (r3+36),r2
	if(sel == 7) pwm0->en7 = val;
 730:	34 03 00 07 	mvi r3,7
 734:	5c 23 ff e0 	bne r1,r3,6b4 <pwm_en+0x34>
 738:	78 04 00 00 	mvhi r4,0x0
 73c:	38 84 0c a4 	ori r4,r4,0xca4
 740:	28 81 00 00 	lw r1,(r4+0)
 744:	28 21 00 00 	lw r1,(r1+0)
 748:	58 22 00 54 	sw (r1+84),r2
}
 74c:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
 750:	34 03 00 04 	mvi r3,4
 754:	5c 23 ff d1 	bne r1,r3,698 <pwm_en+0x18>
 758:	78 03 00 00 	mvhi r3,0x0
 75c:	38 63 0c a4 	ori r3,r3,0xca4
 760:	28 61 00 00 	lw r1,(r3+0)
 764:	28 21 00 00 	lw r1,(r1+0)
 768:	58 22 00 30 	sw (r1+48),r2
}
 76c:	c3 a0 00 00 	ret

00000770 <pwm_duty>:

void pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
 770:	5c 20 00 0e 	bne r1,r0,7a8 <pwm_duty+0x38>
 774:	78 04 00 00 	mvhi r4,0x0
 778:	38 84 0c a8 	ori r4,r4,0xca8
 77c:	28 83 00 00 	lw r3,(r4+0)
 780:	28 63 00 00 	lw r3,(r3+0)
 784:	58 62 00 08 	sw (r3+8),r2
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
 788:	34 03 00 05 	mvi r3,5
 78c:	5c 23 00 16 	bne r1,r3,7e4 <pwm_duty+0x74>
 790:	78 04 00 00 	mvhi r4,0x0
 794:	38 84 0c a8 	ori r4,r4,0xca8
 798:	28 81 00 00 	lw r1,(r4+0)
 79c:	28 21 00 00 	lw r1,(r1+0)
 7a0:	58 22 00 44 	sw (r1+68),r2
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

}
 7a4:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
 7a8:	34 03 00 01 	mvi r3,1
 7ac:	5c 23 00 07 	bne r1,r3,7c8 <pwm_duty+0x58>
 7b0:	78 04 00 00 	mvhi r4,0x0
 7b4:	38 84 0c a8 	ori r4,r4,0xca8
 7b8:	28 83 00 00 	lw r3,(r4+0)
 7bc:	28 63 00 00 	lw r3,(r3+0)
 7c0:	58 62 00 14 	sw (r3+20),r2
 7c4:	e3 ff ff f1 	bi 788 <pwm_duty+0x18>
	if(sel == 2) pwm0->duty2 = val;
 7c8:	34 03 00 02 	mvi r3,2
 7cc:	5c 23 00 0e 	bne r1,r3,804 <pwm_duty+0x94>
 7d0:	78 04 00 00 	mvhi r4,0x0
 7d4:	38 84 0c a8 	ori r4,r4,0xca8
 7d8:	28 83 00 00 	lw r3,(r4+0)
 7dc:	28 63 00 00 	lw r3,(r3+0)
 7e0:	58 62 00 20 	sw (r3+32),r2
	if(sel == 6) pwm0->duty6 = val;
 7e4:	34 03 00 06 	mvi r3,6
 7e8:	5c 23 00 0e 	bne r1,r3,820 <pwm_duty+0xb0>
 7ec:	78 03 00 00 	mvhi r3,0x0
 7f0:	38 63 0c a8 	ori r3,r3,0xca8
 7f4:	28 61 00 00 	lw r1,(r3+0)
 7f8:	28 21 00 00 	lw r1,(r1+0)
 7fc:	58 22 00 50 	sw (r1+80),r2
}
 800:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
 804:	34 03 00 03 	mvi r3,3
 808:	5c 23 00 0e 	bne r1,r3,840 <pwm_duty+0xd0>
 80c:	78 04 00 00 	mvhi r4,0x0
 810:	38 84 0c a8 	ori r4,r4,0xca8
 814:	28 83 00 00 	lw r3,(r4+0)
 818:	28 63 00 00 	lw r3,(r3+0)
 81c:	58 62 00 2c 	sw (r3+44),r2
	if(sel == 7) pwm0->duty7 = val;
 820:	34 03 00 07 	mvi r3,7
 824:	5c 23 ff e0 	bne r1,r3,7a4 <pwm_duty+0x34>
 828:	78 04 00 00 	mvhi r4,0x0
 82c:	38 84 0c a8 	ori r4,r4,0xca8
 830:	28 81 00 00 	lw r1,(r4+0)
 834:	28 21 00 00 	lw r1,(r1+0)
 838:	58 22 00 5c 	sw (r1+92),r2
}
 83c:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
 840:	34 03 00 04 	mvi r3,4
 844:	5c 23 ff d1 	bne r1,r3,788 <pwm_duty+0x18>
 848:	78 03 00 00 	mvhi r3,0x0
 84c:	38 63 0c a8 	ori r3,r3,0xca8
 850:	28 61 00 00 	lw r1,(r3+0)
 854:	28 21 00 00 	lw r1,(r1+0)
 858:	58 22 00 38 	sw (r1+56),r2
}
 85c:	c3 a0 00 00 	ret

00000860 <pwm_period>:

void pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
 860:	5c 20 00 0e 	bne r1,r0,898 <pwm_period+0x38>
 864:	78 04 00 00 	mvhi r4,0x0
 868:	38 84 0c ac 	ori r4,r4,0xcac
 86c:	28 83 00 00 	lw r3,(r4+0)
 870:	28 63 00 00 	lw r3,(r3+0)
 874:	58 62 00 04 	sw (r3+4),r2
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
 878:	34 03 00 05 	mvi r3,5
 87c:	5c 23 00 16 	bne r1,r3,8d4 <pwm_period+0x74>
 880:	78 04 00 00 	mvhi r4,0x0
 884:	38 84 0c ac 	ori r4,r4,0xcac
 888:	28 81 00 00 	lw r1,(r4+0)
 88c:	28 21 00 00 	lw r1,(r1+0)
 890:	58 22 00 40 	sw (r1+64),r2
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

}
 894:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
 898:	34 03 00 01 	mvi r3,1
 89c:	5c 23 00 07 	bne r1,r3,8b8 <pwm_period+0x58>
 8a0:	78 04 00 00 	mvhi r4,0x0
 8a4:	38 84 0c ac 	ori r4,r4,0xcac
 8a8:	28 83 00 00 	lw r3,(r4+0)
 8ac:	28 63 00 00 	lw r3,(r3+0)
 8b0:	58 62 00 10 	sw (r3+16),r2
 8b4:	e3 ff ff f1 	bi 878 <pwm_period+0x18>
	if(sel == 2) pwm0->period2 = val;
 8b8:	34 03 00 02 	mvi r3,2
 8bc:	5c 23 00 0e 	bne r1,r3,8f4 <pwm_period+0x94>
 8c0:	78 04 00 00 	mvhi r4,0x0
 8c4:	38 84 0c ac 	ori r4,r4,0xcac
 8c8:	28 83 00 00 	lw r3,(r4+0)
 8cc:	28 63 00 00 	lw r3,(r3+0)
 8d0:	58 62 00 1c 	sw (r3+28),r2
	if(sel == 6) pwm0->period6 = val;
 8d4:	34 03 00 06 	mvi r3,6
 8d8:	5c 23 00 0e 	bne r1,r3,910 <pwm_period+0xb0>
 8dc:	78 03 00 00 	mvhi r3,0x0
 8e0:	38 63 0c ac 	ori r3,r3,0xcac
 8e4:	28 61 00 00 	lw r1,(r3+0)
 8e8:	28 21 00 00 	lw r1,(r1+0)
 8ec:	58 22 00 4c 	sw (r1+76),r2
}
 8f0:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
 8f4:	34 03 00 03 	mvi r3,3
 8f8:	5c 23 00 0e 	bne r1,r3,930 <pwm_period+0xd0>
 8fc:	78 04 00 00 	mvhi r4,0x0
 900:	38 84 0c ac 	ori r4,r4,0xcac
 904:	28 83 00 00 	lw r3,(r4+0)
 908:	28 63 00 00 	lw r3,(r3+0)
 90c:	58 62 00 28 	sw (r3+40),r2
	if(sel == 7) pwm0->period7 = val;
 910:	34 03 00 07 	mvi r3,7
 914:	5c 23 ff e0 	bne r1,r3,894 <pwm_period+0x34>
 918:	78 04 00 00 	mvhi r4,0x0
 91c:	38 84 0c ac 	ori r4,r4,0xcac
 920:	28 81 00 00 	lw r1,(r4+0)
 924:	28 21 00 00 	lw r1,(r1+0)
 928:	58 22 00 58 	sw (r1+88),r2
}
 92c:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
 930:	34 03 00 04 	mvi r3,4
 934:	5c 23 ff d1 	bne r1,r3,878 <pwm_period+0x18>
 938:	78 03 00 00 	mvhi r3,0x0
 93c:	38 63 0c ac 	ori r3,r3,0xcac
 940:	28 61 00 00 	lw r1,(r3+0)
 944:	28 21 00 00 	lw r1,(r1+0)
 948:	58 22 00 34 	sw (r1+52),r2
}
 94c:	c3 a0 00 00 	ret

00000950 <pwm_geten>:

uint32_t pwm_geten(uint32_t sel){

	if(sel == 0) return pwm0->en0;
 950:	44 20 00 10 	be r1,r0,990 <pwm_geten+0x40>
	if(sel == 1) return pwm0->en1;
 954:	34 02 00 01 	mvi r2,1
 958:	44 22 00 14 	be r1,r2,9a8 <pwm_geten+0x58>
	if(sel == 2) return pwm0->en2;
 95c:	34 02 00 02 	mvi r2,2
 960:	44 22 00 1e 	be r1,r2,9d8 <pwm_geten+0x88>
	if(sel == 3) return pwm0->en3;
 964:	34 02 00 03 	mvi r2,3
 968:	44 22 00 16 	be r1,r2,9c0 <pwm_geten+0x70>
	if(sel == 4) return pwm0->en4;
 96c:	34 02 00 04 	mvi r2,4
 970:	44 22 00 20 	be r1,r2,9f0 <pwm_geten+0xa0>
	if(sel == 5) return pwm0->en5;
 974:	34 02 00 05 	mvi r2,5
 978:	44 22 00 2a 	be r1,r2,a20 <pwm_geten+0xd0>
	if(sel == 6) return pwm0->en6;
 97c:	34 02 00 06 	mvi r2,6
 980:	44 22 00 2e 	be r1,r2,a38 <pwm_geten+0xe8>
	if(sel == 7) return pwm0->en7;
 984:	34 02 00 07 	mvi r2,7
 988:	44 22 00 20 	be r1,r2,a08 <pwm_geten+0xb8>

}
 98c:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->en0;
 990:	78 02 00 00 	mvhi r2,0x0
 994:	38 42 0c b0 	ori r2,r2,0xcb0
 998:	28 41 00 00 	lw r1,(r2+0)
 99c:	28 21 00 00 	lw r1,(r1+0)
 9a0:	28 21 00 00 	lw r1,(r1+0)
}
 9a4:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
 9a8:	78 02 00 00 	mvhi r2,0x0
 9ac:	38 42 0c b0 	ori r2,r2,0xcb0
 9b0:	28 41 00 00 	lw r1,(r2+0)
 9b4:	28 21 00 00 	lw r1,(r1+0)
 9b8:	28 21 00 0c 	lw r1,(r1+12)
}
 9bc:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
 9c0:	78 02 00 00 	mvhi r2,0x0
 9c4:	38 42 0c b0 	ori r2,r2,0xcb0
 9c8:	28 41 00 00 	lw r1,(r2+0)
 9cc:	28 21 00 00 	lw r1,(r1+0)
 9d0:	28 21 00 24 	lw r1,(r1+36)
}
 9d4:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
 9d8:	78 02 00 00 	mvhi r2,0x0
 9dc:	38 42 0c b0 	ori r2,r2,0xcb0
 9e0:	28 41 00 00 	lw r1,(r2+0)
 9e4:	28 21 00 00 	lw r1,(r1+0)
 9e8:	28 21 00 18 	lw r1,(r1+24)
}
 9ec:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
 9f0:	78 02 00 00 	mvhi r2,0x0
 9f4:	38 42 0c b0 	ori r2,r2,0xcb0
 9f8:	28 41 00 00 	lw r1,(r2+0)
 9fc:	28 21 00 00 	lw r1,(r1+0)
 a00:	28 21 00 30 	lw r1,(r1+48)
}
 a04:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->en7;
 a08:	78 02 00 00 	mvhi r2,0x0
 a0c:	38 42 0c b0 	ori r2,r2,0xcb0
 a10:	28 41 00 00 	lw r1,(r2+0)
 a14:	28 21 00 00 	lw r1,(r1+0)
 a18:	28 21 00 54 	lw r1,(r1+84)
}
 a1c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
 a20:	78 02 00 00 	mvhi r2,0x0
 a24:	38 42 0c b0 	ori r2,r2,0xcb0
 a28:	28 41 00 00 	lw r1,(r2+0)
 a2c:	28 21 00 00 	lw r1,(r1+0)
 a30:	28 21 00 3c 	lw r1,(r1+60)
}
 a34:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
 a38:	78 02 00 00 	mvhi r2,0x0
 a3c:	38 42 0c b0 	ori r2,r2,0xcb0
 a40:	28 41 00 00 	lw r1,(r2+0)
 a44:	28 21 00 00 	lw r1,(r1+0)
 a48:	28 21 00 48 	lw r1,(r1+72)
}
 a4c:	c3 a0 00 00 	ret

00000a50 <pwm_getduty>:

uint32_t pwm_getduty(uint32_t sel){

	if(sel == 0) return pwm0->duty0;
 a50:	44 20 00 10 	be r1,r0,a90 <pwm_getduty+0x40>
	if(sel == 1) return pwm0->duty1;
 a54:	34 02 00 01 	mvi r2,1
 a58:	44 22 00 14 	be r1,r2,aa8 <pwm_getduty+0x58>
	if(sel == 2) return pwm0->duty2;
 a5c:	34 02 00 02 	mvi r2,2
 a60:	44 22 00 1e 	be r1,r2,ad8 <pwm_getduty+0x88>
	if(sel == 3) return pwm0->duty3;
 a64:	34 02 00 03 	mvi r2,3
 a68:	44 22 00 16 	be r1,r2,ac0 <pwm_getduty+0x70>
	if(sel == 4) return pwm0->duty4;
 a6c:	34 02 00 04 	mvi r2,4
 a70:	44 22 00 20 	be r1,r2,af0 <pwm_getduty+0xa0>
	if(sel == 5) return pwm0->duty5;
 a74:	34 02 00 05 	mvi r2,5
 a78:	44 22 00 2a 	be r1,r2,b20 <pwm_getduty+0xd0>
	if(sel == 6) return pwm0->duty6;
 a7c:	34 02 00 06 	mvi r2,6
 a80:	44 22 00 2e 	be r1,r2,b38 <pwm_getduty+0xe8>
	if(sel == 7) return pwm0->duty7;
 a84:	34 02 00 07 	mvi r2,7
 a88:	44 22 00 20 	be r1,r2,b08 <pwm_getduty+0xb8>
	
}
 a8c:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->duty0;
 a90:	78 02 00 00 	mvhi r2,0x0
 a94:	38 42 0c b4 	ori r2,r2,0xcb4
 a98:	28 41 00 00 	lw r1,(r2+0)
 a9c:	28 21 00 00 	lw r1,(r1+0)
 aa0:	28 21 00 08 	lw r1,(r1+8)
}
 aa4:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
 aa8:	78 02 00 00 	mvhi r2,0x0
 aac:	38 42 0c b4 	ori r2,r2,0xcb4
 ab0:	28 41 00 00 	lw r1,(r2+0)
 ab4:	28 21 00 00 	lw r1,(r1+0)
 ab8:	28 21 00 14 	lw r1,(r1+20)
}
 abc:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
 ac0:	78 02 00 00 	mvhi r2,0x0
 ac4:	38 42 0c b4 	ori r2,r2,0xcb4
 ac8:	28 41 00 00 	lw r1,(r2+0)
 acc:	28 21 00 00 	lw r1,(r1+0)
 ad0:	28 21 00 2c 	lw r1,(r1+44)
}
 ad4:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
 ad8:	78 02 00 00 	mvhi r2,0x0
 adc:	38 42 0c b4 	ori r2,r2,0xcb4
 ae0:	28 41 00 00 	lw r1,(r2+0)
 ae4:	28 21 00 00 	lw r1,(r1+0)
 ae8:	28 21 00 20 	lw r1,(r1+32)
}
 aec:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
 af0:	78 02 00 00 	mvhi r2,0x0
 af4:	38 42 0c b4 	ori r2,r2,0xcb4
 af8:	28 41 00 00 	lw r1,(r2+0)
 afc:	28 21 00 00 	lw r1,(r1+0)
 b00:	28 21 00 38 	lw r1,(r1+56)
}
 b04:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->duty7;
 b08:	78 02 00 00 	mvhi r2,0x0
 b0c:	38 42 0c b4 	ori r2,r2,0xcb4
 b10:	28 41 00 00 	lw r1,(r2+0)
 b14:	28 21 00 00 	lw r1,(r1+0)
 b18:	28 21 00 5c 	lw r1,(r1+92)
}
 b1c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
 b20:	78 02 00 00 	mvhi r2,0x0
 b24:	38 42 0c b4 	ori r2,r2,0xcb4
 b28:	28 41 00 00 	lw r1,(r2+0)
 b2c:	28 21 00 00 	lw r1,(r1+0)
 b30:	28 21 00 44 	lw r1,(r1+68)
}
 b34:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
 b38:	78 02 00 00 	mvhi r2,0x0
 b3c:	38 42 0c b4 	ori r2,r2,0xcb4
 b40:	28 41 00 00 	lw r1,(r2+0)
 b44:	28 21 00 00 	lw r1,(r1+0)
 b48:	28 21 00 50 	lw r1,(r1+80)
}
 b4c:	c3 a0 00 00 	ret

00000b50 <pwm_getperiod>:

uint32_t pwm_getperiod(uint32_t sel){

	if(sel == 0) return pwm0->period0;
 b50:	44 20 00 10 	be r1,r0,b90 <pwm_getperiod+0x40>
	if(sel == 1) return pwm0->period1;
 b54:	34 02 00 01 	mvi r2,1
 b58:	44 22 00 14 	be r1,r2,ba8 <pwm_getperiod+0x58>
	if(sel == 2) return pwm0->period2;
 b5c:	34 02 00 02 	mvi r2,2
 b60:	44 22 00 1e 	be r1,r2,bd8 <pwm_getperiod+0x88>
	if(sel == 3) return pwm0->period3;
 b64:	34 02 00 03 	mvi r2,3
 b68:	44 22 00 16 	be r1,r2,bc0 <pwm_getperiod+0x70>
	if(sel == 4) return pwm0->period4;
 b6c:	34 02 00 04 	mvi r2,4
 b70:	44 22 00 20 	be r1,r2,bf0 <pwm_getperiod+0xa0>
	if(sel == 5) return pwm0->period5;
 b74:	34 02 00 05 	mvi r2,5
 b78:	44 22 00 2a 	be r1,r2,c20 <pwm_getperiod+0xd0>
	if(sel == 6) return pwm0->period6;
 b7c:	34 02 00 06 	mvi r2,6
 b80:	44 22 00 2e 	be r1,r2,c38 <pwm_getperiod+0xe8>
	if(sel == 7) return pwm0->period7;
 b84:	34 02 00 07 	mvi r2,7
 b88:	44 22 00 20 	be r1,r2,c08 <pwm_getperiod+0xb8>
	
 b8c:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->period0;
 b90:	78 02 00 00 	mvhi r2,0x0
 b94:	38 42 0c b8 	ori r2,r2,0xcb8
 b98:	28 41 00 00 	lw r1,(r2+0)
 b9c:	28 21 00 00 	lw r1,(r1+0)
 ba0:	28 21 00 04 	lw r1,(r1+4)
 ba4:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
 ba8:	78 02 00 00 	mvhi r2,0x0
 bac:	38 42 0c b8 	ori r2,r2,0xcb8
 bb0:	28 41 00 00 	lw r1,(r2+0)
 bb4:	28 21 00 00 	lw r1,(r1+0)
 bb8:	28 21 00 10 	lw r1,(r1+16)
 bbc:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
 bc0:	78 02 00 00 	mvhi r2,0x0
 bc4:	38 42 0c b8 	ori r2,r2,0xcb8
 bc8:	28 41 00 00 	lw r1,(r2+0)
 bcc:	28 21 00 00 	lw r1,(r1+0)
 bd0:	28 21 00 28 	lw r1,(r1+40)
 bd4:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
 bd8:	78 02 00 00 	mvhi r2,0x0
 bdc:	38 42 0c b8 	ori r2,r2,0xcb8
 be0:	28 41 00 00 	lw r1,(r2+0)
 be4:	28 21 00 00 	lw r1,(r1+0)
 be8:	28 21 00 1c 	lw r1,(r1+28)
 bec:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
 bf0:	78 02 00 00 	mvhi r2,0x0
 bf4:	38 42 0c b8 	ori r2,r2,0xcb8
 bf8:	28 41 00 00 	lw r1,(r2+0)
 bfc:	28 21 00 00 	lw r1,(r1+0)
 c00:	28 21 00 34 	lw r1,(r1+52)
 c04:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->period7;
 c08:	78 02 00 00 	mvhi r2,0x0
 c0c:	38 42 0c b8 	ori r2,r2,0xcb8
 c10:	28 41 00 00 	lw r1,(r2+0)
 c14:	28 21 00 00 	lw r1,(r1+0)
 c18:	28 21 00 58 	lw r1,(r1+88)
 c1c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
 c20:	78 02 00 00 	mvhi r2,0x0
 c24:	38 42 0c b8 	ori r2,r2,0xcb8
 c28:	28 41 00 00 	lw r1,(r2+0)
 c2c:	28 21 00 00 	lw r1,(r1+0)
 c30:	28 21 00 40 	lw r1,(r1+64)
 c34:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
 c38:	78 02 00 00 	mvhi r2,0x0
 c3c:	38 42 0c b8 	ori r2,r2,0xcb8
 c40:	28 41 00 00 	lw r1,(r2+0)
 c44:	28 21 00 00 	lw r1,(r1+0)
 c48:	28 21 00 4c 	lw r1,(r1+76)
 c4c:	c3 a0 00 00 	ret
