
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000acc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000044  00000acc  00000acc  00000b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000b10  00000b10  00000b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000b1c  00000b1c  00000b70  2**2
                  ALLOC
  4 .debug_frame  00000254  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000178e  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  00002552  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000049b  00000000  00000000  00002c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000080  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00003120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000bbb  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ac  00000000  00000000  00003d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000041c7  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 90 	calli 30c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c ff fc 	ori sp,sp,0xfffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b 20 	ori gp,gp,0xb20
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0b 1c 	ori r1,r1,0xb1c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b a0 	ori r3,r3,0xba0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"
#include "servos.h"

int main(){
 208:	37 9c ff cc 	addi sp,sp,-52
 20c:	5b 9d 00 04 	sw (sp+4),ra
   volatile uint32_t en7;
   volatile uint32_t period7;
   volatile uint32_t duty7;
} pwm_t;

class  pwm{
 210:	78 04 50 00 	mvhi r4,0x5000
	arm arm1;
	arm arm2;
	arm arm3;
	arm arm4;

	arm1.set_serv(0,1);
 214:	37 81 00 08 	addi r1,sp,8
 218:	34 03 00 01 	mvi r3,1
 21c:	34 02 00 00 	mvi r2,0
 220:	5b 84 00 08 	sw (sp+8),r4
 224:	5b 84 00 14 	sw (sp+20),r4
 228:	5b 84 00 20 	sw (sp+32),r4
 22c:	5b 84 00 2c 	sw (sp+44),r4
 230:	f8 00 02 05 	calli a44 <_ZN3arm8set_servEii>
	arm2.set_serv(2,3);
 234:	37 81 00 14 	addi r1,sp,20
 238:	34 03 00 03 	mvi r3,3
 23c:	34 02 00 02 	mvi r2,2
 240:	f8 00 02 01 	calli a44 <_ZN3arm8set_servEii>
	arm3.set_serv(4,5);
 244:	37 81 00 20 	addi r1,sp,32
 248:	34 03 00 05 	mvi r3,5
 24c:	34 02 00 04 	mvi r2,4
 250:	f8 00 01 fd 	calli a44 <_ZN3arm8set_servEii>
	arm4.set_serv(6,7);
 254:	34 03 00 07 	mvi r3,7
 258:	34 02 00 06 	mvi r2,6
 25c:	37 81 00 2c 	addi r1,sp,44
 260:	f8 00 01 f9 	calli a44 <_ZN3arm8set_servEii>

	arm1.home();
 264:	37 81 00 08 	addi r1,sp,8
 268:	f8 00 01 a0 	calli 8e8 <_ZN3arm4homeEv>
	arm2.home();
 26c:	37 81 00 14 	addi r1,sp,20
 270:	f8 00 01 9e 	calli 8e8 <_ZN3arm4homeEv>
	arm3.home();
 274:	37 81 00 20 	addi r1,sp,32
 278:	f8 00 01 9c 	calli 8e8 <_ZN3arm4homeEv>
	arm4.home();
 27c:	37 81 00 2c 	addi r1,sp,44
 280:	f8 00 01 9a 	calli 8e8 <_ZN3arm4homeEv>

	arm1.derecha();
 284:	37 81 00 08 	addi r1,sp,8
 288:	f8 00 01 b1 	calli 94c <_ZN3arm7derechaEv>
	arm1.izquierda();
 28c:	37 81 00 08 	addi r1,sp,8
 290:	f8 00 01 ce 	calli 9c8 <_ZN3arm9izquierdaEv>

	arm2.derecha();
 294:	37 81 00 14 	addi r1,sp,20
 298:	f8 00 01 ad 	calli 94c <_ZN3arm7derechaEv>
	arm2.izquierda();
 29c:	37 81 00 14 	addi r1,sp,20
 2a0:	f8 00 01 ca 	calli 9c8 <_ZN3arm9izquierdaEv>

	arm3.derecha();
 2a4:	37 81 00 20 	addi r1,sp,32
 2a8:	f8 00 01 a9 	calli 94c <_ZN3arm7derechaEv>
	arm3.izquierda();
 2ac:	37 81 00 20 	addi r1,sp,32
 2b0:	f8 00 01 c6 	calli 9c8 <_ZN3arm9izquierdaEv>

	arm4.derecha();
 2b4:	37 81 00 2c 	addi r1,sp,44
 2b8:	f8 00 01 a5 	calli 94c <_ZN3arm7derechaEv>
	arm4.izquierda();
 2bc:	37 81 00 2c 	addi r1,sp,44
 2c0:	f8 00 01 c2 	calli 9c8 <_ZN3arm9izquierdaEv>
	
}
 2c4:	34 01 00 00 	mvi r1,0
 2c8:	2b 9d 00 04 	lw ra,(sp+4)
 2cc:	37 9c 00 34 	addi sp,sp,52
 2d0:	c3 a0 00 00 	ret

000002d4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2d4:	78 01 00 00 	mvhi r1,0x0
 2d8:	38 21 0a cc 	ori r1,r1,0xacc
 2dc:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2e0:	78 04 00 00 	mvhi r4,0x0
 2e4:	38 84 0a d0 	ori r4,r4,0xad0
 2e8:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 2ec:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2f0:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 2f4:	34 21 00 01 	addi r1,r1,1
 2f8:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2fc:	34 01 00 0e 	mvi r1,14
 300:	58 61 00 00 	sw (r3+0),r1
}
 304:	c3 a0 00 00 	ret

00000308 <isr_null>:
 308:	c3 a0 00 00 	ret

0000030c <irq_handler>:
{
 30c:	37 9c ff f0 	addi sp,sp,-16
 310:	5b 8b 00 10 	sw (sp+16),r11
 314:	5b 8c 00 0c 	sw (sp+12),r12
 318:	5b 8d 00 08 	sw (sp+8),r13
 31c:	5b 9d 00 04 	sw (sp+4),ra
 320:	78 02 00 00 	mvhi r2,0x0
 324:	38 42 0a d4 	ori r2,r2,0xad4
 328:	28 4b 00 00 	lw r11,(r2+0)
 32c:	b8 20 60 00 	mv r12,r1
 330:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 334:	21 81 00 01 	andi r1,r12,0x1
 338:	44 20 00 03 	be r1,r0,344 <irq_handler+0x38>
 33c:	29 61 00 00 	lw r1,(r11+0)
 340:	d8 20 00 00 	call r1
 344:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 348:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 34c:	5d ab ff fa 	bne r13,r11,334 <irq_handler+0x28>
}
 350:	2b 9d 00 04 	lw ra,(sp+4)
 354:	2b 8b 00 10 	lw r11,(sp+16)
 358:	2b 8c 00 0c 	lw r12,(sp+12)
 35c:	2b 8d 00 08 	lw r13,(sp+8)
 360:	37 9c 00 10 	addi sp,sp,16
 364:	c3 a0 00 00 	ret

00000368 <isr_init>:
{
 368:	78 02 00 00 	mvhi r2,0x0
 36c:	38 42 0a d8 	ori r2,r2,0xad8
 370:	28 41 00 00 	lw r1,(r2+0)
 374:	78 02 00 00 	mvhi r2,0x0
 378:	38 42 0a dc 	ori r2,r2,0xadc
 37c:	28 43 00 00 	lw r3,(r2+0)
 380:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 384:	58 23 00 00 	sw (r1+0),r3
 388:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 38c:	5c 22 ff fe 	bne r1,r2,384 <isr_init+0x1c>
}
 390:	c3 a0 00 00 	ret

00000394 <isr_register>:
	isr_table[irq] = isr;
 394:	78 04 00 00 	mvhi r4,0x0
 398:	38 84 0a e0 	ori r4,r4,0xae0
 39c:	3c 23 00 02 	sli r3,r1,2
 3a0:	28 81 00 00 	lw r1,(r4+0)
 3a4:	b4 23 08 00 	add r1,r1,r3
 3a8:	58 22 00 00 	sw (r1+0),r2
}
 3ac:	c3 a0 00 00 	ret

000003b0 <isr_unregister>:
	isr_table[irq] = &isr_null;
 3b0:	78 03 00 00 	mvhi r3,0x0
 3b4:	38 63 0a e4 	ori r3,r3,0xae4
 3b8:	3c 22 00 02 	sli r2,r1,2
 3bc:	28 61 00 00 	lw r1,(r3+0)
 3c0:	78 03 00 00 	mvhi r3,0x0
 3c4:	38 63 0a e8 	ori r3,r3,0xae8
 3c8:	b4 22 08 00 	add r1,r1,r2
 3cc:	28 62 00 00 	lw r2,(r3+0)
 3d0:	58 22 00 00 	sw (r1+0),r2
}
 3d4:	c3 a0 00 00 	ret

000003d8 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 3d8:	78 03 00 00 	mvhi r3,0x0
 3dc:	38 02 c3 50 	mvu r2,0xc350
 3e0:	38 63 0a ec 	ori r3,r3,0xaec
 3e4:	88 22 08 00 	mul r1,r1,r2
 3e8:	28 62 00 00 	lw r2,(r3+0)
 3ec:	28 42 00 00 	lw r2,(r2+0)
 3f0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3f4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3f8:	34 01 00 08 	mvi r1,8
 3fc:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 400:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 404:	20 21 00 01 	andi r1,r1,0x1
 408:	44 20 ff fe 	be r1,r0,400 <msleep+0x28>
}
 40c:	c3 a0 00 00 	ret

00000410 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 410:	78 03 00 00 	mvhi r3,0x0
 414:	38 63 0a f0 	ori r3,r3,0xaf0
 418:	28 62 00 00 	lw r2,(r3+0)
 41c:	08 21 00 32 	muli r1,r1,50
 420:	28 42 00 00 	lw r2,(r2+0)
 424:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 428:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 42c:	34 01 00 08 	mvi r1,8
 430:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 434:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 438:	20 21 00 01 	andi r1,r1,0x1
 43c:	44 20 ff fe 	be r1,r0,434 <nsleep+0x24>
}
 440:	c3 a0 00 00 	ret

00000444 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 444:	78 02 00 00 	mvhi r2,0x0
 448:	38 42 0a f4 	ori r2,r2,0xaf4
 44c:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 450:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 454:	34 02 13 88 	mvi r2,5000
 458:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 45c:	38 63 0a f8 	ori r3,r3,0xaf8
	timer0->compare0 = (FCPU/10000);
 460:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 464:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 468:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 46c:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 470:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 474:	34 02 00 0e 	mvi r2,14
 478:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 47c:	78 02 00 00 	mvhi r2,0x0
 480:	38 42 0a fc 	ori r2,r2,0xafc
 484:	38 63 0b 00 	ori r3,r3,0xb00
 488:	28 41 00 00 	lw r1,(r2+0)
 48c:	28 62 00 00 	lw r2,(r3+0)
 490:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 494:	c3 a0 00 00 	ret

00000498 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 498:	c3 a0 00 00 	ret

0000049c <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 49c:	78 02 00 00 	mvhi r2,0x0
 4a0:	38 42 0b 04 	ori r2,r2,0xb04
 4a4:	28 41 00 00 	lw r1,(r2+0)
 4a8:	28 22 00 00 	lw r2,(r1+0)
 4ac:	28 41 00 00 	lw r1,(r2+0)
 4b0:	20 21 00 01 	andi r1,r1,0x1
 4b4:	44 20 ff fe 	be r1,r0,4ac <uart_getchar+0x10>
	return uart0->rxtx;
 4b8:	28 41 00 04 	lw r1,(r2+4)
}
 4bc:	20 21 00 ff 	andi r1,r1,0xff
 4c0:	c3 a0 00 00 	ret

000004c4 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4c4:	78 03 00 00 	mvhi r3,0x0
 4c8:	38 63 0b 08 	ori r3,r3,0xb08
 4cc:	28 62 00 00 	lw r2,(r3+0)
{
 4d0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4d4:	28 43 00 00 	lw r3,(r2+0)
 4d8:	28 62 00 00 	lw r2,(r3+0)
 4dc:	20 42 00 10 	andi r2,r2,0x10
 4e0:	5c 40 ff fe 	bne r2,r0,4d8 <uart_putchar+0x14>
	uart0->rxtx = c;
 4e4:	58 61 00 04 	sw (r3+4),r1
}
 4e8:	c3 a0 00 00 	ret

000004ec <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4ec:	40 24 00 00 	lbu r4,(r1+0)
 4f0:	44 80 00 0c 	be r4,r0,520 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 4f4:	78 03 00 00 	mvhi r3,0x0
 4f8:	38 63 0b 0c 	ori r3,r3,0xb0c
 4fc:	28 62 00 00 	lw r2,(r3+0)
 500:	28 43 00 00 	lw r3,(r2+0)
 504:	28 62 00 00 	lw r2,(r3+0)
 508:	20 42 00 10 	andi r2,r2,0x10
 50c:	5c 40 ff fe 	bne r2,r0,504 <uart_putstr+0x18>
	uart0->rxtx = c;
 510:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 514:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 518:	40 24 00 00 	lbu r4,(r1+0)
 51c:	5c 80 ff fa 	bne r4,r0,504 <uart_putstr+0x18>
	}
 520:	c3 a0 00 00 	ret

00000524 <_ZN3pwm5pauseEv>:
#include "pwm.h"

void pwm::pause(){
 524:	37 9c ff fc 	addi sp,sp,-4
 528:	5b 9d 00 04 	sw (sp+4),ra

	msleep(1000);
 52c:	34 01 03 e8 	mvi r1,1000
 530:	fb ff ff aa 	calli 3d8 <msleep>

};
 534:	2b 9d 00 04 	lw ra,(sp+4)
 538:	37 9c 00 04 	addi sp,sp,4
 53c:	c3 a0 00 00 	ret

00000540 <_ZN3pwm6pwm_enEij>:
void pwm::pwm_en(int sel, uint32_t val){

	if(sel == 0) pwm0->en0 = val;
 540:	5c 40 00 08 	bne r2,r0,560 <_ZN3pwm6pwm_enEij+0x20>
 544:	28 24 00 00 	lw r4,(r1+0)
 548:	58 83 00 00 	sw (r4+0),r3
	if(sel == 1) pwm0->en1 = val;
	if(sel == 2) pwm0->en2 = val;
	if(sel == 3) pwm0->en3 = val;
	if(sel == 4) pwm0->en4 = val;
	if(sel == 5) pwm0->en5 = val;
 54c:	34 04 00 05 	mvi r4,5
 550:	5c 44 00 0d 	bne r2,r4,584 <_ZN3pwm6pwm_enEij+0x44>
 554:	28 21 00 00 	lw r1,(r1+0)
 558:	58 23 00 3c 	sw (r1+60),r3
	if(sel == 6) pwm0->en6 = val;
	if(sel == 7) pwm0->en7 = val;

};
 55c:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->en1 = val;
 560:	34 04 00 01 	mvi r4,1
 564:	5c 44 00 04 	bne r2,r4,574 <_ZN3pwm6pwm_enEij+0x34>
 568:	28 24 00 00 	lw r4,(r1+0)
 56c:	58 83 00 0c 	sw (r4+12),r3
 570:	e3 ff ff f7 	bi 54c <_ZN3pwm6pwm_enEij+0xc>
	if(sel == 2) pwm0->en2 = val;
 574:	34 04 00 02 	mvi r4,2
 578:	5c 44 00 08 	bne r2,r4,598 <_ZN3pwm6pwm_enEij+0x58>
 57c:	28 24 00 00 	lw r4,(r1+0)
 580:	58 83 00 18 	sw (r4+24),r3
	if(sel == 6) pwm0->en6 = val;
 584:	34 04 00 06 	mvi r4,6
 588:	5c 44 00 08 	bne r2,r4,5a8 <_ZN3pwm6pwm_enEij+0x68>
 58c:	28 21 00 00 	lw r1,(r1+0)
 590:	58 23 00 48 	sw (r1+72),r3
};
 594:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->en3 = val;
 598:	34 04 00 03 	mvi r4,3
 59c:	5c 44 00 08 	bne r2,r4,5bc <_ZN3pwm6pwm_enEij+0x7c>
 5a0:	28 24 00 00 	lw r4,(r1+0)
 5a4:	58 83 00 24 	sw (r4+36),r3
	if(sel == 7) pwm0->en7 = val;
 5a8:	34 04 00 07 	mvi r4,7
 5ac:	5c 44 ff ec 	bne r2,r4,55c <_ZN3pwm6pwm_enEij+0x1c>
 5b0:	28 21 00 00 	lw r1,(r1+0)
 5b4:	58 23 00 54 	sw (r1+84),r3
};
 5b8:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->en4 = val;
 5bc:	34 04 00 04 	mvi r4,4
 5c0:	5c 44 ff e3 	bne r2,r4,54c <_ZN3pwm6pwm_enEij+0xc>
 5c4:	28 21 00 00 	lw r1,(r1+0)
 5c8:	58 23 00 30 	sw (r1+48),r3
};
 5cc:	c3 a0 00 00 	ret

000005d0 <_ZN3pwm8pwm_dutyEij>:

void pwm::pwm_duty(int sel, uint32_t val){

	if(sel == 0) pwm0->duty0 = val;
 5d0:	5c 40 00 08 	bne r2,r0,5f0 <_ZN3pwm8pwm_dutyEij+0x20>
 5d4:	28 24 00 00 	lw r4,(r1+0)
 5d8:	58 83 00 08 	sw (r4+8),r3
	if(sel == 1) pwm0->duty1 = val;
	if(sel == 2) pwm0->duty2 = val;
	if(sel == 3) pwm0->duty3 = val;
	if(sel == 4) pwm0->duty4 = val;
	if(sel == 5) pwm0->duty5 = val;
 5dc:	34 04 00 05 	mvi r4,5
 5e0:	5c 44 00 0d 	bne r2,r4,614 <_ZN3pwm8pwm_dutyEij+0x44>
 5e4:	28 21 00 00 	lw r1,(r1+0)
 5e8:	58 23 00 44 	sw (r1+68),r3
	if(sel == 6) pwm0->duty6 = val;
	if(sel == 7) pwm0->duty7 = val;

};
 5ec:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->duty1 = val;
 5f0:	34 04 00 01 	mvi r4,1
 5f4:	5c 44 00 04 	bne r2,r4,604 <_ZN3pwm8pwm_dutyEij+0x34>
 5f8:	28 24 00 00 	lw r4,(r1+0)
 5fc:	58 83 00 14 	sw (r4+20),r3
 600:	e3 ff ff f7 	bi 5dc <_ZN3pwm8pwm_dutyEij+0xc>
	if(sel == 2) pwm0->duty2 = val;
 604:	34 04 00 02 	mvi r4,2
 608:	5c 44 00 08 	bne r2,r4,628 <_ZN3pwm8pwm_dutyEij+0x58>
 60c:	28 24 00 00 	lw r4,(r1+0)
 610:	58 83 00 20 	sw (r4+32),r3
	if(sel == 6) pwm0->duty6 = val;
 614:	34 04 00 06 	mvi r4,6
 618:	5c 44 00 08 	bne r2,r4,638 <_ZN3pwm8pwm_dutyEij+0x68>
 61c:	28 21 00 00 	lw r1,(r1+0)
 620:	58 23 00 50 	sw (r1+80),r3
};
 624:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->duty3 = val;
 628:	34 04 00 03 	mvi r4,3
 62c:	5c 44 00 08 	bne r2,r4,64c <_ZN3pwm8pwm_dutyEij+0x7c>
 630:	28 24 00 00 	lw r4,(r1+0)
 634:	58 83 00 2c 	sw (r4+44),r3
	if(sel == 7) pwm0->duty7 = val;
 638:	34 04 00 07 	mvi r4,7
 63c:	5c 44 ff ec 	bne r2,r4,5ec <_ZN3pwm8pwm_dutyEij+0x1c>
 640:	28 21 00 00 	lw r1,(r1+0)
 644:	58 23 00 5c 	sw (r1+92),r3
};
 648:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->duty4 = val;
 64c:	34 04 00 04 	mvi r4,4
 650:	5c 44 ff e3 	bne r2,r4,5dc <_ZN3pwm8pwm_dutyEij+0xc>
 654:	28 21 00 00 	lw r1,(r1+0)
 658:	58 23 00 38 	sw (r1+56),r3
};
 65c:	c3 a0 00 00 	ret

00000660 <_ZN3pwm10pwm_periodEij>:

void pwm::pwm_period(int sel, uint32_t val){

	if(sel == 0) pwm0->period0 = val;
 660:	5c 40 00 08 	bne r2,r0,680 <_ZN3pwm10pwm_periodEij+0x20>
 664:	28 24 00 00 	lw r4,(r1+0)
 668:	58 83 00 04 	sw (r4+4),r3
	if(sel == 1) pwm0->period1 = val;
	if(sel == 2) pwm0->period2 = val;
	if(sel == 3) pwm0->period3 = val;
	if(sel == 4) pwm0->period4 = val;
	if(sel == 5) pwm0->period5 = val;
 66c:	34 04 00 05 	mvi r4,5
 670:	5c 44 00 0d 	bne r2,r4,6a4 <_ZN3pwm10pwm_periodEij+0x44>
 674:	28 21 00 00 	lw r1,(r1+0)
 678:	58 23 00 40 	sw (r1+64),r3
	if(sel == 6) pwm0->period6 = val;
	if(sel == 7) pwm0->period7 = val;

};
 67c:	c3 a0 00 00 	ret
	if(sel == 1) pwm0->period1 = val;
 680:	34 04 00 01 	mvi r4,1
 684:	5c 44 00 04 	bne r2,r4,694 <_ZN3pwm10pwm_periodEij+0x34>
 688:	28 24 00 00 	lw r4,(r1+0)
 68c:	58 83 00 10 	sw (r4+16),r3
 690:	e3 ff ff f7 	bi 66c <_ZN3pwm10pwm_periodEij+0xc>
	if(sel == 2) pwm0->period2 = val;
 694:	34 04 00 02 	mvi r4,2
 698:	5c 44 00 08 	bne r2,r4,6b8 <_ZN3pwm10pwm_periodEij+0x58>
 69c:	28 24 00 00 	lw r4,(r1+0)
 6a0:	58 83 00 1c 	sw (r4+28),r3
	if(sel == 6) pwm0->period6 = val;
 6a4:	34 04 00 06 	mvi r4,6
 6a8:	5c 44 00 08 	bne r2,r4,6c8 <_ZN3pwm10pwm_periodEij+0x68>
 6ac:	28 21 00 00 	lw r1,(r1+0)
 6b0:	58 23 00 4c 	sw (r1+76),r3
};
 6b4:	c3 a0 00 00 	ret
	if(sel == 3) pwm0->period3 = val;
 6b8:	34 04 00 03 	mvi r4,3
 6bc:	5c 44 00 08 	bne r2,r4,6dc <_ZN3pwm10pwm_periodEij+0x7c>
 6c0:	28 24 00 00 	lw r4,(r1+0)
 6c4:	58 83 00 28 	sw (r4+40),r3
	if(sel == 7) pwm0->period7 = val;
 6c8:	34 04 00 07 	mvi r4,7
 6cc:	5c 44 ff ec 	bne r2,r4,67c <_ZN3pwm10pwm_periodEij+0x1c>
 6d0:	28 21 00 00 	lw r1,(r1+0)
 6d4:	58 23 00 58 	sw (r1+88),r3
};
 6d8:	c3 a0 00 00 	ret
	if(sel == 4) pwm0->period4 = val;
 6dc:	34 04 00 04 	mvi r4,4
 6e0:	5c 44 ff e3 	bne r2,r4,66c <_ZN3pwm10pwm_periodEij+0xc>
 6e4:	28 21 00 00 	lw r1,(r1+0)
 6e8:	58 23 00 34 	sw (r1+52),r3
};
 6ec:	c3 a0 00 00 	ret

000006f0 <_ZN3pwm9pwm_getenEj>:

uint32_t pwm::pwm_geten(uint32_t sel){
 6f0:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->en0;
 6f4:	44 40 00 11 	be r2,r0,738 <_ZN3pwm9pwm_getenEj+0x48>
	if(sel == 1) return pwm0->en1;
 6f8:	34 01 00 01 	mvi r1,1
 6fc:	44 41 00 12 	be r2,r1,744 <_ZN3pwm9pwm_getenEj+0x54>
	if(sel == 2) return pwm0->en2;
 700:	34 01 00 02 	mvi r1,2
 704:	44 41 00 16 	be r2,r1,75c <_ZN3pwm9pwm_getenEj+0x6c>
	if(sel == 3) return pwm0->en3;
 708:	34 01 00 03 	mvi r1,3
 70c:	44 41 00 11 	be r2,r1,750 <_ZN3pwm9pwm_getenEj+0x60>
	if(sel == 4) return pwm0->en4;
 710:	34 01 00 04 	mvi r1,4
 714:	44 41 00 15 	be r2,r1,768 <_ZN3pwm9pwm_getenEj+0x78>
	if(sel == 5) return pwm0->en5;
 718:	34 01 00 05 	mvi r1,5
 71c:	44 41 00 19 	be r2,r1,780 <_ZN3pwm9pwm_getenEj+0x90>
	if(sel == 6) return pwm0->en6;
 720:	34 01 00 06 	mvi r1,6
 724:	44 41 00 1a 	be r2,r1,78c <_ZN3pwm9pwm_getenEj+0x9c>
	if(sel == 7) return pwm0->en7;
 728:	34 04 00 07 	mvi r4,7
	return 0;
 72c:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->en7;
 730:	44 44 00 11 	be r2,r4,774 <_ZN3pwm9pwm_getenEj+0x84>

};
 734:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->en0;
 738:	28 21 00 00 	lw r1,(r1+0)
 73c:	28 21 00 00 	lw r1,(r1+0)
};
 740:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->en1;
 744:	28 61 00 00 	lw r1,(r3+0)
 748:	28 21 00 0c 	lw r1,(r1+12)
};
 74c:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->en3;
 750:	28 61 00 00 	lw r1,(r3+0)
 754:	28 21 00 24 	lw r1,(r1+36)
};
 758:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->en2;
 75c:	28 61 00 00 	lw r1,(r3+0)
 760:	28 21 00 18 	lw r1,(r1+24)
};
 764:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->en4;
 768:	28 61 00 00 	lw r1,(r3+0)
 76c:	28 21 00 30 	lw r1,(r1+48)
};
 770:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->en7;
 774:	28 61 00 00 	lw r1,(r3+0)
 778:	28 21 00 54 	lw r1,(r1+84)
};
 77c:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->en5;
 780:	28 61 00 00 	lw r1,(r3+0)
 784:	28 21 00 3c 	lw r1,(r1+60)
};
 788:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->en6;
 78c:	28 61 00 00 	lw r1,(r3+0)
 790:	28 21 00 48 	lw r1,(r1+72)
};
 794:	c3 a0 00 00 	ret

00000798 <_ZN3pwm11pwm_getdutyEj>:

uint32_t pwm::pwm_getduty(uint32_t sel){
 798:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->duty0;
 79c:	44 40 00 11 	be r2,r0,7e0 <_ZN3pwm11pwm_getdutyEj+0x48>
	if(sel == 1) return pwm0->duty1;
 7a0:	34 01 00 01 	mvi r1,1
 7a4:	44 41 00 12 	be r2,r1,7ec <_ZN3pwm11pwm_getdutyEj+0x54>
	if(sel == 2) return pwm0->duty2;
 7a8:	34 01 00 02 	mvi r1,2
 7ac:	44 41 00 16 	be r2,r1,804 <_ZN3pwm11pwm_getdutyEj+0x6c>
	if(sel == 3) return pwm0->duty3;
 7b0:	34 01 00 03 	mvi r1,3
 7b4:	44 41 00 11 	be r2,r1,7f8 <_ZN3pwm11pwm_getdutyEj+0x60>
	if(sel == 4) return pwm0->duty4;
 7b8:	34 01 00 04 	mvi r1,4
 7bc:	44 41 00 15 	be r2,r1,810 <_ZN3pwm11pwm_getdutyEj+0x78>
	if(sel == 5) return pwm0->duty5;
 7c0:	34 01 00 05 	mvi r1,5
 7c4:	44 41 00 19 	be r2,r1,828 <_ZN3pwm11pwm_getdutyEj+0x90>
	if(sel == 6) return pwm0->duty6;
 7c8:	34 01 00 06 	mvi r1,6
 7cc:	44 41 00 1a 	be r2,r1,834 <_ZN3pwm11pwm_getdutyEj+0x9c>
	if(sel == 7) return pwm0->duty7;
 7d0:	34 04 00 07 	mvi r4,7
	return 0;
 7d4:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->duty7;
 7d8:	44 44 00 11 	be r2,r4,81c <_ZN3pwm11pwm_getdutyEj+0x84>
	
};
 7dc:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->duty0;
 7e0:	28 21 00 00 	lw r1,(r1+0)
 7e4:	28 21 00 08 	lw r1,(r1+8)
};
 7e8:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->duty1;
 7ec:	28 61 00 00 	lw r1,(r3+0)
 7f0:	28 21 00 14 	lw r1,(r1+20)
};
 7f4:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->duty3;
 7f8:	28 61 00 00 	lw r1,(r3+0)
 7fc:	28 21 00 2c 	lw r1,(r1+44)
};
 800:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->duty2;
 804:	28 61 00 00 	lw r1,(r3+0)
 808:	28 21 00 20 	lw r1,(r1+32)
};
 80c:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->duty4;
 810:	28 61 00 00 	lw r1,(r3+0)
 814:	28 21 00 38 	lw r1,(r1+56)
};
 818:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->duty7;
 81c:	28 61 00 00 	lw r1,(r3+0)
 820:	28 21 00 5c 	lw r1,(r1+92)
};
 824:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->duty5;
 828:	28 61 00 00 	lw r1,(r3+0)
 82c:	28 21 00 44 	lw r1,(r1+68)
};
 830:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->duty6;
 834:	28 61 00 00 	lw r1,(r3+0)
 838:	28 21 00 50 	lw r1,(r1+80)
};
 83c:	c3 a0 00 00 	ret

00000840 <_ZN3pwm13pwm_getperiodEj>:

uint32_t pwm::pwm_getperiod(uint32_t sel){
 840:	b8 20 18 00 	mv r3,r1

	if(sel == 0) return pwm0->period0;
 844:	44 40 00 11 	be r2,r0,888 <_ZN3pwm13pwm_getperiodEj+0x48>
	if(sel == 1) return pwm0->period1;
 848:	34 01 00 01 	mvi r1,1
 84c:	44 41 00 12 	be r2,r1,894 <_ZN3pwm13pwm_getperiodEj+0x54>
	if(sel == 2) return pwm0->period2;
 850:	34 01 00 02 	mvi r1,2
 854:	44 41 00 16 	be r2,r1,8ac <_ZN3pwm13pwm_getperiodEj+0x6c>
	if(sel == 3) return pwm0->period3;
 858:	34 01 00 03 	mvi r1,3
 85c:	44 41 00 11 	be r2,r1,8a0 <_ZN3pwm13pwm_getperiodEj+0x60>
	if(sel == 4) return pwm0->period4;
 860:	34 01 00 04 	mvi r1,4
 864:	44 41 00 15 	be r2,r1,8b8 <_ZN3pwm13pwm_getperiodEj+0x78>
	if(sel == 5) return pwm0->period5;
 868:	34 01 00 05 	mvi r1,5
 86c:	44 41 00 19 	be r2,r1,8d0 <_ZN3pwm13pwm_getperiodEj+0x90>
	if(sel == 6) return pwm0->period6;
 870:	34 01 00 06 	mvi r1,6
 874:	44 41 00 1a 	be r2,r1,8dc <_ZN3pwm13pwm_getperiodEj+0x9c>
	if(sel == 7) return pwm0->period7;
 878:	34 04 00 07 	mvi r4,7
	return 0;
 87c:	34 01 00 00 	mvi r1,0
	if(sel == 7) return pwm0->period7;
 880:	44 44 00 11 	be r2,r4,8c4 <_ZN3pwm13pwm_getperiodEj+0x84>
	
 884:	c3 a0 00 00 	ret
	if(sel == 0) return pwm0->period0;
 888:	28 21 00 00 	lw r1,(r1+0)
 88c:	28 21 00 04 	lw r1,(r1+4)
 890:	c3 a0 00 00 	ret
	if(sel == 1) return pwm0->period1;
 894:	28 61 00 00 	lw r1,(r3+0)
 898:	28 21 00 10 	lw r1,(r1+16)
 89c:	c3 a0 00 00 	ret
	if(sel == 3) return pwm0->period3;
 8a0:	28 61 00 00 	lw r1,(r3+0)
 8a4:	28 21 00 28 	lw r1,(r1+40)
 8a8:	c3 a0 00 00 	ret
	if(sel == 2) return pwm0->period2;
 8ac:	28 61 00 00 	lw r1,(r3+0)
 8b0:	28 21 00 1c 	lw r1,(r1+28)
 8b4:	c3 a0 00 00 	ret
	if(sel == 4) return pwm0->period4;
 8b8:	28 61 00 00 	lw r1,(r3+0)
 8bc:	28 21 00 34 	lw r1,(r1+52)
 8c0:	c3 a0 00 00 	ret
	if(sel == 7) return pwm0->period7;
 8c4:	28 61 00 00 	lw r1,(r3+0)
 8c8:	28 21 00 58 	lw r1,(r1+88)
 8cc:	c3 a0 00 00 	ret
	if(sel == 5) return pwm0->period5;
 8d0:	28 61 00 00 	lw r1,(r3+0)
 8d4:	28 21 00 40 	lw r1,(r1+64)
 8d8:	c3 a0 00 00 	ret
	if(sel == 6) return pwm0->period6;
 8dc:	28 61 00 00 	lw r1,(r3+0)
 8e0:	28 21 00 4c 	lw r1,(r1+76)
 8e4:	c3 a0 00 00 	ret

000008e8 <_ZN3arm4homeEv>:
#include "servos.h"

void arm::home(){
 8e8:	37 9c ff f8 	addi sp,sp,-8
 8ec:	5b 8b 00 08 	sw (sp+8),r11
 8f0:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv2,IZ);
 8f4:	28 22 00 08 	lw r2,(r1+8)
 8f8:	34 03 00 05 	mvi r3,5
void arm::home(){
 8fc:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv2,IZ);
 900:	fb ff ff 34 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 904:	b9 60 08 00 	mv r1,r11
 908:	fb ff ff 07 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,MID);
 90c:	29 62 00 04 	lw r2,(r11+4)
 910:	34 03 00 0f 	mvi r3,15
 914:	b9 60 08 00 	mv r1,r11
 918:	fb ff ff 2e 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 91c:	b9 60 08 00 	mv r1,r11
 920:	fb ff ff 01 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,DER);
 924:	29 62 00 08 	lw r2,(r11+8)
 928:	34 03 00 19 	mvi r3,25
 92c:	b9 60 08 00 	mv r1,r11
 930:	fb ff ff 28 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 934:	b9 60 08 00 	mv r1,r11
 938:	fb ff fe fb 	calli 524 <_ZN3pwm5pauseEv>
};
 93c:	2b 9d 00 04 	lw ra,(sp+4)
 940:	2b 8b 00 08 	lw r11,(sp+8)
 944:	37 9c 00 08 	addi sp,sp,8
 948:	c3 a0 00 00 	ret

0000094c <_ZN3arm7derechaEv>:

void arm::derecha(){
 94c:	37 9c ff f8 	addi sp,sp,-8
 950:	5b 8b 00 08 	sw (sp+8),r11
 954:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,DER);
 958:	28 22 00 04 	lw r2,(r1+4)
 95c:	34 03 00 19 	mvi r3,25
void arm::derecha(){
 960:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,DER);
 964:	fb ff ff 1b 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 968:	b9 60 08 00 	mv r1,r11
 96c:	fb ff fe ee 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,IZ);
 970:	29 62 00 08 	lw r2,(r11+8)
 974:	34 03 00 05 	mvi r3,5
 978:	b9 60 08 00 	mv r1,r11
 97c:	fb ff ff 15 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 980:	b9 60 08 00 	mv r1,r11
 984:	fb ff fe e8 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,MID);
 988:	29 62 00 04 	lw r2,(r11+4)
 98c:	34 03 00 0f 	mvi r3,15
 990:	b9 60 08 00 	mv r1,r11
 994:	fb ff ff 0f 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 998:	b9 60 08 00 	mv r1,r11
 99c:	fb ff fe e2 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,DER);
 9a0:	29 62 00 08 	lw r2,(r11+8)
 9a4:	34 03 00 19 	mvi r3,25
 9a8:	b9 60 08 00 	mv r1,r11
 9ac:	fb ff ff 09 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 9b0:	b9 60 08 00 	mv r1,r11
 9b4:	fb ff fe dc 	calli 524 <_ZN3pwm5pauseEv>
};
 9b8:	2b 9d 00 04 	lw ra,(sp+4)
 9bc:	2b 8b 00 08 	lw r11,(sp+8)
 9c0:	37 9c 00 08 	addi sp,sp,8
 9c4:	c3 a0 00 00 	ret

000009c8 <_ZN3arm9izquierdaEv>:

void arm::izquierda(){
 9c8:	37 9c ff f8 	addi sp,sp,-8
 9cc:	5b 8b 00 08 	sw (sp+8),r11
 9d0:	5b 9d 00 04 	sw (sp+4),ra
	pwm_duty(serv1,IZ);
 9d4:	28 22 00 04 	lw r2,(r1+4)
 9d8:	34 03 00 05 	mvi r3,5
void arm::izquierda(){
 9dc:	b8 20 58 00 	mv r11,r1
	pwm_duty(serv1,IZ);
 9e0:	fb ff fe fc 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 9e4:	b9 60 08 00 	mv r1,r11
 9e8:	fb ff fe cf 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,IZ);
 9ec:	29 62 00 08 	lw r2,(r11+8)
 9f0:	34 03 00 05 	mvi r3,5
 9f4:	b9 60 08 00 	mv r1,r11
 9f8:	fb ff fe f6 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 9fc:	b9 60 08 00 	mv r1,r11
 a00:	fb ff fe c9 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv1,MID);
 a04:	29 62 00 04 	lw r2,(r11+4)
 a08:	34 03 00 0f 	mvi r3,15
 a0c:	b9 60 08 00 	mv r1,r11
 a10:	fb ff fe f0 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 a14:	b9 60 08 00 	mv r1,r11
 a18:	fb ff fe c3 	calli 524 <_ZN3pwm5pauseEv>
	pwm_duty(serv2,DER);
 a1c:	29 62 00 08 	lw r2,(r11+8)
 a20:	34 03 00 19 	mvi r3,25
 a24:	b9 60 08 00 	mv r1,r11
 a28:	fb ff fe ea 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pause();
 a2c:	b9 60 08 00 	mv r1,r11
 a30:	fb ff fe bd 	calli 524 <_ZN3pwm5pauseEv>
};
 a34:	2b 9d 00 04 	lw ra,(sp+4)
 a38:	2b 8b 00 08 	lw r11,(sp+8)
 a3c:	37 9c 00 08 	addi sp,sp,8
 a40:	c3 a0 00 00 	ret

00000a44 <_ZN3arm8set_servEii>:

void arm::set_serv(int x,int y){
 a44:	37 9c ff f8 	addi sp,sp,-8
 a48:	5b 8b 00 08 	sw (sp+8),r11
 a4c:	5b 9d 00 04 	sw (sp+4),ra
	serv1 = x;
 a50:	58 22 00 04 	sw (r1+4),r2
	serv2 = y;
 a54:	58 23 00 08 	sw (r1+8),r3
	pwm_period(serv1,200);
 a58:	34 03 00 c8 	mvi r3,200
void arm::set_serv(int x,int y){
 a5c:	b8 20 58 00 	mv r11,r1
	pwm_period(serv1,200);
 a60:	fb ff ff 00 	calli 660 <_ZN3pwm10pwm_periodEij>
	pwm_period(serv2,200);
 a64:	29 62 00 08 	lw r2,(r11+8)
 a68:	b9 60 08 00 	mv r1,r11
 a6c:	34 03 00 c8 	mvi r3,200
 a70:	fb ff fe fc 	calli 660 <_ZN3pwm10pwm_periodEij>
	pwm_duty(serv1,MID);
 a74:	29 62 00 04 	lw r2,(r11+4)
 a78:	b9 60 08 00 	mv r1,r11
 a7c:	34 03 00 0f 	mvi r3,15
 a80:	fb ff fe d4 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pwm_duty(serv2,IZ);
 a84:	29 62 00 08 	lw r2,(r11+8)
 a88:	b9 60 08 00 	mv r1,r11
 a8c:	34 03 00 05 	mvi r3,5
 a90:	fb ff fe d0 	calli 5d0 <_ZN3pwm8pwm_dutyEij>
	pwm_en(serv1,1);
 a94:	29 62 00 04 	lw r2,(r11+4)
 a98:	b9 60 08 00 	mv r1,r11
 a9c:	34 03 00 01 	mvi r3,1
 aa0:	fb ff fe a8 	calli 540 <_ZN3pwm6pwm_enEij>
	pwm_en(serv2,1);
 aa4:	29 62 00 08 	lw r2,(r11+8)
 aa8:	34 03 00 01 	mvi r3,1
 aac:	b9 60 08 00 	mv r1,r11
 ab0:	fb ff fe a4 	calli 540 <_ZN3pwm6pwm_enEij>
	pause();
 ab4:	b9 60 08 00 	mv r1,r11
 ab8:	fb ff fe 9b 	calli 524 <_ZN3pwm5pauseEv>
 abc:	2b 9d 00 04 	lw ra,(sp+4)
 ac0:	2b 8b 00 08 	lw r11,(sp+8)
 ac4:	37 9c 00 08 	addi sp,sp,8
 ac8:	c3 a0 00 00 	ret
