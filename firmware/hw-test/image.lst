
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000007b4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000064  000007b4  000007b4  00000808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000818  00000818  0000086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000830  00000830  00000884  2**2
                  ALLOC
  4 .debug_abbrev 000001fa  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000846  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000587  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000181  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000008b  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ab  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000148  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 87 	calli 2e8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 30 	ori gp,gp,0x830
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 30 	ori r1,r1,0x830
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 b4 	ori r3,r3,0x8b4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"

int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	pwm_period(0,200);
 210:	34 01 00 00 	mvi r1,0
 214:	34 02 00 c8 	mvi r2,200
 218:	f8 00 01 37 	calli 6f4 <pwm_period>
	pwm_duty(0,10);
 21c:	34 01 00 00 	mvi r1,0
 220:	34 02 00 0a 	mvi r2,10
 224:	f8 00 01 04 	calli 634 <pwm_duty>
	pwm_en(0,1);
 228:	34 01 00 00 	mvi r1,0
 22c:	34 02 00 01 	mvi r2,1
 230:	f8 00 00 d1 	calli 574 <pwm_en>
	msleep(1000000);
 234:	78 02 00 00 	mvhi r2,0x0
 238:	38 42 07 b4 	ori r2,r2,0x7b4
 23c:	28 41 00 00 	lw r1,(r2+0)
 240:	f8 00 00 5a 	calli 3a8 <msleep>
	while(1){
		pwm_duty(0,13);
 244:	34 02 00 0d 	mvi r2,13
 248:	34 01 00 00 	mvi r1,0
 24c:	f8 00 00 fa 	calli 634 <pwm_duty>
		msleep(1000000);
 250:	78 02 00 00 	mvhi r2,0x0
 254:	38 42 07 b4 	ori r2,r2,0x7b4
 258:	28 41 00 00 	lw r1,(r2+0)
 25c:	f8 00 00 53 	calli 3a8 <msleep>
		pwm_duty(0,15);
 260:	34 02 00 0f 	mvi r2,15
 264:	34 01 00 00 	mvi r1,0
 268:	f8 00 00 f3 	calli 634 <pwm_duty>
		msleep(1000000);
 26c:	78 02 00 00 	mvhi r2,0x0
 270:	38 42 07 b4 	ori r2,r2,0x7b4
 274:	28 41 00 00 	lw r1,(r2+0)
 278:	f8 00 00 4c 	calli 3a8 <msleep>
		pwm_duty(0,20);
 27c:	34 02 00 14 	mvi r2,20
 280:	34 01 00 00 	mvi r1,0
 284:	f8 00 00 ec 	calli 634 <pwm_duty>
		msleep(1000000);
 288:	78 02 00 00 	mvhi r2,0x0
 28c:	38 42 07 b4 	ori r2,r2,0x7b4
 290:	28 41 00 00 	lw r1,(r2+0)
 294:	f8 00 00 45 	calli 3a8 <msleep>
		pwm_duty(0,10);
 298:	34 01 00 00 	mvi r1,0
 29c:	34 02 00 0a 	mvi r2,10
 2a0:	f8 00 00 e5 	calli 634 <pwm_duty>
		msleep(1000000);
 2a4:	78 02 00 00 	mvhi r2,0x0
 2a8:	38 42 07 b4 	ori r2,r2,0x7b4
 2ac:	28 41 00 00 	lw r1,(r2+0)
 2b0:	f8 00 00 3e 	calli 3a8 <msleep>
 2b4:	e3 ff ff e4 	bi 244 <main+0x3c>

000002b8 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2b8:	c3 a0 00 00 	ret

000002bc <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2bc:	78 01 00 00 	mvhi r1,0x0
 2c0:	38 21 08 b0 	ori r1,r1,0x8b0
 2c4:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2c8:	78 02 00 00 	mvhi r2,0x0
 2cc:	38 42 08 1c 	ori r2,r2,0x81c
 2d0:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2d4:	34 63 00 01 	addi r3,r3,1
 2d8:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2dc:	34 01 00 0e 	mvi r1,14
 2e0:	58 41 00 00 	sw (r2+0),r1
}
 2e4:	c3 a0 00 00 	ret

000002e8 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2e8:	37 9c ff f0 	addi sp,sp,-16
 2ec:	5b 8b 00 10 	sw (sp+16),r11
 2f0:	5b 8c 00 0c 	sw (sp+12),r12
 2f4:	5b 8d 00 08 	sw (sp+8),r13
 2f8:	5b 9d 00 04 	sw (sp+4),ra
 2fc:	78 0b 00 00 	mvhi r11,0x0
 300:	39 6b 08 30 	ori r11,r11,0x830
 304:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 308:	35 6d 00 80 	addi r13,r11,128
 30c:	e0 00 00 04 	bi 31c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 310:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 314:	45 6d 00 08 	be r11,r13,334 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 318:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 31c:	21 81 00 01 	andi r1,r12,0x1
 320:	44 20 ff fc 	be r1,r0,310 <irq_handler+0x28>
 324:	29 61 00 00 	lw r1,(r11+0)
 328:	35 6b 00 04 	addi r11,r11,4
 32c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 330:	5d 6d ff fa 	bne r11,r13,318 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 334:	2b 9d 00 04 	lw ra,(sp+4)
 338:	2b 8b 00 10 	lw r11,(sp+16)
 33c:	2b 8c 00 0c 	lw r12,(sp+12)
 340:	2b 8d 00 08 	lw r13,(sp+8)
 344:	37 9c 00 10 	addi sp,sp,16
 348:	c3 a0 00 00 	ret

0000034c <isr_init>:

void isr_init()
{
 34c:	78 01 00 00 	mvhi r1,0x0
 350:	78 02 00 00 	mvhi r2,0x0
 354:	38 21 08 30 	ori r1,r1,0x830
 358:	38 42 02 b8 	ori r2,r2,0x2b8
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 35c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 360:	58 22 00 00 	sw (r1+0),r2
 364:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 368:	5c 23 ff fe 	bne r1,r3,360 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 36c:	c3 a0 00 00 	ret

00000370 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 370:	78 03 00 00 	mvhi r3,0x0
 374:	3c 21 00 02 	sli r1,r1,2
 378:	38 63 08 30 	ori r3,r3,0x830
 37c:	b4 61 18 00 	add r3,r3,r1
 380:	58 62 00 00 	sw (r3+0),r2
}
 384:	c3 a0 00 00 	ret

00000388 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 388:	78 03 00 00 	mvhi r3,0x0
 38c:	3c 21 00 02 	sli r1,r1,2
 390:	38 63 08 30 	ori r3,r3,0x830
 394:	78 02 00 00 	mvhi r2,0x0
 398:	b4 61 18 00 	add r3,r3,r1
 39c:	38 42 02 b8 	ori r2,r2,0x2b8
 3a0:	58 62 00 00 	sw (r3+0),r2
}
 3a4:	c3 a0 00 00 	ret

000003a8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3a8:	78 02 00 00 	mvhi r2,0x0
 3ac:	38 42 08 1c 	ori r2,r2,0x81c
 3b0:	38 03 c3 50 	mvu r3,0xc350
 3b4:	28 42 00 00 	lw r2,(r2+0)
 3b8:	88 23 08 00 	mul r1,r1,r3
 3bc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3c0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3c4:	34 01 00 08 	mvi r1,8
 3c8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3cc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3d0:	20 21 00 01 	andi r1,r1,0x1
 3d4:	44 20 ff fe 	be r1,r0,3cc <msleep+0x24>
}
 3d8:	c3 a0 00 00 	ret

000003dc <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3dc:	78 02 00 00 	mvhi r2,0x0
 3e0:	38 42 08 1c 	ori r2,r2,0x81c
 3e4:	28 42 00 00 	lw r2,(r2+0)
 3e8:	08 21 00 32 	muli r1,r1,50
 3ec:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3f0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3f4:	34 01 00 08 	mvi r1,8
 3f8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3fc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 400:	20 21 00 01 	andi r1,r1,0x1
 404:	44 20 ff fe 	be r1,r0,3fc <nsleep+0x20>
}
 408:	c3 a0 00 00 	ret

0000040c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 40c:	78 01 00 00 	mvhi r1,0x0
 410:	38 21 08 1c 	ori r1,r1,0x81c
 414:	28 23 00 00 	lw r3,(r1+0)
 418:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 41c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 420:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 424:	38 21 08 b0 	ori r1,r1,0x8b0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 428:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 42c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 430:	78 02 00 00 	mvhi r2,0x0
 434:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 438:	34 04 00 0e 	mvi r4,14
 43c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 440:	38 21 08 30 	ori r1,r1,0x830
 444:	38 42 02 bc 	ori r2,r2,0x2bc
 448:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 44c:	c3 a0 00 00 	ret

00000450 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 450:	c3 a0 00 00 	ret

00000454 <uart_getchar>:

char uart_getchar()
{   
 454:	78 01 00 00 	mvhi r1,0x0
 458:	38 21 08 18 	ori r1,r1,0x818
 45c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 460:	28 41 00 00 	lw r1,(r2+0)
 464:	20 21 00 01 	andi r1,r1,0x1
 468:	44 20 ff fe 	be r1,r0,460 <uart_getchar+0xc>
	return uart0->rxtx;
 46c:	28 41 00 04 	lw r1,(r2+4)
}
 470:	20 21 00 ff 	andi r1,r1,0xff
 474:	c3 a0 00 00 	ret

00000478 <uart_putchar>:

void uart_putchar(char c)
{
 478:	78 02 00 00 	mvhi r2,0x0
 47c:	38 42 08 18 	ori r2,r2,0x818
 480:	28 43 00 00 	lw r3,(r2+0)
 484:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 488:	28 62 00 00 	lw r2,(r3+0)
 48c:	20 42 00 10 	andi r2,r2,0x10
 490:	5c 40 ff fe 	bne r2,r0,488 <uart_putchar+0x10>
	uart0->rxtx = c;
 494:	58 61 00 04 	sw (r3+4),r1
}
 498:	c3 a0 00 00 	ret

0000049c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 49c:	40 24 00 00 	lbu r4,(r1+0)
 4a0:	44 80 00 0b 	be r4,r0,4cc <uart_putstr+0x30>
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 08 18 	ori r2,r2,0x818
 4ac:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4b0:	28 62 00 00 	lw r2,(r3+0)
 4b4:	20 42 00 10 	andi r2,r2,0x10
 4b8:	5c 40 ff fe 	bne r2,r0,4b0 <uart_putstr+0x14>
	uart0->rxtx = c;
 4bc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 4c0:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4c4:	40 24 00 00 	lbu r4,(r1+0)
 4c8:	5c 82 ff fa 	bne r4,r2,4b0 <uart_putstr+0x14>
 4cc:	c3 a0 00 00 	ret

000004d0 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 4d0:	78 01 00 00 	mvhi r1,0x0
 4d4:	38 21 08 28 	ori r1,r1,0x828
 4d8:	28 21 00 00 	lw r1,(r1+0)
	i2c0->prerh =0x50;
 4dc:	34 02 00 50 	mvi r2,80
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 4e0:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 4e4:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 4e8:	34 02 ff 80 	mvi r2,-128
 4ec:	30 22 00 02 	sb (r1+2),r2


}
 4f0:	c3 a0 00 00 	ret

000004f4 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 4f4:	78 04 00 00 	mvhi r4,0x0
 4f8:	38 84 08 28 	ori r4,r4,0x828
 4fc:	28 84 00 00 	lw r4,(r4+0)
 500:	3c 21 00 02 	sli r1,r1,2


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 504:	20 42 00 ff 	andi r2,r2,0xff

   i2c0->TxRx=(addrDev<<1 +1);
 508:	20 21 00 fc 	andi r1,r1,0xfc
 50c:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 510:	34 01 ff 90 	mvi r1,-112


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 514:	20 63 00 ff 	andi r3,r3,0xff

   i2c0->TxRx=(addrDev<<1 +1);
   i2c0->crsr =0x90;
 518:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 51c:	40 81 00 04 	lbu r1,(r4+4)
 520:	20 21 00 02 	andi r1,r1,0x2
 524:	5c 20 ff fe 	bne r1,r0,51c <i2c_write+0x28>
   i2c0->TxRx=addrReg;
 528:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 52c:	34 01 00 10 	mvi r1,16
 530:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 534:	40 81 00 04 	lbu r1,(r4+4)
 538:	20 21 00 02 	andi r1,r1,0x2
 53c:	5c 20 ff fe 	bne r1,r0,534 <i2c_write+0x40>
   
   i2c0->TxRx=dat;
 540:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 544:	34 01 00 10 	mvi r1,16
 548:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 54c:	40 81 00 04 	lbu r1,(r4+4)
 550:	20 21 00 02 	andi r1,r1,0x2
 554:	5c 20 ff fe 	bne r1,r0,54c <i2c_write+0x58>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 558:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 55c:	34 01 00 50 	mvi r1,80
 560:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 564:	40 81 00 04 	lbu r1,(r4+4)
 568:	20 21 00 02 	andi r1,r1,0x2
 56c:	5c 20 ff fe 	bne r1,r0,564 <i2c_write+0x70>
//7

}
 570:	c3 a0 00 00 	ret

00000574 <pwm_en>:
/***************************************************************************
 * PWM Functions
 */

void pwm_en(int sel, int val){
	switch(sel){
 574:	34 03 00 07 	mvi r3,7
 578:	54 23 00 0b 	bgu r1,r3,5a4 <pwm_en+0x30>
 57c:	3c 21 00 02 	sli r1,r1,2
 580:	78 03 00 00 	mvhi r3,0x0
 584:	38 63 07 b8 	ori r3,r3,0x7b8
 588:	b4 61 18 00 	add r3,r3,r1
 58c:	28 61 00 00 	lw r1,(r3+0)
 590:	c0 20 00 00 	b r1
		case 6:
			pwm0->en6 = val;
			break;
			
		case 7:
			pwm0->en7 = val;
 594:	78 01 00 00 	mvhi r1,0x0
 598:	38 21 08 2c 	ori r1,r1,0x82c
 59c:	28 21 00 00 	lw r1,(r1+0)
 5a0:	58 22 00 54 	sw (r1+84),r2
 5a4:	c3 a0 00 00 	ret
		case 5:
			pwm0->en5 = val;
			break;
			
		case 6:
			pwm0->en6 = val;
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 08 2c 	ori r1,r1,0x82c
 5b0:	28 21 00 00 	lw r1,(r1+0)
 5b4:	58 22 00 48 	sw (r1+72),r2
			break;
 5b8:	c3 a0 00 00 	ret
 */

void pwm_en(int sel, int val){
	switch(sel){
		case 0:
			pwm0->en0 = val;
 5bc:	78 01 00 00 	mvhi r1,0x0
 5c0:	38 21 08 2c 	ori r1,r1,0x82c
 5c4:	28 21 00 00 	lw r1,(r1+0)
 5c8:	58 22 00 00 	sw (r1+0),r2
			break;
 5cc:	c3 a0 00 00 	ret

		case 1:
			pwm0->en1 = val;
 5d0:	78 01 00 00 	mvhi r1,0x0
 5d4:	38 21 08 2c 	ori r1,r1,0x82c
 5d8:	28 21 00 00 	lw r1,(r1+0)
 5dc:	58 22 00 0c 	sw (r1+12),r2
			break;
 5e0:	c3 a0 00 00 	ret
			
		case 2:
			pwm0->en2 = val;
 5e4:	78 01 00 00 	mvhi r1,0x0
 5e8:	38 21 08 2c 	ori r1,r1,0x82c
 5ec:	28 21 00 00 	lw r1,(r1+0)
 5f0:	58 22 00 18 	sw (r1+24),r2
			break;
 5f4:	c3 a0 00 00 	ret
			
		case 3:
			pwm0->en3 = val;
 5f8:	78 01 00 00 	mvhi r1,0x0
 5fc:	38 21 08 2c 	ori r1,r1,0x82c
 600:	28 21 00 00 	lw r1,(r1+0)
 604:	58 22 00 24 	sw (r1+36),r2
			break;
 608:	c3 a0 00 00 	ret
			
		case 4:
			pwm0->en4 = val;
 60c:	78 01 00 00 	mvhi r1,0x0
 610:	38 21 08 2c 	ori r1,r1,0x82c
 614:	28 21 00 00 	lw r1,(r1+0)
 618:	58 22 00 30 	sw (r1+48),r2
			break;
 61c:	c3 a0 00 00 	ret
			
		case 5:
			pwm0->en5 = val;
 620:	78 01 00 00 	mvhi r1,0x0
 624:	38 21 08 2c 	ori r1,r1,0x82c
 628:	28 21 00 00 	lw r1,(r1+0)
 62c:	58 22 00 3c 	sw (r1+60),r2
			break;
 630:	c3 a0 00 00 	ret

00000634 <pwm_duty>:
			pwm0->en7 = val;
			break;
	}
}
void pwm_duty(int sel, int val){
	switch(sel){
 634:	34 03 00 07 	mvi r3,7
 638:	54 23 00 0b 	bgu r1,r3,664 <pwm_duty+0x30>
 63c:	3c 21 00 02 	sli r1,r1,2
 640:	78 03 00 00 	mvhi r3,0x0
 644:	38 63 07 d8 	ori r3,r3,0x7d8
 648:	b4 61 18 00 	add r3,r3,r1
 64c:	28 61 00 00 	lw r1,(r3+0)
 650:	c0 20 00 00 	b r1
		case 6:
			pwm0->duty6 = val;
			break;
			
		case 7:
			pwm0->duty7 = val;
 654:	78 01 00 00 	mvhi r1,0x0
 658:	38 21 08 2c 	ori r1,r1,0x82c
 65c:	28 21 00 00 	lw r1,(r1+0)
 660:	58 22 00 5c 	sw (r1+92),r2
 664:	c3 a0 00 00 	ret
		case 5:
			pwm0->duty5 = val;
			break;
			
		case 6:
			pwm0->duty6 = val;
 668:	78 01 00 00 	mvhi r1,0x0
 66c:	38 21 08 2c 	ori r1,r1,0x82c
 670:	28 21 00 00 	lw r1,(r1+0)
 674:	58 22 00 50 	sw (r1+80),r2
			break;
 678:	c3 a0 00 00 	ret
	}
}
void pwm_duty(int sel, int val){
	switch(sel){
		case 0:
			pwm0->duty0 = val;
 67c:	78 01 00 00 	mvhi r1,0x0
 680:	38 21 08 2c 	ori r1,r1,0x82c
 684:	28 21 00 00 	lw r1,(r1+0)
 688:	58 22 00 08 	sw (r1+8),r2
			break;
 68c:	c3 a0 00 00 	ret

		case 1:
			pwm0->duty1 = val;
 690:	78 01 00 00 	mvhi r1,0x0
 694:	38 21 08 2c 	ori r1,r1,0x82c
 698:	28 21 00 00 	lw r1,(r1+0)
 69c:	58 22 00 14 	sw (r1+20),r2
			break;
 6a0:	c3 a0 00 00 	ret
			
		case 2:
			pwm0->duty2 = val;
 6a4:	78 01 00 00 	mvhi r1,0x0
 6a8:	38 21 08 2c 	ori r1,r1,0x82c
 6ac:	28 21 00 00 	lw r1,(r1+0)
 6b0:	58 22 00 20 	sw (r1+32),r2
			break;
 6b4:	c3 a0 00 00 	ret
			
		case 3:
			pwm0->duty3 = val;
 6b8:	78 01 00 00 	mvhi r1,0x0
 6bc:	38 21 08 2c 	ori r1,r1,0x82c
 6c0:	28 21 00 00 	lw r1,(r1+0)
 6c4:	58 22 00 2c 	sw (r1+44),r2
			break;
 6c8:	c3 a0 00 00 	ret
			
		case 4:
			pwm0->duty4 = val;
 6cc:	78 01 00 00 	mvhi r1,0x0
 6d0:	38 21 08 2c 	ori r1,r1,0x82c
 6d4:	28 21 00 00 	lw r1,(r1+0)
 6d8:	58 22 00 38 	sw (r1+56),r2
			break;
 6dc:	c3 a0 00 00 	ret
			
		case 5:
			pwm0->duty5 = val;
 6e0:	78 01 00 00 	mvhi r1,0x0
 6e4:	38 21 08 2c 	ori r1,r1,0x82c
 6e8:	28 21 00 00 	lw r1,(r1+0)
 6ec:	58 22 00 44 	sw (r1+68),r2
			break;
 6f0:	c3 a0 00 00 	ret

000006f4 <pwm_period>:
			break;
	}
}

void pwm_period(int sel, int val){
	switch(sel){
 6f4:	34 03 00 07 	mvi r3,7
 6f8:	54 23 00 0b 	bgu r1,r3,724 <pwm_period+0x30>
 6fc:	3c 21 00 02 	sli r1,r1,2
 700:	78 03 00 00 	mvhi r3,0x0
 704:	38 63 07 f8 	ori r3,r3,0x7f8
 708:	b4 61 18 00 	add r3,r3,r1
 70c:	28 61 00 00 	lw r1,(r3+0)
 710:	c0 20 00 00 	b r1
		case 6:
			pwm0->period6 = val;
			break;
			
		case 7:
			pwm0->period7 = val;
 714:	78 01 00 00 	mvhi r1,0x0
 718:	38 21 08 2c 	ori r1,r1,0x82c
 71c:	28 21 00 00 	lw r1,(r1+0)
 720:	58 22 00 58 	sw (r1+88),r2
 724:	c3 a0 00 00 	ret
		case 5:
			pwm0->period5 = val;
			break;
			
		case 6:
			pwm0->period6 = val;
 728:	78 01 00 00 	mvhi r1,0x0
 72c:	38 21 08 2c 	ori r1,r1,0x82c
 730:	28 21 00 00 	lw r1,(r1+0)
 734:	58 22 00 4c 	sw (r1+76),r2
			break;
 738:	c3 a0 00 00 	ret
}

void pwm_period(int sel, int val){
	switch(sel){
		case 0:
			pwm0->period0 = val;
 73c:	78 01 00 00 	mvhi r1,0x0
 740:	38 21 08 2c 	ori r1,r1,0x82c
 744:	28 21 00 00 	lw r1,(r1+0)
 748:	58 22 00 04 	sw (r1+4),r2
			break;
 74c:	c3 a0 00 00 	ret

		case 1:
			pwm0->period1 = val;
 750:	78 01 00 00 	mvhi r1,0x0
 754:	38 21 08 2c 	ori r1,r1,0x82c
 758:	28 21 00 00 	lw r1,(r1+0)
 75c:	58 22 00 10 	sw (r1+16),r2
			break;
 760:	c3 a0 00 00 	ret
			
		case 2:
			pwm0->period2 = val;
 764:	78 01 00 00 	mvhi r1,0x0
 768:	38 21 08 2c 	ori r1,r1,0x82c
 76c:	28 21 00 00 	lw r1,(r1+0)
 770:	58 22 00 1c 	sw (r1+28),r2
			break;
 774:	c3 a0 00 00 	ret
			
		case 3:
			pwm0->period3 = val;
 778:	78 01 00 00 	mvhi r1,0x0
 77c:	38 21 08 2c 	ori r1,r1,0x82c
 780:	28 21 00 00 	lw r1,(r1+0)
 784:	58 22 00 28 	sw (r1+40),r2
			break;
 788:	c3 a0 00 00 	ret
			
		case 4:
			pwm0->period4 = val;
 78c:	78 01 00 00 	mvhi r1,0x0
 790:	38 21 08 2c 	ori r1,r1,0x82c
 794:	28 21 00 00 	lw r1,(r1+0)
 798:	58 22 00 34 	sw (r1+52),r2
			break;
 79c:	c3 a0 00 00 	ret
			
		case 5:
			pwm0->period5 = val;
 7a0:	78 01 00 00 	mvhi r1,0x0
 7a4:	38 21 08 2c 	ori r1,r1,0x82c
 7a8:	28 21 00 00 	lw r1,(r1+0)
 7ac:	58 22 00 40 	sw (r1+64),r2
			break;
 7b0:	c3 a0 00 00 	ret
